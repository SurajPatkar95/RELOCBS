@using RELOCBS.Utility;
@using PagedList;
@using PagedList.Mvc;
@using RELOCBS.Entities;
@using RELOCBS.Extensions;

@model RELOCBS.Entities.WarehouseJob
@{

}
<style>
    .width-95 {
        width: 95%;
    }

    .modal-dialog {
        overflow-y: initial !important
    }

    .modal-body {
        max-height: calc(100vh - 150px);
        height :480px;
        overflow-y: scroll;
    }
</style>
<div class="clearfix">
    <fieldset id="divJob" class="col-md-12 border-grey m-t-sm">
        <legend> Job Opening</legend>
        @using (Html.BeginForm("Create", "WarehouseJob", new { JobID = @Model.JobID }, FormMethod.Post, new { @name = "JobOpeningForm", @id = "JobOpeningForm", enctype = "multipart/form-data" }))
        {
            <div class="clearfix pnl-filter">
                @Html.HiddenFor(model => model.JobID)
                @Html.HiddenFor(model => model.CompanyID)
                @Html.HiddenFor(model => model.IsRMCBuss)
                @Html.HiddenFor(model => model.RateComponentID)
                @Html.AntiForgeryToken()
                @if (!string.IsNullOrWhiteSpace(Model.JobNo))
                {
                    <div class="col-sm-2 col-md-2">
                        <div class="form-group">
                            <label class="control-label">Job No.</label>
                            @Html.EditorFor(model => model.JobNo, new { htmlAttributes = new { @class = "form-control input-sm clearfix", @readonly = "readonly" } })
                        </div>
                    </div>
                }
                <div class="col-sm-2 col-md-2">
                    <div class="form-group">
                        <label>Job Open Date</label>
                        <div class="input-group input-group-sm date" id="dtp_ToDate">
                            @Html.EditorFor(model => model.JobOpenDate, new { htmlAttributes = new { @placeholder = "Job Open Date", @tooltip = "Job Open Date", @class = "form-control input-sm datepicker", title = "Job Open Date" } }).DisableIf(() => !string.IsNullOrWhiteSpace(Model.JobNo))
                            <span class="input-group-addon" style="display: none">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                        @Html.HiddenFor(model => model.JobOpenDate)
                    </div>
                </div>
                <div class="col-sm-2 col-md-2">
                    <div class="form-group">
                        <label class="control-label">Business Line</label>
                        @Html.DropDownListFor(model => model.BusinessLineID, new SelectList((System.Collections.IEnumerable)ViewData["BussLineList"], "Value", "Text"), "--Select Business Line--", new { @class = "form-control input-sm clearfix" })
                        @Html.ValidationMessageFor(model => model.BusinessLineID, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-sm-2 col-md-2">
                    <div class="form-group">
                        <label class="control-label">Job Type</label>
                        @Html.DropDownListFor(model => model.JobTypeId, new SelectList((System.Collections.IEnumerable)ViewData["WHJobTypeList"], "Value", "Text"), "--Select Job Type--", new { @class = "form-control input-sm clearfix" })
                        @Html.ValidationMessageFor(model => model.JobTypeId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-sm-2 col-md-2">
                    <div class="form-group">
                        <label class="control-label">Handling Branch</label>
                        @Html.DropDownListFor(model => model.HandlingBranchID, new SelectList((System.Collections.IEnumerable)ViewData["BranchList"], "Value", "Text"), "--Select Handling Branch--", new { @class = "form-control input-sm clearfix enableselect" })
                        @Html.ValidationMessageFor(model => model.HandlingBranchID, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-sm-2 col-md-2">
                    <div class="form-group">
                        <label class="control-label">Revenue Branch</label>
                        @Html.DropDownListFor(model => model.RevenueBranchID, new SelectList((System.Collections.IEnumerable)ViewData["BranchList"], "Value", "Text"), "--Select Revenue Branch--", new { @class = "form-control input-sm clearfix RevenueBranch", @disabled = "disabled" })
                        @Html.HiddenFor(model => model.RevenueBranchID,new {@class= "RevenueBranch" })
                        @Html.ValidationMessageFor(model => model.RevenueBranchID, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-md-1">
                    <div class="clearfix">
                        <input type="submit" id="btnSubmit" name="SaveJob" class="btn btn-primary btn-sm filter-custom-margin" value="Save" />
                    </div>
                </div>
                @if (Model.JobID != null)
                {
                    <div class="form-group col-md-1">
                        <div class="clearfix">
                            <a href="@Url.Action("Create", "DMS", new { id = @Model.JobID, Type = "MoveMan" })" class="btn btn-primary btn-sm pull-right m-l-xs filter-custom-margin" data-toggle="modal" data-target="#mdlDMS" data-cache="false" title="DMS"><i class="glyphicon glyphicon-folder-open m-r-xs"></i>DMS</a>
                        </div>
                    </div>
                }
            </div>
        }
    </fieldset>
    <fieldset id="InstructionSheetDetail" class="col-md-12 border-grey m-t-sm">
        <legend>Instruction Sheet</legend>
        <div class="m-t-sm pad-none">
            @if (Model.JobID != null)
            {

                using (Html.BeginForm("GetInstructions", "WarehouseJob", FormMethod.Post, new { @name = "CustomFilter", @id = "CustomFilter", @class = "form-inline" }))
                {

                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(model => model.JobID)
                    @Html.HiddenFor(model => model.JobTypeId)
                }

                <div class="row">
                    <div class="form-group pull-right col-md-2">
                        <div class="clearfix">
                            @Html.ActionLink("Create Instruction Sheet", "CreateInstruction","WarehouseJob", new RouteValueDictionary(new { JobID = Model.JobID, JobTypeId =Model.JobTypeId }),
                            new Dictionary<string, object>
                            {
                                { "id", "btnCreate" },
                                { "class", "btn btn-primary btn-sm pull-right" },
                                { "data-toggle" , "modal"},
                                { "data-target", "#mdlAddEdit"},
                                { "data-cache", false},
                                { "title", "Create Instruction Sheet"}
                            })
                        </div>
                    </div>
                </div>
            }
            <div id="mgrid">
                @{
                    var data = Model.WHJob_Instructions;
                    int skip = data != null && data.Count > 0 ? data.Count : 10;
                    int totalRecord = data != null ? data.Count : 0;
                    int pageSize = 1;
                    var itemsAsIPagedList = new StaticPagedList<WHJob_InstructionSheet>(data, pageSize, skip, totalRecord);
                }
                @Html.Partial("_InstructionsPartial", itemsAsIPagedList)
            </div>
        </div>
    </fieldset>
</div>

<div id="mdlAddEdit" class="modal fade" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-lg width-95">
        <div class="modal-content">

        </div>
    </div>
</div>

<!--DMS Model-->
<div id="mdlDMS" class="modal fade" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">

        </div>
    </div>
</div>

@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqunobtrusive")

    <script>
        $(document).ready(function () {

            $('body').on('hidden.bs.modal', '.modal', function () {
                $(this).removeData('bs.modal');
            });

            DatePickerClass();
            PagedOnCompleteBinds();

            $('form#CustomFilter').on('submit', function (e) {
                debugger;
                e.preventDefault();
                $(this).ajaxSubmit({
                    target: '#mgrid',
                    success: function () {
                        PagedOnCompleteBinds();
                    }
                });
            });

            $('#HandlingBranchID').on('change', function (e) {

                $('.RevenueBranch').val($(this).val());
            });

        });


        function PagedOnComplete(obj) {
            $('#mgrid table').unmask();
            PagedOnCompleteBinds();
        }

        function PagedOnCompleteBinds() {

            $(document).ready(function () {

                DatePickerClass();
                $('#mgrid .pagination li a').on('click', function (e) {
                    debugger;
                    e.preventDefault();
                    e.stopImmediatePropagation();
                    var sturl = $('#mgrid .sorted.grid-header-title a').attr('href');
                    if (typeof sturl != 'undefined') {
                        var gdir = url("?grid-dir", sturl);
                        sturl = sturl.replace(/grid-dir=\d+/i, 'grid-dir=' + (parseInt(gdir) == 0 ? 1 : 0));
                        sturl = sturl.replace('?', '&');
                    }

                    var sturl2 = $(this).attr('href');
                    if (sturl2 == undefined) {
                        sturl2 = "@Url.Action("GetInstructions", "WarehouseJob")?page=" + parseInt($(this).html());
                        sturl = sturl2;//+ sturl.replace(/page=\d+/i, "");
                    }
                    debugger;
                    $('form#CustomFilter').attr('action', sturl).submit();
                });

            })

        }

        function DatePickerClass() {

            $('.datepicker').datetimepicker({
                format: "DD-MMM-YYYY",
                widgetPositioning: {
                    horizontal: 'right',
                    vertical: 'bottom'
                }
            });

            $('.enableselect').select2();
        }
    </script>
}
