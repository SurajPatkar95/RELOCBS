@model RELOCBS.Entities.WHJob_InstructionSheet
@{

    ViewBag.Title = "Add/Edit Instruction Sheet";

}
<style type="text/css">
    .row-bordered:after {
        content: "";
        display: block;
        border-bottom: 1px solid #ccc;
        margin: 0 15px;
    }

    .well {
        background-color: whitesmoke;
        border: 1px solid;
    }
</style>

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
    <h4 class="modal-title">@ViewBag.Title</h4>
</div>

<div>
    @using (Html.BeginForm("CreateInstruction", "WarehouseJob", new { MoveID = Model.JobID, InstID = Model.InstID, JobTypeId =Model.JobTypeId }, FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.ValidationSummary(false, "")
        @Html.AntiForgeryToken()
        @Html.HiddenFor(a => a.JobID)
        @Html.HiddenFor(a => a.InstID)
        @Html.HiddenFor(m => m.Status)
        @Html.HiddenFor(m => m.StatusID)
        @Html.HiddenFor(m => m.IsSentToWarehouse)
        @Html.HiddenFor(m => m.HVactivityList)
        @Html.HiddenFor(m => m.submit)
        @Html.HiddenFor(m=>m.JobTypeId)
    <div class="modal-body">
     <div class="row">
            <div class="col-sm-3 col-md-3">
                <div class="form-group">
                    <strong>Job No. :</strong>&nbsp;<strong>@Html.Raw(Model.JobNo)</strong>
                </div>
            </div>
            <div class="col-sm-3 col-md-3">
                <div class="form-group">
                    <strong>Inst No. :</strong>&nbsp;<strong>@Html.Raw(Model.InstID)</strong>
                </div>
            </div>
            <div class="col-sm-3 col-md-3">
                <div class="form-group">
                    <strong>Status:</strong>&nbsp;<strong>@Html.Raw(Model.Status)</strong>
                </div>
            </div>
            <div class="col-sm-2 col-md-2">
                @*<div class="clearfix">
                    @if (Model.InstID != null && Model.InstID > 0)
                    {
                        <a href="@Url.Action("GetInstructionSheetPrint", "InstructionSheet", new { MoveID = Model.JobID,InstID = Model.InstID })" class="btn btn-primary btn-sm View m-n" title="Print Instruction Sheet" target="_blank"><i class='glyphicon glyphicon-print'></i></a>
                    }
                </div>*@
            </div>
        </div>
     <div>
            <div class="row">
                <div class="col-sm-3 form-group">
                    <label for="OriginAddrs" class="col-sm-3 col-form-label">Branch</label>
                    <div class="col-sm-9">
                        @Html.DropDownListFor(model => model.BranchID, new SelectList((System.Collections.IEnumerable)ViewData["BranchList"], "Value", "Text"), "--Select Branch--", new { id = "BranchDropdown", @class = "form-control input-sm clearfix enableselect" })
                        @Html.ValidationMessageFor(model => model.BranchID, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-sm-3 form-group">
                    <label for="OriginAddrs" class="col-sm-3 col-form-label">Warehouse</label>
                    <div class="col-sm-9">
                        @Html.DropDownListFor(model => model.WarehouseID, new SelectList((System.Collections.IEnumerable)ViewData["WarehoueList"], "Value", "Text"), "--Select Warehouse--", new { id = "WarehouseDropdown", @class = "form-control input-sm clearfix enableselect" })
                        @Html.ValidationMessageFor(model => model.WarehouseID, "", new { @class = "text-danger" })
                    </div>
                </div>
                @*<div class="col-sm-3">
                    <div class="form-group">
                        <label>Goods Description</label>
                        @Html.DropDownListFor(model => model.GoodsDescriptionID, new SelectList((System.Collections.IEnumerable)ViewData["GoodsDescriptionList"], "Value", "Text"), "--Select Goods Description--", new { id = "GoodsDescriptionDropdown", @class = "form-control input-sm clearfix", @disabled = "disabled" })
                    </div>
                </div>*@
                <div class="col-sm-6 form-group">
                    <label for="OriginAddrs" class="col-sm-4 col-form-label">Special Instructions</label>
                    <div class="col-sm-8">
                        @Html.TextAreaFor(m => m.SpecialInstructions, new { @class = "form-control customTxt" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="form-group col-md-6">
                    <label for="OriginAddrs" class="col-sm-2 col-form-label">Address1</label>
                    <div class="col-sm-10">
                        @Html.TextAreaFor(a => a.Add1, new { @class = "form-control input-sm", rows = "3", placeholder = "Address 1", title = "OriginAddrs1", @id = "OriginAddrs1" })
                        @Html.ValidationMessageFor(a => a.Add1, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-md-6">
                    <label for="OriginAddrs" class="col-sm-2 col-form-label">Address2</label>
                    <div class="col-sm-10">
                        @Html.TextAreaFor(a => a.Add2, new { @class = "form-control input-sm", rows = "3", placeholder = "Address 2", title = "OriginAddrs2", @id = "OriginAddrs2" })
                        @Html.ValidationMessageFor(a => a.Add2, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="form-group row">
                <label for="OrgCityDropDown" class="col-sm-1  col-form-label">City</label>
                <div class="col-sm-3">
                    @Html.DropDownListFor(a => a.CityID, new SelectList((System.Collections.IEnumerable)Enumerable.Empty<SelectListItem>(), "Value", "Text", ViewData["DestCityID"]), "--Select One--", new { @class = "form-control enableselect", id = "OrgCityDropDown", title = "OrgCityDropDown" })
                    @Html.ValidationMessageFor(a => a.CityID, "", new { @class = "text-danger" })
                </div>
                <label for="Pincode" class="col-sm-1 col-form-label">Pincode</label>
                <div class="col-sm-2">
                    @Html.TextBoxFor(a => a.Pincode, new { @class = "form-control input-sm", placeholder = "Pincode", title = "OrgPincode", @id = "OrgPincode", onkeypress = "return OnlyInteger(this, event);" })
                    @Html.ValidationMessageFor(a => a.Pincode, "", new { @class = "text-danger" })
                </div>
                <label for="OrgMobile" class="col-sm-1 col-form-label">Mobile</label>
                <div class="col-sm-3">
                    @Html.TextBoxFor(a => a.Mobile, new { @class = "form-control input-sm", placeholder = "Mobile", title = "OrgMobile", @id = "OrgMobile" })
                    @Html.ValidationMessageFor(a => a.Mobile, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="form-group">
                    <label for="OrgEmail" class="col-sm-1 col-form-label">Email</label>
                    <div class="col-sm-4">
                        @Html.TextBoxFor(a => a.Email, new { @class = "form-control input-sm", placeholder = "Email", title = "OrgEmail", @id = "OrgEmail" })
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-1 col-form-label">Unit</label>
                    <div class="col-sm-2">
                        @Html.DropDownListFor(model => model.WeightUnitID, new SelectList((System.Collections.IEnumerable)ViewData["WeightUnitList"], "Value", "Text"), "--Select Wt/Vol Unit--", new { @class = "form-control input-sm clearfix" })
                        @Html.ValidationMessageFor(model => model.WeightUnitID, "", new { @class = "text-danger" })
                    </div>
                    <label class="col-sm-1 col-form-label">Wt/Vol</label>
                    <div class="col-sm-2">
                        @Html.EditorFor(model => model.WeightUnitFrom, new { htmlAttributes = new { @class = "form-control input-sm clearfix WeightFrom", onkeypress = "return OnlyDouble(this, event);", onchange = "WeightCopy(this)" } })
                        @Html.ValidationMessageFor(model => model.WeightUnitFrom, "", new { @class = "text-danger" })
                    </div>
                    <label class="col-sm-! col-form-label hide">To</label>
                    <div class="col-sm-2 hide">
                        @Html.EditorFor(model => model.WeightUnitTo, new { htmlAttributes = new { @class = "form-control input-sm clearfix WeightTo", onkeypress = "return OnlyDouble(this, event);" } })
                        @Html.ValidationMessageFor(model => model.WeightUnitTo, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <fieldset class="col-md-12 border-grey m-t-sm">
                <legend data-toggle="collapse" data-target="#SODetails">
                    <i class="more-less glyphicon glyphicon-minus"></i>
                    Activities
                </legend>
                <div class="m-t-sm panel-collapse CollapsingFieldSet" id="SODetails">
                    <div class="row">
                        <div class="col-sm-2 col-md-2 form-group">
                            <label>Activity Type</label>
                            @Html.DropDownList("ActivityType", new SelectList((System.Collections.IEnumerable)ViewData["ActivityTypeList"], "Value", "Text"), "--Select Activity Type--", new { @class = "form-control input-sm clearfix enableselect" })
                        </div>
                        <div class="col-sm-2 col-md-2 form-group">
                            <label>FromDate</label>
                            @Html.TextBox("AFromDate", null, new { @class = "form-control input-sm clearfix AFromDate datetimepicker " })
                        </div>
                        <div class="col-sm-2 col-md-2 form-group">
                            <label>ToDate</label>
                            @Html.TextBox("AToDate", null, new { @class = "form-control input-sm clearfix AToDate datetimepicker" })
                        </div>
                        <div class="col-sm-1 col-md-1 form-group">
                            <label>Days</label>
                            @Html.TextBox("ActNoOfDays", null, new { @class = "form-control input-sm clearfix ActNoOfDays", onkeypress = "return OnlyInteger(this, event);", @maxlength = "3" })
                        </div>
                        <div class="col-sm-1 col-md-1 form-group">
                            <label>Time</label>
                            @Html.TextBox("ARepTime", null, new { @class = "form-control input-sm clearfix ARepTime timepicker" })
                        </div>
                        <div class="col-sm-1 col-md-1 form-group">
                            <label>From Loc.</label>
                            @Html.TextBox("AFromLoc", null, new { @class = "form-control input-sm clearfix AFromLoc", @placeholder = "From Location", @maxlength = "50" })
                        </div>
                        <div class="col-sm-1 col-md-1 form-group">
                            <label>To Loc.</label>
                            @Html.TextBox("AToLoc", null, new { @class = "form-control input-sm clearfix AToLoc", @placeholder = "To Location", @maxlength = "50" })
                        </div>
                        <div class="col-sm-1 col-md-1 form-group">
                            <label>Remark</label>
                            @Html.TextBox("ARemark", null, new { @class = "form-control input-sm clearfix ARemark", @maxlength = "250" })
                        </div>
                        <div class="col-sm-1 col-md-1 form-group">
                            <div class="clearfix">
                                <input type="button" id="btnAdd" value="Add" class="btn btn-primary btn-sm filter-custom-margin" onclick="AddActivity()">
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12">
                            <table id="tblActivities" class="table table-striped table-bordered">
                                <thead>
                                    <tr>
                                        <th>Activity Type</th>
                                        <th>From Date</th>
                                        <th>To Date</th>
                                        <th>Days</th>
                                        <th>From Location</th>
                                        <th>To Location</th>
                                        <th>Time</th>
                                        <th>Remark</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody style="max-height:150px">
                                    @for (var i = 0; i < Model.activities.Count; i++)
                                    {

                                        <tr>
                                            <td>
                                                @Html.EditorFor(a => Model.activities[i].ActivityTypeName, new { htmlAttributes = new { @placeholder = "Activity Type", @tooltip = "Activity Type", @class = "form-control input-sm ActType", title = "Activity Type", @readonly = "readonly" } })
                                                @Html.HiddenFor(x => Model.activities[i].ActivityTypeID, new { @class = "ActivityTypeID" })
                                                @Html.HiddenFor(x => Model.activities[i].ActivityID, new { @class = "ActivityID" })
                                                @*@Html.ValidationMessageFor(x => Model.activities[i].ActivityTypeID, "", new { @class = "text-danger" })*@
                                            </td>
                                            <td>
                                                @Html.EditorFor(a => Model.activities[i].FromDate, new { htmlAttributes = new { @placeholder = "From Date", @tooltip = "From Date", @class = "form-control input-sm datetimepicker ActFromDate", title = "From Date" } })
                                                @Html.ValidationMessageFor(a => Model.activities[i].FromDate, "", new { @class = "text-danger" })
                                            </td>
                                            <td>
                                                @Html.EditorFor(a => Model.activities[i].ToDate, new { htmlAttributes = new { @placeholder = "To Date", @tooltip = "To Date", @class = "form-control input-sm datetimepicker ActToDate", title = "To Date" } })
                                                @Html.ValidationMessageFor(a => Model.activities[i].ToDate, "", new { @class = "text-danger" })
                                            </td>
                                            <td>
                                                @Html.EditorFor(a => Model.activities[i].NumberOfDays, new { htmlAttributes = new { @placeholder = "Days", @tooltip = "Days", @class = "form-control input-sm ActDays", title = "Days", onkeypress = "return OnlyInteger(this, event);" } })
                                                @Html.ValidationMessageFor(a => Model.activities[i].NumberOfDays, "", new { @class = "text-danger" })
                                            </td>
                                            <td>
                                                @Html.EditorFor(x => Model.activities[i].FromLocation, new { htmlAttributes = new { @class = "form-control input-sm clearfix ActFromLoc" } })
                                                @Html.ValidationMessageFor(a => Model.activities[i].FromLocation, "", new { @class = "text-danger" })
                                            </td>
                                            <td>
                                                @Html.EditorFor(x => Model.activities[i].ToLocation, new { htmlAttributes = new { @class = "form-control input-sm clearfix ActToLoc" } })
                                                @Html.ValidationMessageFor(a => Model.activities[i].ToLocation, "", new { @class = "text-danger" })
                                            </td>
                                            <td>
                                                @Html.EditorFor(a => Model.activities[i].RepTime, new { htmlAttributes = new { @placeholder = "Rep Time", @tooltip = "Rep Time", @class = "form-control input-sm clearfix timepicker ActRepTime" } })
                                            </td>
                                            <td>
                                                @Html.EditorFor(x => Model.activities[i].Remark, new { htmlAttributes = new { @class = "form-control input-sm clearfix ActRemark" } })
                                            </td>
                                            <td data-ng-if="seletedJob.WisStatus != 'Completed'">
                                                <button type="button" class="btnDelete btn btn-xs btn-danger glyphicon glyphicon-trash marl-5 pull-left" onclick="RemoveActivity(this)"></button>
                                                @Html.HiddenFor(x => Model.activities[i].InActive, new { @class = "InActive" })
                                            </td>
                                        </tr>

                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </fieldset>

        </div>
    </div>
    <div class="modal-footer">
        <div class="row">
            <div class="pull-right col-md-1">
                @if (Model.IsSentToWarehouse == 0 && Model.IsSentToWarehouse <= 1)
                {
                    <button type="submit" class="btn btn-primary m-l-sm btn-sm m-t-xs pull-right" name="submit" value="Save" id="btnSave">Save</button>
                    @*<input type="submit" class="btn btn-primary pull-right" name="submit" value="Save" id="btnSave" />*@
                }
            </div>
            <div class="pull-right col-md-1">
                @if (Model.InstID > 0)
                {
                    if (Model.IsSentToWarehouse == 0 && Model.IsSentToWarehouse <= 1)
                    {
                        <button type="submit" class="btn btn-primary m-l-sm btn-sm m-t-xs pull-right" name="submit" value="SentToWarehouse" id="btnSentToWarehouse">Sent To Warehouse</button>
                    }
                }
            </div>
        </div>
    </div>
    }
</div>

<script>
    $(document).ready(function () {
        $("[data-val-required]").each(function () {
            $("label[for=" + this.id + "]").addClass("requiredlabel")
        });

        $("input").attr("autocomplete", "off");

        $('.enableselect').select2();

        var form = $("#mdlAddEdit form");
        form.removeData('validator');
        form.removeData('unobtrusiveValidation');
        $.validator.unobtrusive.parse(form);

        var url = '@Url.Action("GetCityList", "WarehouseJob")';
        var CityID = '@Model.CityID';
        AjaxFillDropDown('#OrgCityDropDown', url);
        AjaxFillDropDown('#OrgCityDropDown', url, CityID);

    });
    
    $('#mdlAddEdit form').on('submit', function (e) {
        e.preventDefault();
        if (!$(this).valid()) { return; }

        $('#mdlAddEdit .modal-content').mask("Loading...");
        $(this).ajaxSubmit({
            target: '#mdlAddEdit .modal-content',
            success: function (data) {
                $('#mdlAddEdit .modal-content').html(data.Result);
                if (data.Success) {
                    var message = data.Message;
                    //$('form#CustomFilter').submit();
                    debugger;
                    $('#mgrid .pagination li.active a').trigger('click');
                    toastr.success(message);
                    $('#mdlAddEdit').modal('hide');
                }
                $('#mdlAddEdit .modal-content').unmask();
            }
        });
    });

</script>



    <script type="text/javascript">

        function WeightCopy(sender) {

            if ($('.WeightTo') != null && $('.WeightTo').length > 0) {

                $('.WeightTo').val($('.WeightFrom').val());
            }
            return false;
        }

        $('#BranchDropdown').change(function () {
            var id = $(this).val();
            $.ajax({
                type: "post",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                url: '@Url.Action("GetWarehouseList", "Combo")'+'?BranchID=' + id,
                data: "{BranchID:'" + id + "'}",
                success: function (data) {

                    if ($("#BranchDropdown").val() != "") {
                        $("#ShippingLineDropdown").prop("disabled", true);

                        $("#WarehouseDropdown").empty();
                        var s = '<option value="-1">--Select Warehouse--</option>';
                        $("#WarehouseDropdown").append(s);
                        $.each(data, function (index, item) { // item is now an object containing properties ID and Text
                            $("#WarehouseDropdown").append($('<option></option>').text(item.Text).val(item.Value));
                        });

                        //$("#ShippingLineDropdown").prop('selected', '-1');

                        $("#WarehouseDropdown").prop("disabled", false);

                    }
                },
                failure: function (data) {
                    //alert('error occured');
                }

            });
        });


       $(document).ready(function () {

            DatePickerClass();
           $("#btnSave").bind("click", { value:"Save"} ,SaveData);
           $("#btnSentToWarehouse").bind("click", { value:"SentToWarehouse"}, SaveData);
            //$('.CollapsingFieldSet').on('hidden.bs.collapse', toggleIcon);
            //$('.CollapsingFieldSet').on('shown.bs.collapse', toggleIcon);
        });

        function DatePickerClass() {

            $('.datetimepicker').datetimepicker({
                format: "DD-MMM-YYYY HH:mm",
                sideBySide: true,
                widgetPositioning: {
                    vertical: 'bottom'
                }

            });

            $('.timepicker').datetimepicker({
                format: 'HH:mm',
            });

            $('.datetimepicker').each(function () {

                if ($(this).val().includes("0001")) {
                    $(this).val("");
                }
            });

        }

        function SaveData(e) {
            var data = [];
            $('#tblActivities tbody tr').each(function () {

                var ActType = $(this).find('.ActType').val();
                var ActivityID = $(this).find('.ActivityID').val();
                var ActivityTypeID = $(this).find('.ActivityTypeID').val();
                var InstID = $(this).find('.InstID').val();
                var ActFromDate = $(this).find('.ActFromDate').val();
                var ActToDate = $(this).find('.ActToDate').val();
                var ActFromLoc = $(this).find('.ActFromLoc').val();

                var ActToLoc = $(this).find('.ActToLoc').val();
                var ActRepTime = $(this).find('.ActRepTime').val();

                var ActRemark = $(this).find('.ActRemark').val();
                var ActDays = $(this).find('.ActDays').val();

                var alldata = {
                    'ActivityName': ActType,
                    'ActivityID': InstID != null ? parseInt(ActivityID) : 0,
                    'ActivityTypeID': parseInt(ActivityTypeID),
                    'InstID': InstID != null ? parseInt(InstID) : 0,
                    'FromDate': ActFromDate,
                    'ToDate': ActToDate,
                    'FromLocation': ActFromLoc,
                    'ToLocation': ActToLoc,
                    'RepTime': ActRepTime,
                    'Remark': ActRemark,
                    'InActive': false,
                    'NumberOfDays': ActDays != null ? parseInt(ActDays) : 0
                }
                debugger;
                data.push(alldata);
            });

            if ($('#tblActivities tbody tr').length <= 0) {

                alert('Atleast One activity is required');
                return false;
            }

            var pair = { 'Inst_Activities': data };
            $("#HVactivityList").val(JSON.stringify(pair));

            $("#submit").val(e.data.value);
        }


        function ClearActivity() {

            //$("#ActivityType").val('').trigger('change');
            //$("#AFromDate").val('');
            //$("#AToDate").val('');
            //$('#ARepTime').val('');
            $("#AFromLoc").val('');
            $("#AToLoc").val('');
            $('#ARemark').val('');
        }


        function RemoveActivity(sender) {

            //Determine the reference of the Row using the Button.
            var row = $(sender).closest("TR");
            var name = $("TD", row).find('.ActType').val().trim();
            if (confirm("Do you want to delete: " + name.trim())) {
                //Get the reference of the Table.
                var table = $("#tblActivities")[0];

                //Delete the Table row using it's Index.
                table.deleteRow(row[0].rowIndex);
                //row.find('.InActive').val("1");
                //row.toggle();
                //$(sender).closest("TR").remove();
                return false;
            }

            return false;
        }

        function checkActivityExists(Activity) {

            var result = false;

            $("#tblActivities > TBODY").find('.ActivityTypeID').each(function () {

                if (parseInt($(this).val()) === Activity) {
                    result = true;
                    return false;
                }

            });

            return result;

        }


        function AddActivity() {

            var Activity = $("#ActivityType option:selected");
            var RepTime = $("#ARepTime").val();
            var Remark = $("#ARemark").val();
            var FromDate = $("#AFromDate").val();
            var ToDate = $("#AToDate").val();
            var FromLoc = $("#AFromLoc").val();
            var ToLoc = $("#AToLoc").val();
            var Days = $('#ActNoOfDays').val();

            if (parseInt(Activity.val()) > 0 && FromLoc != null && FromLoc != "" && ToLoc != null && ToLoc != "" && FromDate != null && FromDate != "" && ToDate != null && ToDate != "" && Days != null && Days != "") {

                if (!checkActivityExists(parseInt(Activity.val()))) {

                    var tBody = $("#tblActivities > TBODY")[0];
                    var rowCount = $('#tblActivities > TBODY > tr').length;
                    var row = tBody.insertRow(-1);
                    row.className = "package-row";
                    var cell = $(row.insertCell(-1));
                    var td = '<input class="form-control input-sm clearfix ActType" id="activities_' + rowCount + '__ActivityTypeName" name="activities[' + rowCount + '].ActivityTypeName" type="text" value="' + Activity.text() + '" readonly="readonly" autocomplete="off"></input>'
                        + '<input class="ActivityTypeID" data-val="true" data-val-number="The field ActivityTypeID must be a number." data-val-required="The ActivityTypeID field is required." id="activities_' + rowCount + '__ActivityTypeID" name="activities[' + rowCount + '].ActivityTypeID" type="hidden" value="' + parseInt(Activity.val()) + '" autocomplete="off"></input>';
                    +'<input data-val="true" class="ActivityID" data-val-number="The field ActivityID must be a number." data-val-required="The ActivityID field is required." id="activities_' + rowCount + '__ActivityID" name="activities[' + rowCount + '].ActivityID" type="hidden" value="-1" autocomplete="off"></input>';
                    +'<span class="field-validation-valid text-danger" data-valmsg-for="activities[' + rowCount + '].ActivityTypeID" data-valmsg-replace="true"></span>'
                    cell.append(td);

                    cell = $(row.insertCell(-1));

                    td = '<input class="form-control input-sm clearfix ActFromDate datetimepicker text-box single-line valid" data-val="true" data-val-date="The field FromDate must be a date." data-val-required="The FromDate field is required."  id="activities_' + rowCount + '__FromDate" name="activities[' + rowCount + '].FromDate" placeholder="From Date"  type="datetime" value="' + FromDate + '" autocomplete="off"></input>'
                        + '<span class="text-danger field-validation-valid" data-valmsg-for="activities[' + rowCount + '].ToDate" data-valmsg-replace="true"></span>'
                    cell.append(td);

                    cell = $(row.insertCell(-1));
                    td = '<input class="form-control input-sm clearfix ActToDate datetimepicker text-box single-line valid" data-val="true" data-val-date="The field ToDate must be a date." data-val-required="The ToDate field is required." id="activities_' + rowCount + '__ToDate" name="activities[' + rowCount + '].ToDate" placeholder="To Date" type="datetime" value="' + ToDate + '" autocomplete="off"></input>'
                        + '<span class="text-danger field-validation-valid" data-valmsg-for="activities[' + rowCount + '].ToDate" data-valmsg-replace="true"></span>'
                    cell.append(td);

                    cell = $(row.insertCell(-1));

                    td = '<input class="form-control input-sm ActDays text-box single-line valid" data-val="true" data-val-number="The field NumberOfDays must be a number." data-val-range="Please enter a Days between 1 and 999" data-val-range-max="999" data-val-range-min="1" data-val-required="The NumberOfDays field is required." id="activities_' + rowCount + '__NumberOfDays" name="activities[' + rowCount + '].NumberOfDays" onkeypress="return OnlyInteger(this, event);" placeholder="Days" title="Days" tooltip="Days" type="number" value="' + Days + '" autocomplete="off">'
                        + '<span class="text-danger field-validation-valid" data-valmsg-for="activities[' + rowCount + '].NumberOfDays" data-valmsg-replace="true"></span>'
                    cell.append(td);

                    cell = $(row.insertCell(-1));

                    td = '<input class="form-control input-sm clearfix ActFromLoc text-box single-line valid" data-val="true" data-val-required="The FromLocation field is required."  id="activities_' + rowCount + '__FromLocation" name="activities[' + rowCount + '].FromLocation" type="text" value="' + FromLoc + '" autocomplete="off" ></input>'
                        + '<span class="text-danger field-validation-valid" data-valmsg-for="activities[' + rowCount + '].FromLocation" data-valmsg-replace="true"></span>'
                    cell.append(td);

                    cell = $(row.insertCell(-1));

                    td = '<input class="form-control input-sm clearfix ActToLoc text-box single-line valid" data-val="true" data-val-required="The ToLocation field is required."  id="activities_' + rowCount + '__ToLocation" name="activities[' + rowCount + '].ToLocation" type="text" value="' + ToLoc + '" autocomplete="off" ></input>'
                        + '<span class="text-danger field-validation-valid" data-valmsg-for="activities[' + rowCount + '].ToLocation" data-valmsg-replace="true"></span>'
                    cell.append(td);

                    cell = $(row.insertCell(-1));

                    td = '<input class="form-control input-sm clearfix ActRepTime timepicker" id="activities_' + rowCount + '__RepTime" name="activities[' + rowCount + '].RepTime" type="text" value="' + RepTime + '"></input>'
                    cell.append(td);

                    cell = $(row.insertCell(-1));

                    td = '<input class="form-control input-sm clearfix ActRemark" id="activities_' + rowCount + '__Remark" name="activities[' + rowCount + '].Remark" type="text" value="' + Remark + '"></input>'
                    cell.append(td);


                    var tdremove = '<button type="button" class="btnDelete btn btn-xs btn-danger glyphicon glyphicon-trash marl-5 pull-left" onclick="RemoveActivity(this)" />'
                        + '<input class="InActive" data-val="true" data-val-number="The field InActive must be a number." data-val-required="The InActive field is required." id="activities_' + rowCount + '__InActive" name="activities[' + rowCount + '].InActive" type="hidden" value="0" autocomplete="off">'
                    cell = $(row.insertCell(-1));
                    cell.append(tdremove);

                    DatePickerClass();
                    ClearActivity();
                }
                else {

                    alert('Activity Type already exists in list');
                    return false;

                }

            }
            else {
                alert('Activity Type, From Date, To Date, Days, From Location & To Location is required');
                return false;
            }

            return false;

        }
    </script>
    
    @*@Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/bootstrap-select")*@

