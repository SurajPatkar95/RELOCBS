@model StaticPagedList<RELOCBS.Entities.WOSService>

@using RELOCBS.Utility;
@using RELOCBS.Common;
@using PagedList;
@using PagedList.Mvc;
@using GridMvc.Html

@{
    string _PageID = "76";
    string param = "ServiceMastID=ParamValue0";
    bool hasAddAccess = UserSession.HasPermission(_PageID, EnumUtility.PageAction.ADD);
    bool hasEditAccess = UserSession.HasPermission(_PageID, EnumUtility.PageAction.EDIT);
    bool hasDeleteAccess = UserSession.HasPermission(_PageID, EnumUtility.PageAction.DELETE);
}

@Html.Grid(Model).Named("mainGrid").Columns(columns =>
{
columns.Add(m => m.ServiceName).Titled("Service Name").Css("col-md-4 col-sm-4").SortInitialDirection(GridMvc.Sorting.GridSortDirection.Ascending);

columns.Add(m => m.IsActive).Titled("Active").Css("col-md-2 col-sm-2").Encoded(false).Sanitized(false).RenderValueAs(m =>
@<span>
    @if (m.IsActive == true)
    {
        <i class="fa fa-check text-navy"></i>
    }
    else if (m.IsActive == false)
    {
        <i class="fa fa-remove text-red-dark"></i>
    }
</span>);

columns.Add().Titled("Actions").Css("col-md-2 col-sm-2").Encoded(false).Sanitized(false).Sortable(true).RenderValueAs(m =>
@<span>
    @if (hasAddAccess)
    {
        <a href="@Url.Action("Create", "WOSService", new { Key = CommonService.GenerateQueryString(param, new string[] { m.ServiceMastID.ToString() }) })" class="btnEditWOSService btn btn-xs btn-primary glyphicon glyphicon-pencil" data-target="#mdlAddEdit" data-toggle="modal" data-cache="false" title="Edit Service"></a>
        @*if (hasDeleteAccess)
        {
            <a href="@Url.Action("Delete", "WOSService", new { Key = CommonService.GenerateQueryString(param, new string[] { m.ServiceMastID.ToString() }) })" class="btnDeleteWOSService btn btn-xs btn-danger glyphicon glyphicon-trash" data-target="#mdlAddEdit" data-toggle="modal" data-cache="false" title="Delete Service"></a>
        }*@
    }
</span>);
}).Sortable()

<div class="clearfix pnl-pagination">
    <div class="pull-right">
        @Html.PagedListPager((IPagedList)Model, page => Url.Action("Index", new { page }), PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(new PagedListRenderOptions() { MaximumPageNumbersToDisplay = 4, DisplayPageCountAndCurrentLocation = true }, new AjaxOptions() { HttpMethod = "POST", UpdateTargetId = "dvWOSServiceGrid", OnComplete = "PagedOnComplete" }))
        @if (Model.Count() == 0)
        {
            <div class="pagination-container hidden"><ul class="pagination"><li class="active"><a>1</a></li></ul></div>
        }
    </div>
</div>