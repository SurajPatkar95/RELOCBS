@model RELOCBS.Entities.StorageBill

<style type="text/css">
    .tdNone {
        display: none;
    }

    input.Text-50 {
        max-width: 50px;
    }

    input.Text-100 {
        max-width: 100px;
    }

    input.Text-150 {
        max-width: 150px;
    }

    .toggleDisplay {
        display: none;
    }
</style>

@Html.HiddenFor(model => model.ProcessRowIndex)
@Html.HiddenFor(a => a.BaseCurrName, new { @class = "HfvBaseCurr" })
<div class="ibox row col-sm-12 m-b-lg">
    <div class="table-responsive">
        <table class="table table-striped border" id="DetailTable">
            <thead>
                <tr>
                    <th class="toggleDisplay">Unit</th>
                    <th class="toggleDisplay">Volume</th>
                    <th>Costhead</th>
                    <th>BillStartDate</th>
                    <th>BillToDate</th>
                    <th>Cost Amt</th>
                    <th>Invoice Amt</th>
                    <th>Billable Amt</th>
                    <th>Base Currancy</th>
                    <th class="tdNone">Tax %</th>
                    @if (Model.TaxType == "IGST")
                    {
                        <th class="tdNone">IGST Amt</th>
                    }
                    @if (Model.TaxType == "CGST")
                    {
                        <th class="tdNone">CGST Amt</th>
                        <th class="tdNone">SGST Amt</th>
                    }
                    @if (Model.TaxType == "VAT")
                    {
                        <th class="tdNone">VAT Amt</th>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Client) && Model.Client.Trim().ToUpper() == "BGRS")
                    {
                        <th>Comm. Amt</th>
                        <th>Admin Amt</th>
                        <th>Audit Amt</th>
                        <th>Total</th>
                    }

                    <th></th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.DetailList.Count; i++)
                {
                    Model.DetailList[i].Total = Convert.ToDecimal(String.Format("{0:0.00}", Model.DetailList[i].ActualAmount));
                    Model.DetailList[i].IGST = 0;
                    Model.DetailList[i].CGST = 0;
                    Model.DetailList[i].SGST = 0;
                    Model.DetailList[i].VAT = 0;

                    @*if (Model.TaxType == "IGST")
                    {
                        Model.DetailList[i].IGST = Convert.ToDecimal(String.Format("{0:0.00}", Model.DetailList[i].ActualAmount * Model.DetailList[i].Tax_Percent / 100));
                        Model.DetailList[i].Total = Convert.ToDecimal(String.Format("{0:0.00}", Model.DetailList[i].ActualAmount + Model.DetailList[i].IGST));
                    }
                    else if (Model.TaxType == "CGST")
                    {
                        Model.DetailList[i].CGST = Convert.ToDecimal(String.Format("{0:0.00}", Model.DetailList[i].ActualAmount * (Model.DetailList[i].Tax_Percent / 2) / 100));
                        Model.DetailList[i].SGST = Convert.ToDecimal(String.Format("{0:0.00}", Model.DetailList[i].ActualAmount * (Model.DetailList[i].Tax_Percent / 2) / 100));
                        Model.DetailList[i].Total = Convert.ToDecimal(String.Format("{0:0.00}", Model.DetailList[i].ActualAmount + Model.DetailList[i].CGST + Model.DetailList[i].SGST));
                    }
                    else if (Model.TaxType == "VAT")
                    {
                        Model.DetailList[i].VAT = Convert.ToDecimal(String.Format("{0:0.00}", Model.DetailList[i].ActualAmount * Model.DetailList[i].Tax_Percent / 100));
                        Model.DetailList[i].Total = Convert.ToDecimal(String.Format("{0:0.00}", Model.DetailList[i].ActualAmount + Model.DetailList[i].VAT));
                    }*@
                    Model.DetailList[i].CostAmt = Model.DetailList[i].CostAmt!=null ? Convert.ToDecimal(String.Format("{0:0.00}", Model.DetailList[i].CostAmt)) : Convert.ToDecimal(String.Format("{0:0.00}", 0));
                    Model.DetailList[i].Amount = Convert.ToDecimal(String.Format("{0:0.00}", Model.DetailList[i].Amount));
                    Model.DetailList[i].ActualAmount = Convert.ToDecimal(String.Format("{0:0.00}", Model.DetailList[i].ActualAmount));
                    if (Model.Client.Trim().ToUpper() == "BGRS")
                    {
                        Model.DetailList[i].CommissionAmt = Convert.ToDecimal(String.Format("{0:0.00}", Model.DetailList[i].CommissionAmt));
                        Model.DetailList[i].AuditAmt = Convert.ToDecimal(String.Format("{0:0.00}", Model.DetailList[i].AuditAmt));
                        Model.DetailList[i].AdminAmt = Convert.ToDecimal(String.Format("{0:0.00}", Model.DetailList[i].AdminAmt));
                        Model.DetailList[i].Total = Convert.ToDecimal(String.Format("{0:0.00}", Model.DetailList[i].Total + Model.DetailList[i].CommissionAmt + Model.DetailList[i].AdminAmt + Model.DetailList[i].AuditAmt));
                    }
                    <tr>
                        <td class="VolumeUnit toggleDisplay" style="width: 5%;">
                            <span>@Html.Raw(Model.DetailList[i].VolumeUnit)</span>
                            @Html.HiddenFor(a => Model.DetailList[i].VolumeUnit, new { @class = "TblVolumeUnit" })
                            @Html.HiddenFor(a => Model.DetailList[i].BillDetailId, new { @class = "TblBillDetailId" })
                        </td>
                        <td class="VolumeWt toggleDisplay" style="width: 5%;">
                            <span>@Html.Raw(Model.DetailList[i].VolumeWt)</span>
                            @Html.HiddenFor(a => Model.DetailList[i].VolumeWt, new { @class = "TblVolumeWt" })
                        </td>
                        <td class="StorageType" style="width: 10%;">
                            <span class="TblCostHeadLbl">@Html.Raw(Model.DetailList[i].CostHead)</span>
                            @Html.HiddenFor(a => Model.DetailList[i].CostHead, new { @class = "TblCostHead" })
                            @Html.HiddenFor(a => Model.DetailList[i].CostHeadID, new { @class = "TblCostHeadId" })
                            @Html.HiddenFor(a => Model.DetailList[i].TaxType, new { @class = "TblTaxType" })
                            @Html.HiddenFor(a => Model.DetailList[i].OldBillToDate, new { @class = "TblOldBillToDate" })
                        </td>
                        <td class="BillStartDate" style="width:10%;">
                            <span class="TblBillStartDateLbl">@Html.Raw(Model.DetailList[i].BillStartDate != null ? Convert.ToDateTime(Model.DetailList[i].BillStartDate).ToString("dd-MMM-yyyy") : null)</span>
                            @Html.HiddenFor(a => Model.DetailList[i].BillStartDate, new { @class = "TblBillStartDate" })
                        </td>
                        <td class="BillToDate" style="width: 5%;">
                            @Html.TextBoxFor(a => Model.DetailList[i].BillToDate, new { @class = "form-control input-sm TblBillToDate Text-100 EndMonthpicker" })
                        </td>
                        <td class="CostAmount" style="width:7%;">
                            @Html.TextBoxFor(a => Model.DetailList[i].CostAmt, new { @class = "form-control input-sm TblCostAmt Text-100", onblur = "CalGrossTotal(this);" })
                            @Html.HiddenFor(a => Model.DetailList[i].CostAmt, new { @class = "TblHfvCostAmt" })
                        </td>
                        <td class="Amount" style="width:7%;">
                            <span class="TblAmountLbl">@Model.DetailList[i].Amount</span>
                            @Html.HiddenFor(a => Model.DetailList[i].Amount, new { @class = "TblAmount" })
                        </td>
                        <td class="ActualAmount" style="width:7%;">
                            @Html.TextBoxFor(a => Model.DetailList[i].ActualAmount, new { @class = "form-control input-sm TblActualAmount Text-100", onblur = "CalGrossTotal(this);" })
                            @Html.HiddenFor(a => Model.DetailList[i].ActualAmount, new { @class = "TblHfvActualAmount" })
                        </td>
                        <td class="BaseCurr" style="width:7%;">
                            <span class="TblCurrLbl">@Model.BaseCurrName</span>
                        </td>
                        <td class="Tax_Percent tdNone" style="width: 5%;">
                            @Html.TextBoxFor(a => Model.DetailList[i].Tax_Percent, new { @class = "form-control input-sm Text-50 TblTax_Percent", @readonly = "readonly" })
                        </td>
                        @if (Model.DetailList[i].TaxType == "IGST")
                        {
                            <td class="IGST tdNone" style="width: 5%;">
                                @Html.TextBoxFor(a => Model.DetailList[i].IGST, new { @class = "form-control input-sm Text-100 TblIGST", @readonly = "readonly" })
                            </td>
                        }
                        @if (Model.DetailList[i].TaxType == "CGST")
                        {
                            <td class="CGST tdNone" style="width: 5%;">
                                @Html.TextBoxFor(a => Model.DetailList[i].CGST, new { @class = "form-control input-sm clearfix Text-100 TblCGST", @readonly = "readonly"})
                            </td>
                            <td class="SGST tdNone" style="width: 5%;">
                                @Html.TextBoxFor(a => Model.DetailList[i].SGST, new { @class = "form-control input-sm clearfix Text-100 TblSGST", @readonly = "readonly"})
                            </td>
                        }
                        @if (Model.DetailList[i].TaxType == "VAT")
                        {
                            <td class="VAT tdNone" style="width: 5%;">
                                @Html.TextBoxFor(a => Model.DetailList[i].VAT, new { @class = "form-control input-sm clearfix Text-100 TblVAT", @readonly = "readonly" })
                            </td>
                        }
                        @if (Model.Client.Trim().ToUpper() == "BGRS")
                        {
                            <td class="CommAmt" style="width:7%;">
                                @Html.TextBoxFor(a => Model.DetailList[i].CommissionAmt, new { @class = "form-control input-sm clearfix TblCommAmt Text-100", onblur = "CalGrossTotal(this);" })
                            </td>
                            <td class="AdminAmt" style="width:7%;">
                                @Html.TextBoxFor(a => Model.DetailList[i].AdminAmt, new { @class = "form-control input-sm clearfix TblAdminAmt Text-100", onblur = "CalGrossTotal(this);" })
                            </td>
                            <td class="AuditAmt" style="width:7%;">
                                @Html.TextBoxFor(a => Model.DetailList[i].AuditAmt, new { @class = "form-control input-sm clearfix TblAuditAmt Text-100", onblur = "CalGrossTotal(this);" })
                            </td>
                            <td class="Total" style="width:7%;">
                                @Html.TextBoxFor(a => Model.DetailList[i].Total, new { @class = "form-control input-sm clearfix TblTotal Text-100", @readonly = "readonly" })
                            </td>
                        }
                        else
                        {
                            <td class="Total tdNone" style="width:7%;">
                                @Html.TextBoxFor(a => Model.DetailList[i].Total, new { @class = "form-control input-sm clearfix TblTotal Text-100", @readonly = "readonly" })
                            </td>
                        }

                        <td style="width: 5%;">
                            @Html.HiddenFor(a => Model.DetailList[i].IsActive, new { @class = "TblIsActive" })
                            @if (Model.DetailList[i].CostHeadID > 0 && Model.DetailList[i].CostHeadID <= 3)
                            {
                                <input type="submit" name="SubmitInvoice" value="Process" data-id="btnProcessIndv" class="btnProcess btn btn-xs btn-primary m-n pad-top-none" onclick="BtnProcess(this)" />
                            }
                            @if (Model.DetailList[i].ShowDelete)
                            {
                                <button type="button" class="btnDelete btn btn-xs btn-danger glyphicon glyphicon-trash m-n pad-top-none" onclick="Remove(this)"></button>
                            }

                        </td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>

                    @if (Model.BillType == 'I')
                    {
                        <td colspan="3"></td>
                        <td style="width: 10%;">
                            @Html.TextBox("BillItems._FinalCostAmount", "", new { @class = "td-amtwidth form-control input-sm Text-100", @readonly = "readonly" })
                        </td>
                        <td></td>
                        <td style="width: 10%;">
                            @Html.TextBox("BillItems._FinalAmount", "", new { @class = "td-amtwidth form-control input-sm Text-100", @readonly = "readonly" })
                        </td>
                    }
                    else
                    {
                        <td colspan="4"></td>
                    }
                    @*<td style="width: 10%;">
            @Html.TextBox("BillItems._FinalAuditedAmount", "", new { @class = "td-amtwidth form-control input-sm clearfix", @readonly = "readonly" })
        </td>*@
                    @if (Model.TaxType == "NIL")
                    {
                        <td class="tdNone" colspan="2"></td>
                    }
                    @if (Model.TaxType == "IGST" || Model.TaxType == "VAT")
                    {
                        <td class="tdNone" colspan="2"></td>
                    }
                    @if (Model.TaxType == "CGST")
                    {
                        <td class="tdNone" colspan="3"></td>
                    }
                    <td class="tdNone">
                        @Html.TextBox("BlillItem_FinalTotalAmount", "", new { @class = "td-amtwidth form-control input-sm clearfix Text-100", @readonly = "readonly" })
                    </td>
                </tr>
            </tfoot>
        </table>
    </div>
</div>


