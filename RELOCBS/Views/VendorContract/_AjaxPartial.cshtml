@using RELOCBS.Utility;
@using RELOCBS.App_Code;
@using RELOCBS.Common;
@using PagedList;
@using PagedList.Mvc;
@using GridMvc.Html

@model StaticPagedList<RELOCBS.Entities.VendorContractGrid>

@{
    
    string _PageID = "85";
    bool hasAddAccess = UserSession.HasPermission(_PageID, EnumUtility.PageAction.ADD);
    bool hasEditAccess = UserSession.HasPermission(_PageID, EnumUtility.PageAction.EDIT);
    bool hasDeleteAccess = UserSession.HasPermission(_PageID, EnumUtility.PageAction.DELETE);
    bool hasViewAccess = UserSession.HasPermission(_PageID, EnumUtility.PageAction.VIEW);
}

@Html.Grid(Model).Named("mainGrid").Columns(columns =>
{
columns.Add(o => o.VContractId)
.Titled("ContractId")
.Css("col-md-1")
.SetWidth(2);
columns.Add(o => o.VendorName)
.Titled("VendorName")
.Css("col-md-2")
.SetWidth(2);
columns.Add(o => o.Account_MasterCode)
.Css("col-md-2")
.Titled("AccountMasterCode")
.SetWidth(10);
columns.Add(o => o.Account_SubCode)
.Css("col-md-2")
.Titled("AccountSubCode")
.SetWidth(10);
columns.Add(o => o.Commencement_Date).Format("{0:dd-MMM-yyyy}")
.Css("col-md-1")
.Titled("Contract CommencementDate")
.SetWidth(10);
columns.Add(o => o.ExpiryDate).Format("{0:dd-MMM-yyyy}")
.Css("col-md-1")
.Titled("Contract ExpiryDate")
.SetWidth(10);
columns.Add(o => o.Contact_PersonName)
.Css("col-md-1")
.Titled("Contact PersonName")
.SetWidth(10);
columns.Add(o => o.Owner_Name)
.Css("col-md-1")
.Titled("OwnerName")
.SetWidth(10);
columns.Add(o => o.IsMSME)
.Css("col-md-1")
.Titled("MSME")
.SetWidth(10);
columns.Add(o => o.LastModifiedDate)
.Css("col-md-3")
.Titled("LastModifiedDate").Format("{0:dd-MMM-yyyy HH:mm}")
.SetWidth(10);
columns.Add(o => o.LastModifiedBy)
.Css("col-md-3")
.Titled("LastModifiedBy")
.SetWidth(10);

columns.Add()
.Encoded(false)
.Sanitized(false)
.Sortable(true)
.Css("col-md-2").Titled("Actions")
.RenderValueAs(d =>
    @<span>
        @if (hasEditAccess)
         {
                <a href="@Url.Action("Create", "VendorContract",new { id = d.VContractId})" class="btnEdit btn btn-xs btn-default glyphicon glyphicon-pencil pull-left" target="_blank" title="Edit"></a>
         }
        
        @*@if (hasViewAccess && d.VContractId > 0)
        {
            <a href="@Url.Action("GetReport", "VendorContract",new { id = d.VContractId })" class="btnView btn btn-sm btn-primary glyphicon glyphicon-print   pull-right" target="_blank" title="View Report"></a>
        }*@

        @if(hasViewAccess && d.VContractId > 0)
        {
            <a href="@Url.Action("CreateDocument", "VendorContract", new { id = d.VContractId, Type = "VendorContract" })" class="btn btn-primary btn-sm pull-right m-r-xs" data-toggle="modal" data-target="#mdlDMS" data-cache="false" title="DMS"><i class="glyphicon glyphicon-folder-open m-r-xs"></i>DMS</a>
        }
        @if (hasDeleteAccess)
        {
                <div class="pull-left">
                    <form method = "post" action="@Url.Action("Delete/" + d.VContractId, "VendorContract")" class="frmRWDelete" title="Delete">
                        @Html.AntiForgeryToken()
                        <input type = "hidden" name="TransId" value="@d.VContractId" />
                        <button type = "submit" class="btnDelete btn btn-xs btn-danger glyphicon glyphicon-trash marl-5"></button>
                    </form>
                </div>
        }
    </span>
    );

}).Sortable()

<div class="clearfix pnl-pagination">
    <div class="pull-right">
        @Html.PagedListPager((IPagedList)Model, page => Url.Action("Index", new { page }), PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(new PagedListRenderOptions() { MaximumPageNumbersToDisplay = 4, DisplayPageCountAndCurrentLocation = true }, new AjaxOptions() { HttpMethod = "POST", UpdateTargetId = "mgrid", OnComplete = "PagedOnComplete" }))
        @if (Model.Count() == 0)
        {
            <div class="pagination-container hidden"><ul class="pagination"><li class="active"><a>1</a></li></ul></div>
        }
    </div>
</div>

