@model StaticPagedList<RELOCBS.Entities.WOSJobOpening>

@using RELOCBS.Utility;
@using RELOCBS.Common;
@using PagedList;
@using PagedList.Mvc;
@using GridMvc.Html

@{
    string _PageID = "71";
    string param = "WOSMoveID=ParamValue0";
    bool hasAddAccess = UserSession.HasPermission(_PageID, EnumUtility.PageAction.ADD);
    bool hasEditAccess = UserSession.HasPermission(_PageID, EnumUtility.PageAction.EDIT);
    bool hasDeleteAccess = UserSession.HasPermission(_PageID, EnumUtility.PageAction.DELETE);
}

@Html.Grid(Model).Named("mainGrid").Columns(columns =>
{
columns.Add(m => m.WOSMoveID).Titled("WOS Move ID").Css("hide").SortInitialDirection(GridMvc.Sorting.GridSortDirection.Descending);

columns.Add(m => m.WOSJobID).Titled("Job Id").SetWidth("10%");

columns.Add(m => m.WOSJobOpenedDate).Titled("Job Opened Date").SetWidth("10%").Format("{0:dd-MMM-yyyy}");

columns.Add(m => m.AssigneeName).Titled("Assignee Name").SetWidth("15%");

columns.Add(m => m.ClientName).Titled("Client").SetWidth("20%");

columns.Add(m => m.AccountName).Titled("Account").SetWidth("20%");

columns.Add(m => m.JobStatus).Titled("Job Status").SetWidth("15%");

columns.Add().Titled("Actions").Css("col-md-2").SetWidth("10%").Encoded(false).Sanitized(false).Sortable(true).RenderValueAs(m =>
@<span>
    @if (hasAddAccess)
    {
        <a href="@Url.Action("Create", "WOSJobOpening", new { Key = CommonService.GenerateQueryString(param, new string[] { m.WOSMoveID.ToString() }) })" class="btnViewJob btn btn-xs btn-primary glyphicon glyphicon-pencil" data-target="#mdlAddEdit" data-cache="false" title="View Job"></a>
        <a href="@Url.Action("AssigneeDetails", "WOSJobOpening", new { Key = CommonService.GenerateQueryString(param, new string[] { m.WOSMoveID.ToString() }) })" class="btnViewAssigneeDetails btn btn-xs btn-danger glyphicon glyphicon-list" data-target="#mdlAddEdit" data-cache="false" title="View Assignee Details"></a>
    }
</span>);
}).Sortable()

<div class="clearfix pnl-pagination">
    <div class="pull-right">
        @Html.PagedListPager((IPagedList)Model, page => Url.Action("Index", new { page }), PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(new PagedListRenderOptions() { MaximumPageNumbersToDisplay = 4, DisplayPageCountAndCurrentLocation = true }, new AjaxOptions() { HttpMethod = "POST", UpdateTargetId = "mgrid", OnComplete = "PagedOnComplete" }))
        @if (Model.Count() == 0)
        {
            <div class="pagination-container hidden"><ul class="pagination"><li class="active"><a>1</a></li></ul></div>
        }
    </div>
</div>