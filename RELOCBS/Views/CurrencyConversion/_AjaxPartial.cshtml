@model IEnumerable<RELOCBS.Entities.CurrencyConversion>
@using RELOCBS.Utility;
@using RELOCBS.App_Code;
@using PagedList;
@using PagedList.Mvc;
@using GridMvc.Html
@{

    string _PageID = "56";
    bool hasAddAccess = UserSession.HasPermission(_PageID, EnumUtility.PageAction.ADD);
    bool hasEditAccess = UserSession.HasPermission(_PageID, EnumUtility.PageAction.EDIT);
    bool hasDeleteAccess = UserSession.HasPermission(_PageID, EnumUtility.PageAction.DELETE);
}
@Html.Grid(Model).Named("mainGrid").Columns(columns =>
{

columns.Add(o => o.FIN_PERIOD)
    .Titled("FIN_PERIOD")
    .Css("col-md-1")
    .SetWidth(2)
    .SortInitialDirection(GridMvc.Sorting.GridSortDirection.Ascending);

columns.Add(o => o.Currency_Code)
.Titled("Currency Code From")
.Css("col-md-2")
.SetWidth(2);
//.SortInitialDirection(GridMvc.Sorting.GridSortDirection.Ascending);
columns.Add(o => o.Currency_Code_To)
.Titled("Currency Code To")
.Css("col-md-2")
.SetWidth(2);

columns.Add(o => o.ConversionRate)
    .Css("col-md-1")
    .Titled("ConversionRate")
    .SetWidth(2);
columns.Add(o => o.Multiply_Divide)
    .Css("col-md-1")
    .Titled("Multiply/Divide")
    .SetWidth(2);

columns.Add(o => o.From_Date)
    .Titled("From Date")
    .Css("col-md-3").Format("{0:dd-MMM-yyyy HH:mm}")
    .SetWidth(4);

columns.Add(o => o.To_Date)
.Titled("To Date").Format("{0:dd-MMM-yyyy HH:mm}")
.Css("col-md-3")
.SetWidth(4);

columns.Add(o => o.IsActive)
.Titled("Active").Css("col-md-1")
.Encoded(false)
.Sanitized(false)
.RenderValueAs(d =>
@<span>
    @if (d.IsActive == true)
                {
        <i class="fa fa-check text-navy"></i>
                }
    
</span>
);

}).Sortable()

<div class="clearfix pnl-pagination">
    <div class="pull-right">
        @Html.PagedListPager((IPagedList)Model, page => Url.Action("Index", new { page }), PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(new PagedListRenderOptions() { MaximumPageNumbersToDisplay = 4, DisplayPageCountAndCurrentLocation = true }, new AjaxOptions() { HttpMethod = "POST", UpdateTargetId = "mgrid", OnComplete = "PagedOnComplete" }))
        @if (Model.Count() == 0)
        {
            <div class="pagination-container hidden"><ul class="pagination"><li class="active"><a>1</a></li></ul></div>
        }
    </div>
</div>
