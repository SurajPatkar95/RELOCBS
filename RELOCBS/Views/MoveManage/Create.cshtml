@*create Survey*@
@using System.Data;
@using RELOCBS.Common;
@using RELOCBS.Utility;
@using RELOCBS.Entities;

@model RELOCBS.Entities.MoveManageViewModel
@{
    ViewBag.Title = "Move";
    int IsActive = Model.MoveID > 0 ? 1 : 0;
    //string mode = Model.MoveJob.ModeName;
    string SurveyID = Model.SurveyID.ToString();
    //bool RMCBuss = Model.RMCBuss
    string DocumentCSS = Model.RMCBuss ? "col-md-5 border m-sm  p-sm" : "col-md-12 border m-sm  p-sm";
    string RMCFeesCSS = Model.RMCBuss ? "" : "hide";
    bool Brookfieldtype = (string.IsNullOrEmpty(Model.RMCType) ? Model.RMCType : Model.RMCType.ToUpper()) == "BROOKFIELD TYPE";
    object RevValCss = new { @class = "form-control input-sm clearfix", placeholder = "RevenueValue", title = "RevenueValue", @id = "Grd_txt_RevenueValue", @onblur = "CallCostList(this);" };
    if ((string.IsNullOrEmpty(Model.RMCType) ? Model.RMCType : Model.RMCType.ToUpper()) == "BROOKFIELD TYPE")
    {
        RevValCss = new { @class = "form-control input-sm clearfix", placeholder = "RevenueValue", title = "RevenueValue", @id = "Grd_txt_RevenueValue", @readonly = true };
    }
    string param = "MoveID=ParamValue0&ComponentID=ParamValue1&PJRDJRID=ParamValue2";
    List<FollowUpDetails>
    FollowUpList = ViewBag.FollowUpList;
    bool IsTabIndecChanges = false;

    string DeliveryDateValue = (Model.DeliveryReport.DeliveryDate != null) ? ((DateTime)Model.DeliveryReport.DeliveryDate).ToString("dd-MMM-yyyy") : "";
    string PackDateValue = (Model.PackingReport.Packdate != null) ? ((DateTime)Model.PackingReport.Packdate).ToString("dd-MMM-yyyy") : "";
    string SurveyDateValue = (Model.SurveyReport.Surveydate != null) ? ((DateTime)Model.SurveyReport.Surveydate).ToString("dd-MMM-yyyy") : "";

    int ApprovalCount = ViewBag.ApprovalCount;

    Model.CompanyID = UserSession.GetUserSession().CompanyID;
    char ISDeliveryDateValid = Model.ISDeliveryDateValid ? 'Y' : 'N';

    string StgOrgStartDateValue = (Model.PackingReport.OrgStgStartDate != null) ? ((DateTime)Model.PackingReport.OrgStgStartDate).ToString("dd-MMM-yyyy") : "";
    string StgOrgEndDateValue = (Model.PackingReport.OrgStgEndDate != null) ? ((DateTime)Model.PackingReport.OrgStgEndDate).ToString("dd-MMM-yyyy") : "";
    string StgDestStartDateValue = (Model.DeliveryReport.DestStgStartDate != null) ? ((DateTime)Model.DeliveryReport.DestStgStartDate).ToString("dd-MMM-yyyy") : "";
    string StgDestEndDateValue = (Model.DeliveryReport.DeliveryDate != null) ? ((DateTime)Model.DeliveryReport.DeliveryDate).ToString("dd-MMM-yyyy") : "";

    string InsDivCSS = Model.InsurBy == 1 && !(Model.RMCBuss) && Model.CompanyID == 1 ? "col-md-12 border m-n InsuranceDiv" : "col-md-12 border m-n InsuranceDiv hide";
    string GPApprStatus = Model.GPApprovalDisplayList != null ? Model.GPApprovalDisplayList.FirstOrDefault().Status == "Proceed For Approval" ? "Send For Approval (Pricing)" : Model.GPApprovalDisplayList.FirstOrDefault().Status : "N/A";
    string SaveType = Convert.ToString(TempData["SaveType"]);
    TempData["SaveType"] = null;
    decimal? GPTotalRevenue = 0, GPTotalCost = 0;
    DataTable drRev = Model.dsCostSheet != null ? Model.dsCostSheet.Tables[0].Select("MoveCompName = 'TOTAL'").CopyToDataTable() : null;
    DataTable drPercent = Model.dsCostSheet != null ? Model.dsCostSheet.Tables[0].Select("MoveCompName = 'GP %'").CopyToDataTable() : null;
    string PrevStage = null;
    if (Model.GPApprovalDisplayList != null)
    {
        PrevStage = Model.GPApprovalDisplayList.FirstOrDefault().Stage;
    }

    if (Model.TabIndex == 4)
    {
        GPTotalRevenue = drRev.Rows[0]["DeliveryRevenVal"] == DBNull.Value ? 0 : Convert.ToDecimal(drRev.Rows[0]["DeliveryRevenVal"]);
        Model.GPPercent = drPercent.Rows[0]["DeliveryRevenVal"] == DBNull.Value ? 0 : Convert.ToDecimal(drPercent.Rows[0]["DeliveryRevenVal"]);
        //Model.GPAmount = GPTotalRevenue;
        //GPTotalCost = Model.SurveyCostList.CostList.Sum(x => x.CostValue);
    }
    else if (Model.TabIndex == 2)
    {
        GPTotalRevenue = drRev.Rows[0]["PackRevenVal"] == DBNull.Value ? 0 : Convert.ToDecimal(drRev.Rows[0]["PackRevenVal"]);
        Model.GPPercent = drPercent.Rows[0]["PackRevenVal"] == DBNull.Value ? 0 : Convert.ToDecimal(drPercent.Rows[0]["PackRevenVal"]);
        //Model.GPAmount = GPTotalRevenue;
        //GPTotalCost = Model.PackingCostList.CostList.Sum(x => x.CostValue);
    }
    else if (Model.TabIndex == 1)
    {
        GPTotalRevenue = drRev.Rows[0]["SurveyRevenVal"] == DBNull.Value ? 0 : Convert.ToDecimal(drRev.Rows[0]["SurveyRevenVal"]);
        Model.GPPercent = drPercent.Rows[0]["SurveyRevenVal"] == DBNull.Value ? 0 : Convert.ToDecimal(drPercent.Rows[0]["SurveyRevenVal"]);
        //GPTotalRevenue = Model.DeliveryCostList.CostList.Sum(x => x.RevenueValue);
        //Model.GPAmount = GPTotalRevenue;
        //GPTotalCost = Model.DeliveryCostList.CostList.Sum(x => x.CostValue);
    }

    bool IsShowFeedbackPopup = false;
    IsShowFeedbackPopup = (DeliveryDateValue != "" && Model.ShipperFeedback.ShipperFeedbackID == null && Model.RMCBuss == false &&
        (Model.CompanyID == 1 && (Model.MoveJob.BusinessLineName == "AGENT" || Model.MoveJob.BusinessLineName == "LOCAL")));


    bool IsAVEval = false;
    IsAVEval = (DeliveryDateValue != "" && Model.vendorEvaluation.IsFeedbackEntered == false && Model.RMCBuss &&
                (Model.CompanyID == 1 && Model.MoveJob.BusinessLineName == "GMMS"));

    string Str_feedback = "Feedback not entered.";
    if (IsAVEval)
    {
        Str_feedback = "Partner evaluation not entered";
    }






    int OrgStgDays = Model.PackingReport.OrgStgStartDate != null && Model.PackingReport.OrgStgEndDate != null ? ((int)Convert.ToDateTime(Model.PackingReport.OrgStgEndDate).Subtract(Convert.ToDateTime(Model.PackingReport.OrgStgStartDate)).Days) + 1 : Model.PackingReport.OrgStgStartDate != null ? ((int)DateTime.Now.Subtract(Convert.ToDateTime(Model.PackingReport.OrgStgStartDate)).Days) + 1 : 0;

    int DestStgDays = Model.DeliveryReport.DestStgStartDate != null && Model.DeliveryReport.DestStgEndDate != null ? ((int)Convert.ToDateTime(Model.DeliveryReport.DestStgEndDate).Subtract(Convert.ToDateTime(Model.DeliveryReport.DestStgStartDate)).Days) + 1 : Model.DeliveryReport.DestStgEndDate != null ? ((int)DateTime.Now.Subtract(Convert.ToDateTime(Model.DeliveryReport.DestStgStartDate)).Days) + 1 : 0;
}

@Styles.Render("~/Content/bootstrap-selectcss")
<style>
    .width-90 {
        width: 90%;
    }

    .MoveCosttable ::-webkit-scrollbar {
        width: 5px;
    }

    .MoveCosttable ::-webkit-scrollbar-thumb {
        background: grey;
        border-radius: 5px;
    }

    .MoveCosttable ::-webkit-scrollbar-track {
        -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);
        border-radius: 10px;
        background-color: #F5F5F5;
    }

    .popover {
        width: 500px;
        height: auto;
    }

    .popover-title .close {
        position: relative;
        bottom: 3px;
    }

    .tdNone {
        display: none;
    }

    .EditNone {
        display: none;
    }

    .important {
        color: black;
        font-weight: bold;
        background-color: #68BB59;
    }

    .nonimportant {
        color: black;
        font-weight: bold;
        background-color: red;
    }

    .grid-header {
        background-color: white;
        color: black;
        font-weight: bold;
        border-top: 1px thin grey;
        border-bottom: 1px medium grey;
    }


    table.tdRowColor {
        background-color: #d3d3d3;
        color: black;
    }

    .modal.modal-wide .modal-dialog {
        width: 90%;
    }

    .modal-wide .modal-body {
        overflow-y: auto;
    }


    .modal-dialog {
        width: 50%;
    }

    #FollowUpModal, #SubCostHeadModal, InsuranceModal .modal-dialog {
        width: 50%;
    }

    .note-btn {
        margin: 5px 10px 5px 10px;
    }

    .list-group-item.active {
        background-color: green;
        border-color: grey;
    }
</style>

<div class="modal modal-wide" id="FollowUpModal" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-header">
                Follow Up Details
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="FollowUp" style="height:300px;">
                <div class="m-t-sm pad-none">
                    <div class="row">
                        <div class="col-sm-4 col-md-4">
                            <div class="form-group">
                                <label>Followup Date</label>
                                <div class="input-group input-group-sm date" id="dtp_ToDate">
                                    @Html.Editor("dtFollowUpDate" +
                                    "", new { htmlAttributes = new { @placeholder = "FollowUp Date", @tooltip = "FollowUp Date", @class = "form-control input-sm datepicker", title = "FollowUp Date", id = "dtFollowUpDate", onfocus = "ShowDatePicker(this)" } })
                                    <span class="input-group-addon" style="display: none">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                            </div>

                        </div>
                        <div class="col-sm-4 col-md-4">
                            <div class="form-group">
                                <label>FollowUp Remark</label>
                                @Html.TextBox("txtFollowUpRemark", null, new { @class = "form-control input-sm ", placeholder = "FollowUp Remark", title = "FollowUp Remark", @id = "txtFollowUpRemark" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12 col-md-12">
                            <input type="submit" id="btnSaveFollowup" name="SaveFollowup" class="btn btn-primary m-t-sm m-r-sm btn-sm filter-custom-margin m-n"
                                   value="Save" form="ModalFollowUp" onclick="Set_ModalFollowUp()" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12 col-md-12">
                            <table class="table table-bordered tblbuffer">
                                <tbody>
                                    <tr>
                                        <th class="label-success col-sm-3">FollowUp Remarks</th>
                                        <th class="label-success col-sm-2 p-xs">FollowUp Date</th>
                                        <th class="label-success col-sm-2 p-xs">Added By</th>
                                        <th class="label-success col-sm-2 p-xs">Added On</th>
                                    </tr>
                                    @if (Model.FollowUpList != null)
                                    {
                                        foreach (var item in Model.FollowUpList)
                                        {
                                            <tr class="m-n pad-none">
                                                <td class="m-n pad-none">
                                                    @item.FollowUpRemark
                                                </td>
                                                <td class="m-n pad-none">@item.FollowUpDate</td>
                                                <td class="m-n pad-none">@item.CreatedBy</td>
                                                <td class="m-n pad-none">@item.CreatedDate</td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal modal-wide" id="GPApprovalListModal" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-header">
                Low GP Approval Details
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="FollowUp" style="height:300px;">
                <div class="m-t-sm pad-none">
                    <div class="row">
                        <div class="col-sm-12 col-md-12">
                            <table class="table table-bordered tblbuffer">
                                <tbody>
                                    <tr>
                                        <th class="label-success col-sm-3">Remarks</th>
                                        <th class="label-success col-sm-2 p-xs">Status</th>
                                        <th class="label-success col-sm-2 p-xs">Sent By</th>
                                        <th class="label-success col-sm-2 p-xs">Sent On</th>
                                        <th class="label-success col-sm-1 p-xs">GP Percent</th>
                                        <th class="label-success col-sm-2 p-xs">Revenue Amount</th>
                                        <th class="label-success col-sm-2 p-xs">Base Curr</th>
                                        <th class="label-success col-sm-2 p-xs">Stage</th>
                                    </tr>
                                    @if (Model.GPApprovalDisplayList != null)
                                    {
                                        foreach (var item in Model.GPApprovalDisplayList)
                                        {
                                            string Desc = "<p>" + item.Remark.Replace("\n\n", "</p><p><br></p><p>").Replace("\n", "</p><p>") + "</p>";
                                            //string Desc = "<p>" + (desc).Replace("\n\n", "</p><p><br></p><p>").Replace("\n", "</p><p>") + "</p>";
                                            if (Desc.Contains("</p><p><br></p><p>"))
                                            {
                                                Desc = Desc.Substring(0, Desc.LastIndexOf("</p><p><br></p><p>"));
                                            }
                                            <tr class="m-n pad-none">
                                                <td class="m-n pad-none">
                                                    @Html.Raw(Desc)
                                                </td>
                                                <td class="m-n pad-none">@item.Status</td>
                                                <td class="m-n pad-none">@item.CreatedBy</td>
                                                <td class="m-n pad-none">@item.CreatedDate</td>
                                                <td class="m-n pad-none">@item.GPPercent</td>
                                                <td class="m-n pad-none">@item.RevAmount</td>
                                                <td class="m-n pad-none">@item.BaseCurr</td>
                                                <td class="m-n pad-none">@item.Stage</td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal modal-wide" id="CloseJobModal" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-header">
                Close Job Details
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="CloseJob" style="height:300px;">
                <div class="m-t-sm pad-none">
                    <div class="row">
                        <div class="col-sm-4 col-md-4">
                            <div class="form-group">
                                <label>Job Close Remark</label>
                                @Html.TextBox("txtJobCloseRemark", null, new { @class = "form-control input-sm ", placeholder = "Job Close Remark", title = "Job Close Remark", @id = "txtJobCloseRemark" })
                            </div>
                        </div>
                    </div>
                    @if (string.IsNullOrEmpty(Model.CloseJobBy))
                    {
                        <div class="row">
                            <div class="col-sm-12 col-md-12">
                                <input type="submit" id="btnSaveJobClose" name="SaveJobClose" class="btn btn-primary m-t-sm m-r-sm btn-sm filter-custom-margin m-n"
                                       value="Save" form="ModalJobClose" onclick="Set_ModalJobClose()" />
                            </div>
                        </div>
                    }
                    <div class="row">
                        <div class="col-sm-12 col-md-12">
                            <table class="table table-bordered tblbuffer">
                                <tbody>
                                    <tr>
                                        <th class="label-success col-sm-3">Job Close Remarks</th>
                                        <th class="label-success col-sm-2 p-xs">Job Close By</th>
                                        <th class="label-success col-sm-2 p-xs">Job Close Date</th>
                                    </tr>
                                    <tr class="m-n pad-none">
                                        <td class="m-n pad-none">@Model.CloseJobRemark</td>
                                        <td class="m-n pad-none">@Model.CloseJobBy</td>
                                        <td class="m-n pad-none">@Model.CloseJobDate</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal modal-wide" id="MailDetModal" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-header">
                Email Details
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="MailDet" style="height:300px;">
                <div class="m-t-sm pad-none">

                    <div class="row">
                        <div class="col-sm-3 col-md-3">
                            <input type="button" id="btnShowMail" name="ShowMail" class="btn btn-primary m-t-sm m-r-sm btn-sm filter-custom-margin m-n"
                                   value="Show Mail" form="ShowMail" onclick="ShowMail()" />
                        </div>
                        <div class="col-sm-7 col-md-7">
                            <h3><span class="HeadingActivity"></span></h3>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12 col-md-12">
                            <table class="table table-bordered tblMailActivityHist">
                                <tbody>
                                    <tr>
                                        @*<th class="label-success col-sm-3">Activity Name</th>*@
                                        <th class="label-success col-sm-2 p-xs ">Sent By</th>
                                        <th class="label-success col-sm-2 p-xs">Send On</th>
                                        <th class="label-success col-sm-2 p-xs">Select</th>
                                    </tr>

                                    @*<tr class="m-n pad-none">
                                            <td class="m-n pad-none">
                                                @item.FollowUpRemark
                                            </td>
                                            <td class="m-n pad-none">@item.FollowUpDate</td>
                                            <td class="m-n pad-none">@item.CreatedBy</td>
                                            <td class="m-n pad-none">@item.CreatedDate</td>
                                        </tr>*@

                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="CancelJobModal" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-header">
                Cancel Job
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="CancelJob" style="height:300px;">
                <div class="m-t-sm pad-none">
                    <div class="row">
                        <div class="col-sm-4 col-md-4">
                            <div class="form-group">
                                <label>Cancel Remark</label>
                                @Html.TextBox("txtCancelRemark", null, new { @class = "form-control input-sm ", placeholder = "Cancel Remark", title = "Cancel Remark", @id = "txtCancelRemark" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12 col-md-12">
                            <input type="submit" id="btnCancelJob" name="CancelJob" class="btn btn-primary m-t-sm m-r-sm btn-sm filter-custom-margin m-n"
                                   value="Save" form="ModalCancelJob" onclick="Set_ModalCancelJob()" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal modal-wide" id="InsuranceModal" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-header">
                Insurance
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="Insurance" style="height:300px;">
                <div class="m-t-sm pad-none">
                    <div class="row">
                        <div class="col-sm-4 col-md-4">
                            <div class="form-group">
                                <label>Pack Completion Date SD</label>
                                <div class="input-group input-group-sm date" id="dtp_ToDate">
                                    @Html.Editor("dtInsPackDate", new { htmlAttributes = new { @placeholder = "Pack Date", @tooltip = "Pack Date", @class = "form-control input-sm datepicker", title = "Pack Date", id = "dtInsPackDate", onfocus = "ShowDatePicker(this)" } })
                                    <span class="input-group-addon" style="display: none">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-4 col-md-4">
                            <div class="form-group">
                                <label>Insurance Value</label>
                                @Html.TextBox("txtInnsuranceValue", Model.Insurance.InsuranceValue, new { @class = "form-control input-sm ", placeholder = "Innsurance Value", title = "Innsurance Value", @id = "txtInnsuranceValue", onkeypress = "return OnlyDouble(this, event);" })
                            </div>
                        </div>
                        <div class="col-sm-3 col-md-3">
                            <div class="form-group">
                                <label>Insurance Value</label>
                                @Html.DropDownList("ddl_InsuranceCurr", new SelectList((System.Collections.IEnumerable)ViewData["BaseCurrencyRate"], "Value", "Text", Model.Insurance.InsuranceCurrID), "--Select Curr--", new { @class = "form-control input-sm clearfix" })
                            </div>
                        </div>

                        <div class="col-sm-4 col-md-4">
                            <div class="form-group">
                                <label>Premium Rate</label>
                                @Html.TextBox("txtPremiumRate", Model.Insurance.PremiumRate, new { @class = "form-control input-sm ", placeholder = "Premium Rate", title = "Premium Rate", @id = "txtPremiumRate", onkeypress = "return OnlyDouble(this, event);" })
                            </div>
                        </div>
                        <div class="col-sm-4 col-md-4">
                            <div class="form-group">
                                <label>IDV Car Value</label>
                                @Html.TextBox("txtIDVCarValue", Model.Insurance.IDVCarValue, new { @class = "form-control input-sm ", placeholder = "IDV Car Value", title = "IDV Car Value", @id = "txtIDVCarValue", onkeypress = "return OnlyDouble(this, event);" })
                            </div>
                        </div>
                        <div class="col-sm-4 col-md-4">
                            <div class="form-group">
                                <label>Veh Make Model</label>
                                @Html.TextBox("txtVehMakeModel", Model.Insurance.VehMakeModel, new { @class = "form-control input-sm ", placeholder = "Veh Make Model", title = "Veh Make Model", @id = "txtVehMakeModel" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-3 col-md-3">
                            <input type="submit" id="btnSaveFollowup" name="SendForInsurance" class="btn btn-primary m-t-sm m-r-sm btn-sm filter-custom-margin m-n"
                                   value="Save" form="ModalInsuranceDetail" onclick="Set_ModalInsuranceDetail(false)" />
                        </div>
                        <div class="col-sm-3 col-md-3">
                            <input type="submit" id="btnSendForInsurance" name="SendForInsurance" class="btn btn-primary m-t-sm m-r-sm btn-sm filter-custom-margin m-n"
                                   value="Send For Insurance" form="ModalInsuranceDetail" onclick="Set_ModalInsuranceDetail(true)" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal modal-wide" id="GCCInsuranceModal" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-header">
                Insurance
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="Insurance" style="height:300px;">
                <div class="m-t-sm pad-none">
                    <div class="row">
                        <div class="col-sm-4 col-md-4">
                            <div class="form-group">
                                <label>Policy Number</label>
                                <div class="input-group input-group-sm date" id="dtp_ToDate">
                                    @Html.Editor("dtInsPackDate", new { htmlAttributes = new { @placeholder = "Pack Date", @tooltip = "Pack Date", @class = "form-control input-sm datepicker", title = "Pack Date", id = "dtInsPackDate", onfocus = "ShowDatePicker(this)" } })
                                    <span class="input-group-addon" style="display: none">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-4 col-md-4">
                            <div class="form-group">
                                <label>Remarks</label>
                                @Html.TextBox("txtInnsuranceValue", Model.Insurance.InsuranceValue, new { @class = "form-control input-sm ", placeholder = "Innsurance Value", title = "Innsurance Value", @id = "txtInnsuranceValue", onkeypress = "return OnlyDouble(this, event);" })
                            </div>
                        </div>

                        <div class="col-sm-3 form-group">
                            @*<input type="file" id="FileUpload" name="file" class="inputfile inputfile-4 center-block m-t-md form-control" accept=".xls,.xlsx"> required data-val="true" data-val-required="please select a file"*@
                            @Html.TextBox("txtInsuranceFile", new { type = "file", @class = "inputfile inputfile-4 center-block m-t-md form-control", accept = ".pdf" })
                            @*@Html.ValidationMessageFor(model => model.file, "", new { @class = "text-danger" })*@
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-3 col-md-3">
                            <input type="submit" id="btnSaveGCCInsurance" name="SendForGCCInsurance" class="btn btn-primary m-t-sm m-r-sm btn-sm filter-custom-margin m-n"
                                   value="Save" form="ModalGCCInsuranceDetail" onclick="Set_ModalGCCInsuranceDetail(false)" />
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="ACODetailsModal" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-header">
                ACO
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="ACODetails" style="height:300px;">
                <div class="m-t-sm pad-none">
                    <div class="row">
                        <div class="col-sm-4 col-md-4">
                            <div class="form-group">
                                <label>Operational Status by SD</label>
                                @Html.DropDownList("ddl_JobStatusSDId", new SelectList((System.Collections.IEnumerable)ViewData["JobStatusSDList"], "Value", "Text", Model.ACODetails.JobStatusSDId), "--Select Job Status--", new { @class = "form-control input-sm clearfix" })
                            </div>
                        </div>
                        <div class="col-sm-4 col-md-4">
                            <div class="form-group">
                                <label>Remarks</label>
                                @Html.TextBox("txtRemarks", Model.ACODetails.Remarks, new { @class = "form-control input-sm ", placeholder = "Remarks", title = "Remarks", @id = "txtRemarks" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-4 col-md-4">
                            <div class="form-group">
                                <label>Billing Status</label>
                                @Html.DropDownList("ddl_BillingStatusId", new SelectList((System.Collections.IEnumerable)ViewData["BillingStatusList"], "Value", "Text", Model.ACODetails.JobStatusSDId), "--Select Billing Status--", new { @class = "form-control input-sm clearfix" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12 col-md-12">
                            <input type="submit" id="btnSaveACODetails" class="btn btn-primary m-t-sm m-r-sm btn-sm filter-custom-margin m-n"
                                   value="Save" form="ModalACODetails" onclick="Set_ModalACODetails()" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal modal-wide fade" id="exampleModalLong" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="partial">
            </div>
        </div>
    </div>
</div>
<div class="modal" id="SubCostHeadModal" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-header">
                Sub Cost Details
                <button type="button" class="SubCostClose close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="SubCostHead">
                @(new HtmlString(ViewBag.SubCostList))
            </div>
        </div>
    </div>
</div>
<div class="ibox-content">
    <div class="row">
        <div class="col-sm-2 col-md-2">
            <div class="form-group">
                <strong>Job No.:</strong> &nbsp;<strong>@Model.JobNo</strong>
            </div>
        </div>
        <div class="col-sm-3 col-md-3">
            <div class="form-group">
                <strong>Shipper Name:</strong> &nbsp;<strong>@Model.MoveJob.Shipper.ShipperFName @Model.MoveJob.Shipper.ShipperLName</strong>
            </div>
        </div>
        <div class="col-sm-2 col-md-2">
            <div class="form-group">
                <strong>Mode:</strong> &nbsp;<strong>@Model.MoveJob.ModeName</strong>
            </div>
        </div>
        <div class="col-sm-2 col-md-2">
            <div class="form-group">
                <strong>Enquiry No.:</strong>&nbsp;<strong>@Model.EnqNo</strong>
            </div>
        </div>
        <div class="col-sm-2 col-md-2">
            <div class="form-group">
                <strong>Shp No.:</strong> &nbsp;<strong>@Model.EnqShpNo</strong>
            </div>
        </div>
        <div class="col-sm-2 col-md-2">
            <div class="form-group">
                <strong>Revenue Br.:</strong> &nbsp;<strong>@Model.MoveJob.RevenueBr</strong>
            </div>
        </div>
        <div class="col-sm-2 col-md-2">
            <div class="form-group">
                <strong>Job Status:</strong> &nbsp;<strong>@Model.JobStatus</strong>
            </div>
        </div>

        @if ((OrgStgDays > 180 || DestStgDays > 180) && Model.CompanyID == 1 && !(Model.IsOrgWHSave && Model.IsDestWHSave) && !Model.RMCBuss)
        {
            string UnlockStatus = Model.IsSTGUnlock ? "YES" : "NO";
            <div class="col-sm-2 col-md-2">
                <div class="form-group">
                    <strong>Storage Unlock:</strong> &nbsp;<strong>@UnlockStatus</strong>
                </div>
            </div>
        }
        @if (Model.RMCBuss && Model.CompanyID == 1)
        {
            <div class="col-sm-4 col-md-4">
                <div class="form-group">
                    <strong>Low GPApproval Status:</strong> &nbsp;<strong>@GPApprStatus</strong>
                </div>
            </div>
        }

    </div>
    @if (Model.JobStatus == "Cancelled")
    {
        <div class="row">
            <div class="col-sm-10 col-md-10">
                <div class="form-group">
                    <strong>Cancel Remarks:</strong> &nbsp;<strong>@Model.JobCancel.CancelRemark</strong>
                </div>
            </div>
        </div>
    }

    <div class="row">
        <div class="col-sm-9 col-md-9">
            <div class="form-group">
                @* need to hide this buttons based on old requirement *@
                @*<a href="@Url.Action(" Create","Survey",new { EnqDetailID=Model.EnqDetailID, IsView=1 })" class="btn btn-xs btn-default m-r-sm pull-right" target="_blank" title="View Survey">View Survey</a>*@
                @if (!string.IsNullOrWhiteSpace(Model.JobNo))
                {
                    if (Model.ForwardingFlag == "All" && Model.RMCBuss && Model.CompanyID == 1)
                    {
                        <input type="button" id="btnGPDetail" name="GPDetail" data-placement="bottom" class="btn btn-success pull-right m-r-sm btn-xs btnGPDetail" value="Low GP Approval Detail" formnovalidate="formnovalidate"
                               data-toggle="modal" data-target="#GPApprovalListModal" />
                    }


                    <div id="popover-content-GPDetail" class="_content hide GPDetail">
                        <div class="row">
                            <div class="col-sm-5 col-md-5">
                                <div class="form-group">
                                    <strong>GP Approval Proceed : </strong>@Model.IsGPProcess
                                </div>
                            </div>
                            <div class="col-sm-5 col-md-5">
                                <div class="form-group">
                                    <strong>GP Send for Approval : </strong>@Model.IsGPSendAppr
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-5 col-md-5">
                                <div class="form-group">
                                    <strong>GP Send to SD : </strong>@Model.IsGPSendSD
                                </div>
                            </div>
                            <div class="col-sm-5 col-md-5">
                                <div class="form-group">
                                    <strong>GP Approved : </strong>@Model.IsGPApproved
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-5 col-md-5">
                                <div class="form-group">
                                    <strong>GP Remark : </strong>@Model.GPRemark
                                </div>
                            </div>

                        </div>
                    </div>

                    if (Model.IsShowSTGUnlock && !Model.IsSTGUnlock && Model.CompanyID == 1 && !(Model.IsOrgWHSave && Model.IsDestWHSave) && !Model.RMCBuss)
                    {
                        if (OrgStgDays > 180 || DestStgDays > 180)
                        {
                            using (Html.BeginForm("UnlockSTGDate", "MoveManage", new { Indx = 0, SurveyID = @Model.SurveyID, MoveID = @Model.MoveID }, FormMethod.Post, new { enctype = "multipart/form-data", id = "UnlockSTGDate" }))
                            {
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary(true)
                                @Html.HiddenFor(model => model.HoSdEmpID)@Html.HiddenFor(model => model.BrSdEmpID)@Html.HiddenFor(model => model.DestBrSdEmpID)@Html.HiddenFor(model => model.InsurBy)
                                <input type="submit" id="btnUnlockSTGDate" name="UnlockSTGDate" class="btn btn-primary m-t-sm pull-right m-r-sm btn-xs filter-custom-margin m-n" value="Unlock STG Date Validation" />
                            }
                        }
                    }

                    if (Model.ForwardingFlag == "All")
                    {
                        if (Model.JobStatus != "Cancelled")
                        {
                            if (Model.IsShowCloseJob && Model.CompanyID == 2 && Model.MoveID > 0)
                            {
                                <a id="CloseJobDetails" class="btn btn-xs btn-default m-r-sm" data-cache="false" title="Close Job Details"
                                   data-toggle="modal" data-target="#CloseJobModal">Close Job</a>
                            }

                            if (Model.InsurBy == 1)
                            {
                                if (Model.CompanyID == 1 || Model.CompanyID == 2 || Model.CompanyID == 1005)
                                {
                                    <a id="InsuranceDetails" class="btn btn-xs btn-default m-r-sm pull-right" data-cache="false" title="Insurance Details"
                                       data-toggle="modal" data-target="#InsuranceModal">Insurance Details</a>
                                }
                                else
                                {
                                    <a href="@Url.Action("GCCInsCreate", "DMS", new { id = @Model.MoveID, Type = "GCCInsurance" })" class="btn btn-primary m-r-sm btn-sm pull-right" data-toggle="modal" data-target="#mdlDMS" data-cache="false" title="Insurance Detail"><i class="glyphicon glyphicon-folder-open m-r-xs"></i>Insurance Detail</a>
                                    @*<a href="javascript:void(0);" data-id="@Model.MoveID" data-type="Transhiment" class="btn btn-primary btn-sm m-r-sm pull-right" title="DMS" onclick="OnBtnUpload(this)"><i class="glyphicon glyphicon-folder-open m-r-xs"></i>DMS</a>*@
                                }

                            }

                            <a id="CancelJob" class="btn btn-xs btn-danger m-r-sm pull-right" data-cache="false" title="Cancel Job"
                               data-toggle="modal" data-target="#CancelJobModal">Cancel Job</a>

                            <a id="FollowUpDetails" class="btn btn-xs btn-default m-r-sm pull-right" data-cache="false" title="FollowUp Details"
                               data-toggle="modal" data-target="#FollowUpModal">FollowUp Details</a>

                            if (Model.ShowAdvanceCaution)
                            {
                                using (Html.BeginForm("ApproveAdvanceCaution", "MoveManage", new { Indx = 0, SurveyID = @Model.SurveyID, MoveID = @Model.MoveID }, FormMethod.Post, new { enctype = "multipart/form-data", id = "ModalApproveAdvanceCaution" }))
                                {
                                    @Html.AntiForgeryToken()
                                    @Html.ValidationSummary(true)
                                    @Html.HiddenFor(model => model.HoSdEmpID)@Html.HiddenFor(model => model.BrSdEmpID)@Html.HiddenFor(model => model.DestBrSdEmpID)@Html.HiddenFor(model => model.InsurBy)
                                    <input type="submit" id="btnApproveAdvanceCaution" name="ApproveAdvanceCaution" class="btn btn-primary m-t-sm pull-right m-r-sm btn-xs filter-custom-margin m-n" value="Approve Advance Caution" />
                                }
                            }

                            using (Html.BeginForm("SaveFollowUpDetails", "MoveManage", new { Indx = 0, SurveyID = @Model.SurveyID, MoveID = @Model.MoveID }, FormMethod.Post, new { enctype = "multipart/form-data", id = "ModalFollowUp" }))
                            {
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary(true)
                                @Html.HiddenFor(model => model.HoSdEmpID)@Html.HiddenFor(model => model.BrSdEmpID)@Html.HiddenFor(model => model.DestBrSdEmpID)@Html.HiddenFor(model => model.InsurBy)
                                @Html.HiddenFor(model => model.FollowUp.FollowUpDate)
                                @Html.HiddenFor(model => model.FollowUp.FollowUpRemark)
                            }

                            using (Html.BeginForm("SaveACODetails", "MoveManage", new { Indx = 0, SurveyID = @Model.SurveyID, MoveID = @Model.MoveID }, FormMethod.Post, new { enctype = "multipart/form-data", id = "ModalACODetails" }))
                            {
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary(true)
                                @Html.HiddenFor(model => model.MoveID)
                                @Html.HiddenFor(model => model.InsurBy) @Html.HiddenFor(model => model.HoSdEmpID) @Html.HiddenFor(model => model.BrSdEmpID) @Html.HiddenFor(model => model.DestBrSdEmpID)
                                @Html.HiddenFor(model => model.ACODetails.ACODetailsId)
                                @Html.HiddenFor(model => model.ACODetails.JobStatusSDId)
                                @Html.HiddenFor(model => model.ACODetails.BillingStatusId)
                                @Html.HiddenFor(model => model.ACODetails.Remarks)
                            }

                            using (Html.BeginForm("CancelJob", "MoveManage", new { Indx = 0, SurveyID = @Model.SurveyID, MoveID = @Model.MoveID }, FormMethod.Post, new { enctype = "multipart/form-data", id = "ModalCancelJob" }))
                            {
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary(true)
                                @Html.HiddenFor(model => model.HoSdEmpID)@Html.HiddenFor(model => model.BrSdEmpID)@Html.HiddenFor(model => model.DestBrSdEmpID)@Html.HiddenFor(model => model.InsurBy)
                                @Html.HiddenFor(model => model.JobCancel.CancelRemark)
                            }

                            using (Html.BeginForm("SaveInsuranceDetails", "MoveManage", new { Indx = 0, SurveyID = @Model.SurveyID, MoveID = @Model.MoveID }, FormMethod.Post, new { enctype = "multipart/form-data", id = "ModalInsuranceDetail" }))
                            {
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary(true)
                                @Html.HiddenFor(model => model.MoveID)
                                @Html.HiddenFor(model => model.HoSdEmpID)@Html.HiddenFor(model => model.BrSdEmpID)@Html.HiddenFor(model => model.DestBrSdEmpID)@Html.HiddenFor(model => model.InsurBy)
                                @Html.HiddenFor(model => model.Insurance.InsPackDate) @Html.HiddenFor(model => model.Insurance.InsuranceValue)
                                @Html.HiddenFor(model => model.Insurance.IDVCarValue) @Html.HiddenFor(model => model.Insurance.PremiumRate)
                                @Html.HiddenFor(model => model.Insurance.VehMakeModel) @Html.HiddenFor(model => model.Insurance.InsuranceCurrID)
                                @Html.HiddenFor(model => model.Insurance.IsSendForInsurance)
                            }
                            //ModalGCCInsuranceDetail
                            using (Html.BeginForm("SaveGCCInsuranceDetails", "MoveManage", new { Indx = 0, SurveyID = @Model.SurveyID, MoveID = @Model.MoveID }, FormMethod.Post, new { enctype = "multipart/form-data", id = "ModalGCCInsuranceDetail" }))
                            {
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary(true)
                                @Html.HiddenFor(model => model.MoveID)
                                @Html.HiddenFor(model => model.HoSdEmpID)@Html.HiddenFor(model => model.BrSdEmpID)@Html.HiddenFor(model => model.DestBrSdEmpID)@Html.HiddenFor(model => model.InsurBy)
                                @Html.HiddenFor(model => model.GCCinsuranceDetail.Remarks) @Html.HiddenFor(model => model.GCCinsuranceDetail.file)
                                @Html.HiddenFor(model => model.GCCinsuranceDetail.InsuranceNumber)
                            }
                            using (Html.BeginForm("SaveCloseJobDetails", "MoveManage", new { Indx = 0, SurveyID = @Model.SurveyID, MoveID = @Model.MoveID }, FormMethod.Post, new { enctype = "multipart/form-data", id = "ModalJobClose" }))
                            {
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary(true)
                                @Html.HiddenFor(model => model.HoSdEmpID)@Html.HiddenFor(model => model.BrSdEmpID)@Html.HiddenFor(model => model.DestBrSdEmpID)@Html.HiddenFor(model => model.InsurBy)
                                @Html.HiddenFor(model => model.CloseJobRemark)
                            }
                        }

                        if (!Model.RMCBuss && UserSession.GetUserSession().CompanyName.ToUpper() == "RELO-INDIA")
                        {
                            <a id="btnGetACODetails" class="btn btn-xs btn-default m-r-sm pull-right" data-cache="false" title="Job Billing Status Details"
                               data-toggle="modal" data-target="#ACODetailsModal">ACO</a>
                        }

                        if (Model.TabList.Find(r => r.TabIndex == 7) != null)
                        {
                            <input type="button" id="btnRequestDocs" class="btn btn-xs btn-default m-r-sm pull-right" value="Request Docs" onclick="OpenRequestDocs();" />
                        }


                    }
                    if (Model.RMCBuss)
                    {
                        if (Model.ForwardingFlag == "All")
                        {
                            <input type="button" rel="popover" id="btnHistoryRate" name="HistoryRate" data-placement="bottom" data-popover-content="#popover-content-HistoryRate" class="btn btn-success pull-right m-r-sm btn-xs btnHisotryRate" value="History Rates" formnovalidate="formnovalidate" />
                        }


                        <div id="popover-content-HistoryRate" class="_content hide HistoryRate">
                            @if (Model.MoveJob.ModeID == 3)
                            {
                                <div>
                                    @Html.RadioButton("rbGrpRate", "4", isChecked: false) @Html.Label("Door to Door")
                                </div>
                                if (Brookfieldtype)
                                {
                                    <div>
                                        @Html.RadioButton("rbGrpRate", "10", isChecked: false) @Html.Label("Door to Door(Revenue)")
                                    </div>
                                }
                            }
                            else
                            {
                                <div>
                                    @Html.RadioButton("rbGr pRate", "1", isChecked: false) @Html.Label("Origin")
                                </div>
                                <div>
                                    @Html.RadioButton("rbGrpRate", "2", isChecked: false)  @Html.Label("Freight")
                                </div>
                                <div>
                                    @Html.RadioButton("rbGrpRate", "3", isChecked: false) @Html.Label("Destination")
                                </div>
                                if (Brookfieldtype)
                                {
                                    <div>
                                        @Html.RadioButton("rbGrpRate", "7", isChecked: false) @Html.Label("Origin (Revenue)")
                                    </div>
                                    <div>
                                        @Html.RadioButton("rbGrpRate", "8", isChecked: false)  @Html.Label("Freight (Revenue)")
                                    </div>
                                    <div>
                                        @Html.RadioButton("rbGrpRate", "9", isChecked: false) @Html.Label("Destination (Revenue)")
                                    </div>
                                }
                            }
                            <div>
                                @Html.RadioButton("rbGrpRate", "5", isChecked: false) @Html.Label("SFR")
                            </div>
                            <div>
                                @Html.RadioButton("rbGrpRate", "6", isChecked: false) @Html.Label("SFR Details")
                            </div>
                        </div>
                    }
                    else
                    {
                        if (Model.ForwardingFlag == "All")
                        {
                            <a onclick="showDetails(this);" id="Details_@Model.RateCompRateWtID" data-id="@Model.RateCompRateWtID" class="btn btn-xs btn-default m-r-sm pull-right" data-cache="false" title="Quotation Detail"
                               data-assigned-id="@Model.RateCompRateWtID" data-toggle="modal" data-target="#exampleModalLong">View Quotation</a>
                        }

                    }
                    if (Model.ForwardingFlag == "All")
                    {
                        using (Html.BeginForm("Index", "InstructionSheet", null, FormMethod.Post, new { @id = "InstructionSheetForm", @name = "InstructionSheetForm", @class = "form-inline" }))
                        {
                            @Html.HiddenFor(model => model.MoveID, new { @class = "MoveID" })
                            @Html.Hidden("FromMove", 1, new { @class = "FromMove" })
                            @Html.HiddenFor(model => model.UpdatedBatchId, new { @class = "UpdatedBatchID" })
                            @Html.HiddenFor(model => model.CombinationID, new { @class = "CombinationID" })
                            <button type="submit" id="btnInstructionSheet" class="btn btn-xs btn-default m-r-sm pull-right" target="_blank" title="View Instruction">Instruction Sheet</button>
                        }
                        if (Model.MoveID > 0)
                        {
                            <a href="@Url.Action("GetJobLabel", "MoveManage" ,new { Key=CommonService.GenerateQueryString("MoveID=ParamValue0", new string[] {Model.MoveID.ToString()})})" class="btnView btn btn-xs btn-primary pull-right m-r-sm" target="_blank" title="Job Label">Job Label</a>
                        }
                    }
                }
            </div>
        </div>
        @if (Model.MoveID > 0)
        {
            <div class="col-sm-3 col-md-3">
                <div class="form-group">
                    @using (Html.BeginForm("GetReport", "MoveManage", FormMethod.Post, new { @name = "FormReport", @target = "_blank", @class = "form-inline", @id = "FormReport" }))
                    {
                        @Html.AntiForgeryToken()
                        <label for="ReportID">Reports:</label>
                        @Html.DropDownList("ReportID", new SelectList((System.Collections.IEnumerable)ViewData["ReportList"], "Value", "Text"), "--Select report to view--", new { @class = "form-control input-sm clearfix" })
                        @Html.Hidden("ReportName", null, new { @id = "hfReportName" })
                        @Html.HiddenFor(model => model.MoveID, new { @id = "hfMovID" })
                        @Html.HiddenFor(model => model.SurveyID, new { @id = "hfSurveyID" })
                        @Html.HiddenFor(model => model.EnqDetailID, new { @id = "hfEnqDetailID" })
                        @Html.HiddenFor(model => model.EnqID, new { @id = "hfEnqID" })
                        @Html.HiddenFor(model => model.EnqNo, new { @id = "hfEnqNo" })

                    }
                </div>
            </div>
        }
    </div>
    <div class="row">
        <div class="col-sm-12">
            @Html.HiddenFor(a => a.SurveyID)
            @Html.HiddenFor(a => a.EnqDetailID)
            @Html.HiddenFor(a => a.IsSOCost)
            <div class="tabs-container" id="tabRateUpload">
                <ul class="nav nav-tabs" role="tablist">
                    @foreach (var item in Model.TabList)
                    {
                        if (item.TabIndex == 0)
                        {
                            if (Model.TabIndex == 0 && !IsTabIndecChanges)
                            {
                                Model.TabIndex = item.TabIndex;
                                IsTabIndecChanges = true;
                            }
                            <li role="presentation" class="@(Model.TabIndex == 0 ? " active" : "" )"><a href="#JobOpening" aria-controls="JobOpening" class="Tablist" role="tab" data-toggle="tab" aria-expanded="true">Job Opening</a></li>
                        }
                        if (!string.IsNullOrEmpty(Model.JobNo))
                        {
                            if ((Model.MoveJob.ExitPointID > 0 && Model.MoveJob.EntryPointID > 0 && Model.RMCBuss) || Model.RMCType == "Other Type" || !Model.RMCBuss || Model.MoveJob.ModeID == 3)
                            {
                                if (item.TabIndex == 1)
                                {
                                    if (Model.TabIndex == 0 && !IsTabIndecChanges)
                                    {
                                        Model.TabIndex = item.TabIndex;
                                        IsTabIndecChanges = true;
                                    }
                                    <li role="presentation" class="@(Model.TabIndex == 1 ? " active" : "" )"><a href="#SurveyInfo" aria-controls="SurveyInfo" class="Tablist" role="tab" data-toggle="tab" aria-expanded="true">Survey Info</a></li>
                                }
                                else if (item.TabIndex == 2)
                                {
                                    if (Model.TabIndex == 0 && !IsTabIndecChanges)
                                    {
                                        Model.TabIndex = item.TabIndex;
                                        IsTabIndecChanges = true;
                                    }
                                    <li role="presentation" class="@(Model.TabIndex == 2 ? " active" : "" )"><a href="#PackingInfo" aria-controls="PackingInfo" class="Tablist" role="tab" data-toggle="tab" aria-expanded="true">Packing Stage</a></li>
                                }
                                else if (item.TabIndex == 3)
                                {
                                    if (Model.TabIndex == 0 && !IsTabIndecChanges)
                                    {
                                        Model.TabIndex = item.TabIndex;
                                        IsTabIndecChanges = true;
                                    }
                                    <li role="presentation" class="@(Model.TabIndex == 3 ? " active" : "" )"><a href="#FreightInfo" aria-controls="FreightInfo" class="Tablist" role="tab" data-toggle="tab" aria-expanded="true">Transit Detail</a></li>
                                }
                                else if (item.TabIndex == 4)
                                {
                                    if (Model.TabIndex == 0 && !IsTabIndecChanges)
                                    {
                                        Model.TabIndex = item.TabIndex;
                                        IsTabIndecChanges = true;
                                    }
                                    <li role="presentation" class="@(Model.TabIndex == 4 ? " active" : "" )"><a href="#DeliveryInfo" aria-controls="DeliveryInfo" class="Tablist" role="tab" data-toggle="tab" aria-expanded="true">Delivery/Final Stage</a></li>
                                }
                            }
                            if (item.TabIndex == 5)
                            {
                                if (Model.TabIndex == 0 && !IsTabIndecChanges)
                                {
                                    Model.TabIndex = item.TabIndex;
                                    IsTabIndecChanges = true;
                                }
                                <li role="presentation" class="@(Model.TabIndex == 5 ? " active" : "" )"><a href="#Cost" aria-controls="Cost" role="tab" class="Tablist" data-toggle="tab" aria-expanded="true">Cost Sheet</a></li>
                            }
                            if (item.TabIndex == 6)
                            {
                                if (Model.TabIndex == 0 && !IsTabIndecChanges)
                                {
                                    Model.TabIndex = item.TabIndex;
                                    IsTabIndecChanges = true;
                                }
                                <li role="presentation" class="@(Model.TabIndex == 6 ? " active" : "" )"><a href="#EmailInfo" aria-controls="EmailInfo" role="tab" class="Tablist" data-toggle="tab" aria-expanded="true">Email Info</a></li>
                            }
                            if (item.TabIndex == 7)
                            {
                                if (Model.TabIndex == 0 && !IsTabIndecChanges)
                                {
                                    Model.TabIndex = item.TabIndex;
                                    IsTabIndecChanges = true;
                                }
                                <li role="presentation" class="@(Model.TabIndex == 7 ? " active" : "" )"><a href="#DocUpload" aria-controls="DocUpload" role="tab" class="Tablist" data-toggle="tab" aria-expanded="false">DMS</a></li>
                            }

                            if (item.TabIndex == 8)
                            {
                                if (Model.TabIndex == 0 && !IsTabIndecChanges)
                                {
                                    Model.TabIndex = item.TabIndex;
                                    IsTabIndecChanges = true;
                                }
                                <li role="presentation" class="@(Model.TabIndex == 8 ? " active" : "" )"><a href="#AgentFeedback" aria-controls="AgentFeedback" role="tab" class="Tablist" data-toggle="tab" aria-expanded="false">Agent/Vendor Evaluation</a></li>
                            }

                            //ShipperFeedback
                            if (item.TabIndex == 9)
                            {
                                if ((Model.CompanyID == 1 && (Model.MoveJob.BusinessLineName == "AGENT" || Model.MoveJob.BusinessLineName == "LOCAL"))
                                    || Model.CompanyID == 2)
                                {
                                    if (Model.TabIndex == 0 && !IsTabIndecChanges)
                                    {
                                        Model.TabIndex = item.TabIndex;
                                        IsTabIndecChanges = true;
                                    }
                                    <li role="presentation" class="@(Model.TabIndex == 9 ? " active" : "" )"><a href="#ShipperFeedback" aria-controls="ShipperFeedback" role="tab" class="Tablist" data-toggle="tab" aria-expanded="false">@(Model.ShipperFeedback.SFTemplateID == 3 ? "Agent Feedback" : "Shipper Feedback")</a></li>
                                    @*<li role="presentation" class="@(Model.TabIndex == 9 ? " active" : "" )"><a href="#ShipperFeedback" aria-controls="ShipperFeedback" role="tab" class="Tablist" data-toggle="tab" aria-expanded="false">@(Model.MoveJob.BusinessLineName == "AGENT" ? "Agent Feedback" : "Shipper Feedback")</a></li>*@
                                }
                            }
                        }
                    }

                </ul>
                <div class="tab-content">
                    <div role="tabpanel" class="@(Model.TabIndex == 0 ? " tab-pane active" : "tab-pane" )" id="JobOpening">
                        @using (Html.BeginForm("CreateJob", "MoveManage", new { Indx = 0, SurveyID = @Model.SurveyID, MoveID = @Model.MoveID }, FormMethod.Post, new { enctype = "multipart/form-data" }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.ValidationSummary(true)

                            @Html.HiddenFor(model => model.MoveJob.HFVMoveRateCompList);
                            @Html.Hidden("IsDirectSave", 0);
                            <div class="row clearfix">
                                @if (Model.JobStatus != "Cancelled")
                                {
                                    <div class="col-sm-12 col-md-12">

                                        <input type="submit" id="btnSaveJob" name="Save" class="btn btn-primary m-t-sm pull-right m-r-sm btn-sm filter-custom-margin m-n Showspinner" value="Save" />
                                    </div>
                                }


                                <fieldset class="col-md-12 border  m-n">
                                    <legend>Details</legend>
                                    <div class="m-t-sm pad-none">
                                        <div class="row">
                                            <div class="col-sm-2 col-md-2">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.MoveJob.RMCName, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownList("MoveJob.RMCID", new SelectList((System.Collections.IEnumerable)ViewData["RMC"], "Value", "Text", Model.MoveJob.RMCID), "--Select RMC--", new { @class = "form-control input-sm clearfix" })
                                                    @Html.HiddenFor(model => model.MoveJob.RMCID)
                                                    @*@Html.LabelFor(model => model.MoveJob.RMCName, htmlAttributes: new { @class = "control-label" })
                                                        @Html.DropDownListFor(model => model.MoveJob.RMCID, new SelectList((System.Collections.IEnumerable)ViewData["RMC"], "Value", "Text"), "--Select RMC--", new { @class = "form-control input-sm clearfix", @onchange = "javascript:RMC_OnChange(this);" })*@
                                                    @Html.ValidationMessageFor(model => model.MoveJob.RMCID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-sm-2 col-md-2">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.MoveJob.BusinessLineName, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownList("MoveJob.BusinessLineID", new SelectList((System.Collections.IEnumerable)ViewData["BusinessLine"], "Value", "Text"), "--Select Business Line--", new { @class = "form-control input-sm clearfix" })
                                                    @Html.ValidationMessageFor(model => model.MoveJob.BusinessLineID, "", new { @class = "text-danger" })
                                                    @Html.HiddenFor(model => model.MoveJob.BusinessLineID)
                                                </div>
                                            </div>
                                            <div class="col-sm-2 col-md-3">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.MoveJob.GoodsDescriptionName, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownList("MoveJob.GoodsDescriptionID", new SelectList((System.Collections.IEnumerable)ViewData["GoodsDescription"], "Value", "Text"), "--Select Goods Description--", new { @class = "form-control input-sm clearfix" })
                                                    @Html.HiddenFor(model => model.MoveJob.GoodsDescriptionID)
                                                    @Html.ValidationMessageFor(model => model.MoveJob.GoodsDescriptionID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-sm-2 col-md-2">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.MoveJob.ModeName, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownList("MoveJob.ModeID", new SelectList((System.Collections.IEnumerable)ViewData["Mode"], "Value", "Text"), new { @class = "form-control input-sm clearfix ", title = "Mode", autocomplete = "on" })
                                                    @Html.HiddenFor(model => model.MoveJob.ModeID)
                                                    @Html.ValidationMessageFor(model => model.MoveJob.ModeID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-sm-2 col-md-2">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.ServiceLine, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownList("ServiceLineID", new SelectList((System.Collections.IEnumerable)ViewData["ServiceLine"], "Value", "Text"), new { @class = "form-control input-sm clearfix ", title = "ServiceLine", autocomplete = "on" })
                                                    @Html.HiddenFor(model => model.ServiceLineID)
                                                    @Html.ValidationMessageFor(model => model.ServiceLineID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-sm-2 col-md-3">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.MoveJob.FromLocationName, htmlAttributes: new { id = "FromLocationName", @class = "control-label" })
                                                    @Html.DropDownList("MoveJob.FromLocationID", new List<SelectListItem>
                                                        (), new { @class = "form-control input-sm clearfix CityDropDown" })
                                                    @Html.HiddenFor(model => model.MoveJob.FromLocationID)
                                                    @Html.ValidationMessageFor(model => model.MoveJob.FromLocationID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-sm-2 col-md-3 hide">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.MoveJob.ExitPointName, htmlAttributes: new { id = "ExitPortName", @class = "control-label" })
                                                    @Html.DropDownListFor(model => model.MoveJob.ExitPointID, new SelectList((System.Collections.IEnumerable)ViewData["PortList"], "Value", "Text"), "--Select Exit Port--", new { @class = "form-control input-sm clearfix" })
                                                </div>
                                            </div>
                                            <div class="col-sm-2 col-md-3 hide">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.MoveJob.EntryPointName, htmlAttributes: new { id = "EntryPortnName", @class = "control-label" })
                                                    @Html.DropDownListFor(model => model.MoveJob.EntryPointID, new SelectList((System.Collections.IEnumerable)ViewData["PortList"], "Value", "Text"), "--Select Entry Port--", new { @class = "form-control input-sm clearfix" })
                                                </div>
                                            </div>
                                            <div class="col-sm-2 col-md-3">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.MoveJob.ToLocationName, htmlAttributes: new { id = "ToLocationName", @class = "control-label" })
                                                    @Html.DropDownList("MoveJob.ToLocationID", new List<SelectListItem>
                                                        (), new { @class = "form-control input-sm clearfix CityDropDown" })
                                                    @Html.HiddenFor(model => model.MoveJob.ToLocationID)
                                                    @Html.ValidationMessageFor(model => model.MoveJob.ToLocationID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-sm-1 col-md-1">
                                                <div class="form-group">
                                                    <label>Wt/Vol</label>
                                                    @Html.DropDownListFor(model => model.MoveJob.WeightUnitID, new SelectList((System.Collections.IEnumerable)ViewData["WeightUnit"], "Value", "Text"), "--Select Weight Unit--", new { @class = "form-control input-sm clearfix" })
                                                    @Html.ValidationMessageFor(model => model.MoveJob.WeightUnitID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-sm-1 col-md-1">
                                                <div class="form-group">
                                                    <label>Weight</label>
                                                    @Html.EditorFor(model => model.MoveJob.WeightUnitFrom, new { htmlAttributes = new { @class = "form-control input-sm clearfix", onkeypress = "return OnlyDouble(this, event);" } })
                                                    @Html.ValidationMessageFor(model => model.MoveJob.WeightUnitFrom, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-sm-1 col-md-1 hide">
                                                <div class="form-group">
                                                    <label>Wt. To</label>
                                                    @Html.EditorFor(model => model.MoveJob.WeightUnitTo, new { htmlAttributes = new { @class = "form-control input-sm clearfix", onkeypress = "return OnlyDouble(this, event);" } })
                                                    @Html.ValidationMessageFor(model => model.MoveJob.WeightUnitTo, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-sm-2 col-md-2">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.OldJobNo, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(model => model.OldJobNo, new { htmlAttributes = new { @class = "form-control input-sm clearfix" } })
                                                    @*@Html.LabelFor(model => model.MoveJob.RMCName, htmlAttributes: new { @class = "control-label" })
                                                        @Html.DropDownListFor(model => model.MoveJob.RMCID, new SelectList((System.Collections.IEnumerable)ViewData["RMC"], "Value", "Text"), "--Select RMC--", new { @class = "form-control input-sm clearfix", @onchange = "javascript:RMC_OnChange(this);" })*@
                                                    @Html.ValidationMessageFor(model => model.OldJobNo, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-sm-2 col-md-2">
                                                <div class="form-group">
                                                    <label>Shipping Lines</label>
                                                    @Html.DropDownListFor(model => model.MoveJob.ShipingLineID, new SelectList((System.Collections.IEnumerable)ViewData["ShippingLineList"], "Value", "Text"), "--Select ShippingLine--", new { @class = "form-control input-sm clearfix " })
                                                </div>
                                            </div>
                                            <div class="col-sm-2 col-md-2">
                                                <div class="form-group">
                                                    <label>Shipment Type</label>
                                                    @Html.DropDownListFor(model => model.MoveJob.ShipmentTypeID, new SelectList((System.Collections.IEnumerable)ViewData["ShipmenTypeList"], "Value", "Text"), "--Select Shipmen Type--", new { @class = "form-control input-sm clearfix " })
                                                </div>
                                            </div>

                                            <div class="col-sm-1 col-md-1">
                                                <div class="form-group">
                                                    <label>Container</label>
                                                    @Html.DropDownListFor(a => a.MoveJob.ContainerTypeID, new SelectList((System.Collections.IEnumerable)ViewData["ContainerUnitList"], "Value", "Text"), "--Select One--", new { @class = "form-control", id = "ContainerTypeDropDown", title = "ContainerType" })
                                                </div>
                                            </div>
                                            <div class="col-sm-2 col-md-2">
                                                <div class="form-group">
                                                    <label>Insurance By</label>
                                                    @Html.DropDownListFor(model => model.InsurBy, new SelectList((System.Collections.IEnumerable)ViewData["InsuredByList"], "Value", "Text", ViewData["InsuredBy"]), "--Select One--", new { @class = "form-control input-sm clearfix InsurBy", id = "InsurBy", title = "InsuredBy" })
                                                    @Html.ValidationMessageFor(model => model.InsurBy, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-sm-2 col-md-2">
                                                <div class="form-group">
                                                    <label>Tentative Move Date</label>
                                                    @Html.EditorFor(model => model.MoveJob.TentativeMoveDate, new { htmlAttributes = new { @placeholder = "Tentative Move Date", @tooltip = "Tentative Move Date", @class = "form-control input-sm datepicker", title = "Tentative Move Date", id = "dtTentativeMoveDate", onfocus = "ShowDatePicker(this)" } })
                                                    @Html.ValidationMessageFor(model => model.MoveJob.TentativeMoveDate, "", new { @class = "text-danger" })
                                                </div>
                                            </div>

                                            <div class="col-sm-3 col-md-3">
                                                <div class="form-group">
                                                    <span>
                                                        <a href="#" data-popover-content="#popover-content-Origin" id="OriginAddress" class="Originpop">Origin Address<span class="glyphicon glyphicon-pencil"></span></a>
                                                    </span> &nbsp;&nbsp;
                                                    <span>
                                                        <a href="#" rel="popover" data-popover-content="#popover-content-Destination" id="DestinationAddress" class="Destpop">Destination Address<span class="glyphicon glyphicon-pencil"></span></a>
                                                        @*<a data-placement="bottom" data-toggle="popover" data-title="Destination" data-container="body" type="button" data-html="true" href="#" id="DestinationAddress" class="Destinationpop">Destination</a>*@
                                                    </span>
                                                    <div id="popover-content-Origin" class="_content hide Origin">
                                                        <div class="row">
                                                            <div class="col-sm-2">
                                                                <div class="form-group">
                                                                    <button type="button" id="CopyOrigin" class="btn btn-primary btn-xs" onclick="CopyAddress(this)">Copy Enq. Address</button>
                                                                </div>
                                                            </div>

                                                        </div>
                                                        <div class="row">
                                                            <div class="col-sm-3">
                                                                Add 1
                                                            </div>
                                                            <div class="col-sm-9">
                                                                @Html.TextAreaFor(a => a.MoveJob.OrgAdd, new { rows = "6", cols = "10", @class = "form-control input-sm clearfix m-b-xs popOrgAdd cssAdd1", placeholder = "Origin Address", title = "Origin Address", @id = "popOrgAdd" })
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-sm-3">
                                                                Add 2
                                                            </div>
                                                            <div class="col-sm-9">
                                                                @Html.TextAreaFor(a => a.MoveJob.OrgAdd2, new { rows = "6", cols = "10", @class = "form-control input-sm clearfix m-b-xs popOrgAdd2 cssAdd2", placeholder = "Origin Address 2", title = "Origin Address 2", @id = "popOrgAdd2" })
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-sm-3">
                                                                City
                                                            </div>
                                                            <div class="col-sm-9">
                                                                @Html.DropDownListFor(model => model.MoveJob.OrgCityID, new SelectList((System.Collections.IEnumerable)ViewData["CityList"], "Value", "Text", Model.MoveJob.OrgCityID), "--Select City--", new { @class = "form-control input-sm m-b-xs clearfix PopOrgCity cssCity", @id = "PopOrgCity" })
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-sm-3">
                                                                Phone
                                                            </div>
                                                            <div class="col-sm-9">
                                                                @Html.TextBoxFor(a => a.MoveJob.OrgPhone, new { @class = "form-control input-sm m-b-xs clearfix popOrgPhone cssPhone", placeholder = "Origin Phone", title = "OriginPhone", @id = "popOrgPhone" })
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-sm-3">
                                                                Email
                                                            </div>
                                                            <div class="col-sm-9">
                                                                @Html.TextBoxFor(a => a.MoveJob.OrgEmail, new { @class = "form-control input-sm  clearfix popOrgEmail cssEmail", placeholder = "Origin Email", title = "OriginEmail", @id = "popOrgEmail" })
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-sm-3">
                                                                Pin Code
                                                            </div>
                                                            <div class="col-sm-9">
                                                                @Html.TextBoxFor(a => a.MoveJob.OrgPin, new { @class = "form-control input-sm  clearfix popOrgPin cssPin", placeholder = "Origin Pincode", title = "OriginPin", @id = "popOrgPin" })
                                                            </div>
                                                        </div>



                                                        <input type="button" id="btnSaveOrigin" name="Save" class="btn btn-primary m-t-sm pull-right m-r-sm btn-sm filter-custom-margin btnSaveOrigin" value="Save" />
                                                    </div>
                                                    <div id="popover-content-Destination" class="_content hide Destination">
                                                        <div class="row">
                                                            <div class="col-sm-2">
                                                                <div class="form-group">
                                                                    <button type="button" id="CopyDest" class="btn btn-primary btn-xs" onclick="CopyAddress(this)">Copy Enq. Address</button>

                                                                </div>
                                                            </div>

                                                        </div>
                                                        <div class="row">
                                                            <div class="col-sm-3">
                                                                Add 1
                                                            </div>
                                                            <div class="col-sm-9">
                                                                @Html.TextAreaFor(a => a.MoveJob.DestAdd, new { rows = "6", cols = "10", @class = "form-control input-sm clearfix popDestAdd cssAdd1", placeholder = "Destion Address", title = "Destion Address", @id = "popDestAdd" })
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-sm-3">
                                                                Add 2
                                                            </div>
                                                            <div class="col-sm-9">
                                                                @Html.TextAreaFor(a => a.MoveJob.DestAdd2, new { rows = "6", cols = "10", @class = "form-control input-sm clearfix popDestAdd2 cssAdd1", placeholder = "Destion Address 2", title = "Destion Address 2", @id = "popDestAdd2" })
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-sm-3">
                                                                City
                                                            </div>
                                                            <div class="col-sm-9">
                                                                @Html.DropDownListFor(model => model.MoveJob.DestCityID, new SelectList((System.Collections.IEnumerable)ViewData["CityList"], "Value", "Text", Model.MoveJob.DestCityID), "--Select City--", new { @class = "form-control input-sm clearfix PopDestCity cssAdd1", @id = "PopDestCity" })
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-sm-3">
                                                                Phone
                                                            </div>
                                                            <div class="col-sm-9">
                                                                @Html.TextBoxFor(a => a.MoveJob.DestPhone, new { @class = "form-control input-sm clearfix popDestPhone cssPhone", placeholder = "Destination Phone", title = "DestinationPhone", @id = "popDestPhone" })
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-sm-3">
                                                                Email
                                                            </div>
                                                            <div class="col-sm-9">
                                                                @Html.TextBoxFor(a => a.MoveJob.DestEmail, new { @class = "form-control input-sm clearfix popDestEmail cssEmail", placeholder = "Destination Email", title = "DestinationEmail", @id = "popDestEmail" })
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-sm-3">
                                                                Pin Code
                                                            </div>
                                                            <div class="col-sm-9">
                                                                @Html.TextBoxFor(a => a.MoveJob.DestPin, new { @class = "form-control input-sm  clearfix popDestPin cssPin", placeholder = "Destination Pincode", title = "DestinationPin", @id = "popDestPin" })
                                                            </div>
                                                        </div>
                                                        <input type="button" id="btnSaveDest" name="Save" class="btn btn-primary m-t-sm pull-right m-r-sm btn-sm filter-custom-margin btnSaveDest" value="Save" />
                                                    </div>

                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                </fieldset>
                                <fieldset class="col-md-12 border m-n">
                                    <legend>Shipper Details</legend>
                                    <div class="m-t-sm m-n pad-none border">
                                        <div class="row">
                                            <div class="form-group col-sm-1 col-md-1 m-r-n no-padding-r width-auto">
                                                <label @*style="width:50px" *@></label>
                                                @Html.DropDownListFor(a => a.MoveJob.Shipper.Title, new SelectList((System.Collections.IEnumerable)ViewData["TitleList"], "Value", "Text", ViewData["TitleList"]), "Select One", new { @class = "form-control ", @style = "width:75%", id = "Title", title = "Title" })
                                            </div>
                                            <div class="form-group col-sm-3 col-md-2 no-padding-left-right width-auto">
                                                <label>First Name</label>
                                                @Html.TextBoxFor(a => a.MoveJob.Shipper.ShipperFName, new { @class = "form-control input-sm ", placeholder = "First Name", title = "First Name", @id = "ShipperFName" })
                                                @Html.ValidationMessageFor(a => a.MoveJob.Shipper.ShipperFName, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="form-group col-sm-3 col-md-2 no-padding-left-right width-auto">
                                                <label>Last Name</label>
                                                @Html.TextBoxFor(a => a.MoveJob.Shipper.ShipperLName, new { @class = "form-control input-sm", placeholder = "Last Name", title = "Last Name", @id = "ShipperLName" })
                                            </div>
                                            <div class="form-group col-sm-2 col-md-2 no-padding-r width-auto">
                                                <label>Shipper Type</label>
                                                @Html.DropDownListFor(a => a.MoveJob.Shipper.ShipCategoryID, new SelectList((System.Collections.IEnumerable)ViewData["ShipperTypeList"], "Value", "Text", ViewData["ShipperTypeList"]), "Select One", new { @class = "form-control input-sm m-n pad-none", id = "ShipperType", title = "Shipper Type" })
                                                @*@Html.HiddenFor(model => model.OriginRate.SeaPortId, new { id = "OSeaPortId", name = "OSeaPortId" })
                                                    @Html.ValidationMessageFor(model => model.OriginRate.SeaPortName, "", new { @class = "text-danger" })*@
                                            </div>
                                            <div class="form-group col-sm-3 col-md-3 m-r-n">
                                                <label>Email</label>
                                                @Html.TextBoxFor(a => a.MoveJob.Shipper.Email, new { @class = "form-control input-sm", placeholder = "Email", title = "Email", @id = "Email" })
                                            </div>
                                            <div class="form-group col-sm-2 col-md-2 m-r-n">
                                                <label>Nationality</label>
                                                @Html.DropDownListFor(a => a.MoveJob.Shipper.Nationality, new SelectList((System.Collections.IEnumerable)ViewData["NationalityList"], "Value", "Text", ViewData["NationalityList"]), "Select One", new { @class = "form-control input-sm", id = "Nationality", title = "Nationality" })
                                                @*@Html.TextBoxFor(a => a.MoveJob.Shipper.Nationality, new { @class = "form-control input-sm", placeholder = "Nationality", title = "Nationality", @id = "Nationality" })*@
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="form-group col-sm-3 m-r-n">
                                                <label>Address 1</label>
                                                @Html.TextBoxFor(a => a.MoveJob.Shipper.Address1, new { @class = "form-control input-sm", placeholder = "Address1", title = "Address 1", @id = "Address1" })
                                            </div>
                                            <div class="form-group col-sm-3 m-r-n">
                                                <label>Address 2</label>
                                                @Html.TextBoxFor(a => a.MoveJob.Shipper.Address2, new { @class = "form-control input-sm", placeholder = "Address2", title = "Address 2", @id = "Address2" })
                                            </div>
                                            <div class="form-group col-sm-2 m-r-n">
                                                <label>City</label>
                                                @Html.DropDownListFor(a => a.MoveJob.Shipper.AddressCityID, new List<SelectListItem>(), new { @class = "form-control CityDropDown", id = "City", title = "City" })
                                            </div>
                                            @*<div class="form-group col-sm-2 m-r-n">
                                                    <label>Pincode</label>
                                                    @Html.DropDownListFor(a => a.MoveJob.Shipper.AddressCityID, new List<SelectListItem>(), new { @class = "form-control CityDropDown", id = "City", title = "City" })
                                                </div>*@
                                            <div class="form-group col-sm-2 m-r-n">
                                                <label>Phone 1</label>
                                                @Html.TextBoxFor(a => a.MoveJob.Shipper.Phone1, new { @class = "form-control input-sm", placeholder = "Phone1", title = "Phone 1", @id = "Phone1" })
                                                @Html.ValidationMessageFor(a => a.MoveJob.Shipper.Phone1, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="form-group col-sm-2 m-r-n">
                                                <label>Phone 2</label>
                                                @Html.TextBoxFor(a => a.MoveJob.Shipper.Phone2, new { @class = "form-control input-sm", placeholder = "Phone2", title = "Phone 2", @id = "Phone2" })
                                                @Html.ValidationMessageFor(a => a.MoveJob.Shipper.Phone2, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                </fieldset>
                                @if (Model.Project == "STG" || @Model.Project == "MSTG")
                                {
                                    <fieldset class="@InsDivCSS">
                                        <legend>Insurance Details</legend>
                                        <div class="m-t-sm m-n pad-none border">
                                            <div class="row">
                                                <div class="form-group col-sm-3 col-md-3 no-padding-r width-auto">
                                                    <label>Contact Person</label>
                                                    @Html.TextBoxFor(a => a.insuranceDetail.ContactPerson, new { @class = "form-control input-sm ", placeholder = "Contact Person", title = "Contact Person", @id = "ContactPerson" })
                                                    @Html.ValidationMessageFor(a => a.insuranceDetail.ContactPerson, "", new { @class = "text-danger" })
                                                </div>
                                                <div class="form-group col-sm-3 col-md-3 no-padding-r width-auto">
                                                    <label>Contact Number</label>
                                                    @Html.TextBoxFor(a => a.insuranceDetail.ContactNumber, new { @class = "form-control input-sm", placeholder = "Contact Number", title = "Contact Number", @id = "ContactNumber" })
                                                </div>
                                                <div class="form-group col-sm-3 col-md-3 no-padding-r width-auto">
                                                    <label>Contact Email ID</label>
                                                    @Html.TextBoxFor(a => a.insuranceDetail.EmailID, new { @class = "form-control input-sm", placeholder = "EmailID", title = "EmailID", @id = "EmailID" })
                                                    @*@Html.HiddenFor(model => model.OriginRate.SeaPortId, new { id = "OSeaPortId", name = "OSeaPortId" })
                                                        @Html.ValidationMessageFor(model => model.OriginRate.SeaPortName, "", new { @class = "text-danger" })*@
                                                </div>
                                                <div class="form-group col-sm-3 col-md-3 m-r-n">
                                                    <label>Contact Finance Person</label>
                                                    @Html.TextBoxFor(a => a.insuranceDetail.FinancePerson, new { @class = "form-control input-sm", placeholder = "Finance Person", title = "Finance Person", @id = "FinancePerson" })
                                                </div>

                                            </div>
                                            <div class="row">
                                                <div class="form-group col-sm-2 col-md-2 m-r-n">
                                                    <label>Ins. Value Amount</label>
                                                    @Html.TextBoxFor(a => a.insuranceDetail.InsuranceValueAmount, new { @class = "form-control input-sm", placeholder = "Insurance Value Amount", title = "Insurance Value Amount", @id = "InsuranceValueAmount" })
                                                    @*@Html.TextBoxFor(a => a.MoveJob.Shipper.Nationality, new { @class = "form-control input-sm", placeholder = "Nationality", title = "Nationality", @id = "Nationality" })*@
                                                </div>
                                                <div class="form-group col-sm-2 m-r-n">
                                                    <label>Ins. Value Currency</label>
                                                    @Html.DropDownListFor(a => a.insuranceDetail.InsuranceValueCurrency, new SelectList((System.Collections.IEnumerable)ViewData["BaseCurrencyRate"], "Value", "Text", ViewData["BaseCurrencyRate"]), "Select One", new { @class = "form-control", id = "InsuranceValueCurrency", title = "Insurance Value Currency" })
                                                </div>
                                                <div class="form-group col-sm-3 m-r-n">
                                                    <label>Insurance Breakdown</label>
                                                    @Html.DropDownListFor(a => a.insuranceDetail.BreakdownInsurance, CommonService.YesNo, new { @class = "form-control", id = "BreakdownInsurance", title = "BreakdownInsurance" })
                                                </div>
                                                <div class="form-group col-sm-3 m-r-n">
                                                    <label>Breakdown Insurance (Upload)</label>
                                                    @Html.DropDownListFor(a => a.insuranceDetail.InsuranceBreakdown, CommonService.YesNo, new { @class = "form-control", id = "InsuranceBreakdown", title = "InsuranceBreakdown" })
                                                </div>
                                                @*<div class="form-group col-sm-2 m-r-n">
                                                        <label>Pincode</label>
                                                        @Html.DropDownListFor(a => a.MoveJob.Shipper.AddressCityID, new List<SelectListItem>(), new { @class = "form-control CityDropDown", id = "City", title = "City" })
                                                    </div>*@

                                            </div>
                                        </div>
                                    </fieldset>
                                }


                                <fieldset class="col-md-12 border p-2  m-n">
                                    <legend class="w-auto">Client & Account Details</legend>
                                    <div class="m-t-sm  m-n pad-none border">
                                        <div class="row">
                                            <div class="col-sm-10 form-group no-padding-r width-auto">
                                                <label>Client</label>
                                                @if (Model.RMCBuss)
                                                {
                                                    @Html.DropDownList("MoveJob.ClientId", new SelectList((System.Collections.IEnumerable)ViewData["Client"], "Value", "Text", Model.MoveJob.ClientId), "Select One", new { @class = "form-control input-sm clearfix" })
                                                    @Html.HiddenFor(model => model.MoveJob.ClientId)
                                                }
                                                else
                                                {
                                                    @Html.DropDownListFor(a => a.MoveJob.ClientId, new List<SelectListItem>(), new { @class = "form-control enableselect Clientselect", id = "Client", title = "Client", autocomplete = "on" })
                                                }

                                                @*@Html.HiddenFor(model => model.OriginRate.CityID, new { id = "OCityID", name = "OCityID" })
                                                    @Html.ValidationMessageFor(model => model.OriginRate.CityName, "", new { @class = "text-danger" })*@
                                            </div>
                                            <div class="col-sm-2 form-group no-padding-r width-auto">
                                                <label>Client GST/VAT/TIN</label>
                                                @Html.TextBoxFor(a => a.MoveJob.ClientGSTNO, new { @readonly = true })
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-sm-10 form-group no-padding-r width-auto">
                                                <label>Corporate</label>
                                                @Html.DropDownListFor(a => a.MoveJob.AccountId, new List<SelectListItem>(), new { @class = "form-control enableselect Accountselect", id = "Account", title = "Account", autocomplete = "on" })
                                                @*@Html.HiddenFor(model => model.OriginRate.CityID, new { id = "OCityID", name = "OCityID" })
                                                    @Html.ValidationMessageFor(model => model.OriginRate.CityName, "", new { @class = "text-danger" })*@
                                            </div>
                                            <div class="col-sm-2 form-group no-padding-r width-auto">
                                                <label>Account GST/VAT/TIN</label>
                                                @Html.TextBoxFor(a => a.MoveJob.AccountGSTNO, new { @readonly = true })
                                            </div>
                                        </div>
                                        @*<div class="row AccountMGR">
                                                <div class="col-sm-2 form-group no-padding-r width-auto">
                                                    <label>AccountMgr </label><a class="pull-right" href="javascript:void(0)" target="_blank" id="chg_AccMgr">Change</a>
                                                    @Html.TextBoxFor(a => a.MoveJob.AccountMgr, new { @class = "form-control input-sm", placeholder = "AccountMgr", title = "AccountMgr", @id = "AccountMgr", @readonly = "readonly" })
                                                    @Html.DropDownListFor(a => a.MoveJob.chgAccountMgr, new SelectList((System.Collections.IEnumerable)ViewData["AcctMgrList"], "Value", "Text", ViewData["AcctMgrList"]), "Select One", new { @class = "form-control", id = "chgAcctMgr", title = "AcctMgr" })
                                                </div>

                                            </div>*@

                                    </div>
                                </fieldset>
                                @if (Model.CompanyID == 1)
                                {
                                    <fieldset id="WarehouseDetails" class="col-md-12 border  m-n">
                                        <legend>Warehouse Detail</legend>
                                        <div class="row">
                                            @if (!Model.IsOrgWHSave)
                                            {
                                                <div class="col-sm-3 col-md-3">
                                                    <div class="form-group">
                                                        @Html.LabelFor(model => model.OrgWarehouse, htmlAttributes: new { @class = "control-label" })
                                                        @Html.DropDownListFor(model => model.OrgWarehouse, new SelectList((System.Collections.IEnumerable)ViewData["WarehouseList"], "Value", "Text"), "--Select Warehouse--", new { @class = "form-control input-sm clearfix enableselect", @id = "OrgWarehouse" })
                                                    </div>
                                                </div>
                                            }
                                            @if (!Model.IsDestWHSave)
                                            {
                                                <div class="col-sm-3 col-md-3">
                                                    <div class="form-group">
                                                        @Html.LabelFor(model => model.DestWarehouse, htmlAttributes: new { @class = "control-label" })
                                                        @Html.DropDownListFor(model => model.DestWarehouse, new SelectList((System.Collections.IEnumerable)ViewData["WarehouseList"], "Value", "Text"), "--Select Warehouse--", new { @class = "form-control input-sm clearfix enableselect", @id = "DestWarehouse" })
                                                    </div>
                                                </div>
                                            }

                                            <div class="col-sm-6 col-md-6">
                                                <div class="form-group">
                                                    @Html.CheckBoxFor(a => a.IsOutSourced, new { @class = "chkFunction chkOutSourced" }) &emsp;<label>OutSourced</label>
                                                </div>
                                            </div>
                                        </div>
                                    </fieldset>
                                }


                                <fieldset id="ChequeDetails" class="col-md-12 border  m-n">
                                    <legend>Advance Payment</legend>
                                    <div class="row">
                                        <div class="col-sm-3 col-md-3">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Cheque_No, htmlAttributes: new { @class = "control-label" })
                                                @Html.TextBoxFor(model => model.Cheque_No, new { @class = "form-control input-sm", placeholder = "Cheque No.", title = "Cheque No." })
                                            </div>
                                        </div>
                                        <div class="col-sm-3 col-md-3">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Cheque_Amt, htmlAttributes: new { @class = "control-label" })
                                                @Html.TextBoxFor(model => model.Cheque_Amt, new { @class = "form-control input-sm", placeholder = "Amount", title = "Amount" })
                                            </div>
                                        </div>
                                        <div class="col-sm-6 col-md-6">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Cheque_Remark, htmlAttributes: new { @class = "control-label" })
                                                @Html.TextAreaFor(model => model.Cheque_Remark, new { @class = "form-control input-sm", placeholder = "Remark", title = "Remark" })
                                            </div>
                                        </div>
                                    </div>
                                </fieldset>
                                <fieldset id="SDDetails" class="col-md-12 border  m-n">
                                    <legend>SD Detail</legend>
                                    <div class="row">

                                        <div class="col-sm-4 col-md-4">
                                            <div class="form-group">
                                                <label>H.O. SD</label>
                                                @Html.DropDownListFor(model => model.HoSdEmpID, new SelectList((System.Collections.IEnumerable)ViewData["MoveCoordinatorList"], "Value", "Text"), "--Select HO SD--", new { @class = "form-control input-sm clearfix coordinatechange enableselect", @id = "HOSD" })
                                                @Html.ValidationMessageFor(model => model.HoSdEmpID, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        @Html.HiddenFor(model => model.Project)
                                        @if (Model.Project == "IMP" || Model.Project == "EXP")
                                        {
                                            <div class="col-sm-4 col-md-4">
                                                <div class="form-group">
                                                    <label>Branch SD</label>
                                                    @Html.DropDownListFor(model => model.BrSdEmpID, new SelectList((System.Collections.IEnumerable)ViewData["MoveCoordinatorList"], "Value", "Text"), "--Select Branch SD--", new { @class = "form-control input-sm clearfix enableselect", @id = "BRSD" })
                                                    @Html.ValidationMessageFor(model => model.BrSdEmpID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            @Html.HiddenFor(model => model.DestBrSdEmpID);
                                        }
                                        else if (Model.Project == "NMD")
                                        {
                                            <div class="col-sm-4 col-md-4">
                                                <div class="form-group">
                                                    <label>Dest. Br. SD</label>
                                                    @Html.DropDownListFor(model => model.DestBrSdEmpID, new SelectList((System.Collections.IEnumerable)ViewData["MoveCoordinatorList"], "Value", "Text"), "--Select Dest. Branch SD--", new { @class = "form-control input-sm clearfix enableselect", @id = "DestBRSD" })
                                                    @Html.ValidationMessageFor(model => model.DestBrSdEmpID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            @Html.HiddenFor(model => model.BrSdEmpID);
                                        }
                                        else
                                        {
                                            @Html.HiddenFor(model => model.BrSdEmpID);
                                            @Html.HiddenFor(model => model.DestBrSdEmpID);
                                        }
                                    </div>
                                </fieldset>

                                <fieldset class="@DocumentCSS" id="Document">
                                    <legend>Document Detail</legend>
                                    <div class="row">

                                        <div class="col-sm-5 col-md-5">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.MoveJob.RMCFileNo, htmlAttributes: new { @class = "control-label" })
                                                @Html.TextBoxFor(a => a.MoveJob.RMCFileNo, new { @class = "form-control input-sm", placeholder = "RMC File No", title = "RMC File No", @id = "RMCFileNo" })
                                            </div>
                                        </div>

                                        <div class="col-sm-5 col-md-5">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.MoveJob.WKNo, htmlAttributes: new { @class = "control-label" })
                                                @Html.TextBoxFor(a => a.MoveJob.WKNo, new { @class = "form-control input-sm", placeholder = "Work Order No", title = "Work Order No", @id = "WKNo" })
                                            </div>
                                        </div>
                                        <div class="col-sm-5 col-md-5">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.MoveJob.MoveCoordinator, htmlAttributes: new { @class = "control-label" })
                                                @Html.DropDownListFor(model => model.MoveJob.MoveCoordinatorID, new SelectList((System.Collections.IEnumerable)ViewData["MoveCoordinatorList"], "Value", "Text"), "--Select Assigned move coordinator--", new { @class = "form-control input-sm clearfix coordinatechange enableselect", @id = "MoveCoordinator" })
                                            </div>
                                        </div>
                                        <div class="col-sm-5 col-md-5">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.MoveJob.OFSDocument, htmlAttributes: new { @class = "control-label" })
                                                @Html.TextBoxFor(a => a.MoveJob.OFSDocument, new { type = "file", @class = "form-control input-sm", placeholder = "OFS Document", title = "OFS Document", @id = "OFSDocument" })
                                            </div>
                                        </div>
                                        <div class="col-sm-5 col-md-5">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.MoveJob.AssistingMoveCoordinator, htmlAttributes: new { @class = "control-label" })
                                                @Html.DropDownListFor(model => model.MoveJob.AssistingMoveCoordinatorID, new SelectList((System.Collections.IEnumerable)ViewData["MoveCoordinatorList"], "Value", "Text"), "--Select Assisting Move Coordinator--", new { @class = "form-control input-sm clearfix enableselect", @id = "AssistingMoveCoordinatorID" })
                                                @Html.ValidationMessageFor(model => model.MoveJob.AssistingMoveCoordinatorID, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        @if (Model.MoveJob.ModeID == 4 && Model.RMCBuss)
                                        {
                                            <div class="col-sm-5 col-md-5">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.MoveJob.FinancePerson, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownListFor(model => model.MoveJob.FinancePerson, new SelectList((System.Collections.IEnumerable)ViewData["FinanceList"], "Value", "Text"), "--Select Finance Person--", new { @class = "form-control input-sm clearfix enableselect", @id = "FinancePersonID" })
                                                    @Html.ValidationMessageFor(model => model.MoveJob.FinancePerson, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </fieldset>

                                <fieldset class="col-md-5 border m-sm p-sm @RMCFeesCSS" id="Document">
                                    <legend>Charges Details</legend>
                                    <div class="row">
                                        <div class="form-group">
                                            <table class="table table-bordered tblbuffer">
                                                <tbody>
                                                    <tr>
                                                        <th class="label-success col-sm-2 ">Charges</th>
                                                        <th class="label-success col-sm-2 p-xs ">Amount</th>
                                                        <th class="label-success col-sm-2 p-xs">Percent</th>
                                                    </tr>
                                                    @if (Model.RMCFees != null)
                                                    {
                                                        for (int i = 0; i < Model.RMCFees.Count; i++)
                                                        {
                                                            <tr class="m-n pad-none">
                                                                <td class="m-n pad-none">
                                                                    @Html.HiddenFor(item => Model.RMCFees[i].CostHeadId)@Html.HiddenFor(item => Model.RMCFees[i].CostHeadName)@Html.HiddenFor(item => Model.RMCFees[i].BAFlag)
                                                                    @Model.RMCFees[i].CostHeadName
                                                                </td>
                                                                <td class="m-n pad-none">@Html.TextBoxFor(item => Model.RMCFees[i].Amount, new { @class = "form-control input-sm m-n pad-none charge", placeholder = "", title = "" })</td>
                                                                <td class="m-n pad-none">@Html.TextBoxFor(item => Model.RMCFees[i].Percent, new { @class = "form-control input-sm m-n pad-none charge", placeholder = "", title = "" })</td>
                                                            </tr>
                                                        }
                                                    }


                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </fieldset>

                                <fieldset class="col-md-12 border m-n">
                                    <legend>Detail</legend>
                                    @Html.Partial("_RateComponetPartial", Model);
                                </fieldset>
                            </div>
                        }
                    </div>

                    @if (Model.MoveID > 0 && Model.EnqDetailID > 0)
                    {
                        //Survey Info
                        @Html.Hidden("IsGPDirectSave", 0);
                        @Html.Hidden("GPTotalRevenue", @GPTotalRevenue);@Html.Hidden("GPTotalCost", @GPTotalCost);
                        @Html.Hidden("BtnSubmit", null)
                        @Html.HiddenFor(x => x.DefaultGPPercent);

                        <div role="tabpanel" class="@(Model.TabIndex == 1 ? " tab-pane active" : "tab-pane" )" id="SurveyInfo">
                            @* Survey Sent to Mobile for RMC and Type :Cartus and Brookfield *@
                            @*HideSurveySave*@
                            @if (Model.JobStatus != "Cancelled")
                            {
                                if (Model.RMCBuss && !string.IsNullOrWhiteSpace(Model.RMCType) && (Model.RMCType.Equals("CARTUS TYPE", StringComparison.InvariantCultureIgnoreCase) || Model.RMCType.Equals("BROOKFIELD TYPE", StringComparison.InvariantCultureIgnoreCase)))
                                {
                                    <div class="row clearfix">
                                        <fieldset class="col-md-12 m-n">
                                            <legend data-toggle="collapse" data-target="#SurveySentToMobile">
                                                <i class="more-less glyphicon glyphicon-plus"></i>
                                                <a class="pull-right" href="javascript:void(0)">Send Survey To Mobile</a>
                                            </legend>
                                            <div class="m-t-sm p-md pad-top-none pad-bot-none panel-collapse collapse CollapsingFieldSet" id="SurveySentToMobile">
                                                @using (Html.BeginForm("SurveyToMobile", "MoveManage", new { Indx = 1, SurveyID = @Model.SurveyID, MoveID = @Model.MoveID, EnqDetId = @Model.EnqDetailID }, FormMethod.Post, new { enctype = "multipart/form-data" }))
                                                {
                                                    @Html.AntiForgeryToken()
                                                    @Html.ValidationSummary(true)
                                                    @Html.HiddenFor(model => model.SurveyID)
                                                    @Html.HiddenFor(model => model.EnqID)
                                                    @Html.HiddenFor(model => model.EnqDetailID)

                                                    @Html.HiddenFor(a => a.IsDTD)
                                                    <div>
                                                        <label for="SurveyerID" class="col-sm-2 control-label">Surveyer Name</label>
                                                        <div class="col-sm-3">
                                                            @Html.DropDownListFor(model => model.SurveyerID, new SelectList((System.Collections.IEnumerable)ViewData["SurveyConductedByList"], "Value", "Text"), "--Select Surveyer--", new { @class = "form-control input-sm clearfix enableselect" })
                                                            @Html.ValidationMessageFor(model => model.SurveyerID, "", new { @class = "text-danger" })
                                                        </div>
                                                    </div>
                                                    //if (Model.ShowSendToMobile == 0)
                                                    {
                                                        <div class="col-sm-2 col-md-2">
                                                            <div class="clearfix">
                                                                <input type="submit" id="btnSendToMobile" name="Save" class="btn btn-primary m-t-sm pull-left  btn-sm filter-custom-margin m-n" value="Send To Mobile" />
                                                            </div>
                                                        </div>
                                                    }
                                                }
                                            </div>
                                        </fieldset>
                                    </div>

                                }
                            }

                            @* end Sent to Mobile *@
                            @*Survey Info*@
                            @using (Html.BeginForm("CreateInfo", "MoveManage", new { Indx = 1, SurveyID = @Model.SurveyID, MoveID = @Model.MoveID, EnqDetId = @Model.EnqDetailID }, FormMethod.Post, new { enctype = "multipart/form-data", @id = "Form_Survey", @name = "Form_Survey" }))
                            {
                                @Html.AntiForgeryToken()
                                Model.Flag = "Survey";
                                @Html.HiddenFor(a => a.MoveJob.ModeID)
                                @Html.HiddenFor(model => model.HoSdEmpID)@Html.HiddenFor(model => model.BrSdEmpID)@Html.HiddenFor(model => model.DestBrSdEmpID)@Html.HiddenFor(model => model.InsurBy)
                                @Html.HiddenFor(a => a.IsDTD)
                                @Html.HiddenFor(a => a.SurveyReport.CSSenttoApproveUser)
                                @Html.HiddenFor(x => x.GPSendForApproval, new { @class = "GPSendForApproval" });
                                @Html.HiddenFor(x => x.GPSendForApprovalUser, new { @class = "GPSendForApprovalUser" });
                                @Html.HiddenFor(x => x.GPPercent, new { @class = "GPPercent" })
                                @Html.HiddenFor(x => x.GPAmount, new { @class = "GPAmount" })
                                @Html.HiddenFor(x => x.GPMasterID, new { @class = "GPMasterID" })
                                @Html.HiddenFor(a => a.IsGPApproved, new { @class = "IsGPApproved" })
                                @Html.HiddenFor(a => a.BaseCurr, new { @class = "BaseCurr" })
                                @Html.ValidationSummary(true)

                                <div class="row clearfix">
                                    @if (Model.Flag == "Survey")
                                    {
                                        <div class="col-sm-3 col-md-3">
                                            <div class="form-group">
                                                <strong>CS Prepared By:</strong> &nbsp;<strong>@Model.SurveyReport.CSCreatedBY</strong>
                                            </div>
                                        </div>
                                        <div class="col-sm-3 col-md-3">
                                            <div class="form-group">
                                                <strong>CS Prepared Date:</strong> &nbsp;<strong>@Model.SurveyReport.CSCreatedDate</strong>
                                            </div>
                                        </div>
                                    }
                                    @if (!Model.HideSurveySave && Model.JobStatus != "Cancelled")
                                    {
                                        <div class="col-sm-6 col-md-6">
                                            <input type="submit" id="btnSaveSurvey" name="Save" class="btn btn-primary m-t-sm pull-right m-r-sm btn-sm filter-custom-margin m-n Showspinner" value="Save Survey" />

                                            @if (Model.SurveyCostList.CostListSaved && Model.CompanyID == 2 && Model.RMCBuss)
                                            {
                                                if (Model.SurveyReport.IsCSSenttoApprove)
                                                {
                                                    <input type="submit" id="btnApproveSurvey" name="Save" class="btn btn-primary m-t-sm pull-right m-r-sm btn-sm filter-custom-margin m-n Showspinner btnApprove" value="@Model.SurveyReport.ApproveTitle" />
                                                }
                                                else
                                                {
                                                    <input type="button" id="btnSurveySendToApprove" name="Save" class="btn btn-primary m-t-sm pull-right m-r-sm btn-sm filter-custom-margin m-n btnApprove"
                                                           value="Send For Approval" />
                                                }
                                            }
                                        </div>
                                    }
                                    @if (Model.SurveyReport.IsApprove && Model.CompanyID == 2 && Model.RMCBuss)
                                    {
                                        <div class="col-sm-3 col-md-3">
                                            <div class="form-group">
                                                <strong>CS Approved By:</strong> &nbsp;<strong>@Model.SurveyReport.CSApprovedBY</strong>
                                            </div>
                                        </div>
                                        <div class="col-sm-3 col-md-3">
                                            <div class="form-group">
                                                <strong>CS Approved Date:</strong> &nbsp;<strong>@Model.SurveyReport.CSApprovedDate</strong>
                                            </div>
                                        </div>
                                    }
                                    <fieldset class="col-md-12">
                                        <legend>Survey Details</legend>
                                        <div class="m-t-sm">
                                            @Html.Partial("_DetailPartial", Model)
                                        </div>
                                    </fieldset>
                                    <fieldset class="col-md-12 m-n">
                                        <legend data-toggle="collapse" data-target="#SurveySODetails">
                                            <i class="more-less glyphicon glyphicon-plus"></i>
                                            <a class="pull-right" href="javascript:void(0)">Survey Service Order</a>
                                        </legend>
                                        <div class="m-t-sm p-md pad-top-none pad-bot-none panel-collapse collapse CollapsingFieldSet" id="SurveySODetails">
                                            @Html.Partial("_SOPartial", Model)
                                        </div>
                                    </fieldset>
                                    <fieldset class="col-md-12 m-n">
                                        <legend data-toggle="collapse" data-target="#SurveyPackingReport">
                                            <i class="more-less glyphicon glyphicon-plus"></i>
                                            <a class="pull-right" href="javascript:void(0)">Survey Report</a>
                                        </legend>
                                        <div class="m-t-sm p-md pad-top-none pad-bot-none panel-collapse collapse CollapsingFieldSet" id="SurveyPackingReport">
                                            @Html.Partial("_InfoPartial", Model)
                                        </div>
                                    </fieldset>
                                    @if (Model.SurveyCostList.CostListSaved)
                                    {
                                        <fieldset class="col-md-12 m-n">
                                            <legend data-toggle="collapse" data-target="#SurveyCostDetails" class="SurveyCostDetails">
                                                <i class="more-less glyphicon glyphicon-plus"></i>
                                                <a class="pull-right" href="javascript:void(0)">Survey Cost</a>
                                            </legend>
                                            <div class="m-t-sm p-md pad-top-none pad-bot-none panel-collapse collapse CollapsingFieldSet" id="SurveyCostDetails">
                                                @Html.Partial("_CostPartial", Model)
                                            </div>
                                        </fieldset>
                                    }
                                </div>

                            }
                        </div>
                        <div id="mdlGPPApproval" class="modal fade" data-backdrop="static" data-keyboard="false">
                            <div class="modal-dialog">
                                <div class="modal-content  p-xl">

                                    <div class="row">
                                        <div class="col-sm-6">
                                            <label><label>Select User for Approval</label></label>
                                            @Html.DropDownList("SendtoGPApprovalList", new SelectList((System.Collections.IEnumerable)ViewData["GPApprovalUserList"], "Value", "Text"), "--Select Approval User--", new { @class = "form-control" })
                                        </div>
                                        <div class="col-sm-6 ">
                                            <input type="button" name="Save" value="Proceed for Approval" class="btn btn-sm btn-primary filter-custom-margin" id="btnSendToGPApprove" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        //Packing Info
                        <div role="tabpanel" class="@(Model.TabIndex == 2 ? " tab-pane active" : "tab-pane" )" id="PackingInfo">
                            @using (Html.BeginForm("CreateInfo", "MoveManage", new { Indx = 2, SurveyID = @Model.SurveyID, MoveID = @Model.MoveID }, FormMethod.Post, new { enctype = "multipart/form-data", @id = "Form_Packing", @name = "Form_Packing" }))
                            {
                                @Html.AntiForgeryToken()
                                Model.Flag = "Packing";
                                @*@Html.HiddenFor(a => a.InvoiceID)*@
                                @Html.HiddenFor(a => a.MoveJob.ModeID)
                                @Html.HiddenFor(model => model.HoSdEmpID)@Html.HiddenFor(model => model.BrSdEmpID)@Html.HiddenFor(model => model.DestBrSdEmpID)@Html.HiddenFor(model => model.InsurBy)
                                @Html.HiddenFor(a => a.IsDTD)
                                @Html.HiddenFor(a => a.PackingReport.CSSenttoApproveUser)
                                @Html.HiddenFor(x => x.GPSendForApproval, new { @class = "GPSendForApproval" });
                                @Html.HiddenFor(x => x.GPSendForApprovalUser, new { @class = "GPSendForApprovalUser" });
                                @Html.HiddenFor(x => x.GPPercent, new { @class = "GPPercent" })
                                @Html.HiddenFor(x => x.GPAmount, new { @class = "GPAmount" })
                                @Html.HiddenFor(x => x.GPMasterID, new { @class = "GPMasterID" })
                                @Html.HiddenFor(a => a.IsGPApproved, new { @class = "IsGPApproved" })
                                @Html.HiddenFor(a => a.BaseCurr, new { @class = "BaseCurr" })
                                //@Html.ValidationSummary(true)
                                <div id="mdlBillPreparePacking" class="modal fade" data-backdrop="static" data-keyboard="false">
                                    <div class="modal-dialog">
                                        <div class="modal-content  p-xl">

                                            <div class="row">
                                                <div class="col-sm-6">
                                                    <label>Invoices</label>
                                                    @Html.DropDownList("pkgInvoiceList", new List<SelectListItem>(), new { @class = "form-control InvoiceList" })
                                                </div>
                                                <div class="col-sm-6 ">
                                                    <input type="submit" name="Save" value="Proceed" class="btn btn-sm btn-primary filter-custom-margin" id="btnProceed" form="Form_Packing" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row clearfix">
                                    @if (Model.Flag == "Packing")
                                    {
                                        <div class="col-sm-3 col-md-3">
                                            <div class="form-group">
                                                <strong>CS Prepared By:</strong> &nbsp;<strong>@Model.PackingReport.CSCreatedBY</strong>
                                            </div>
                                        </div>
                                        <div class="col-sm-3 col-md-3">
                                            <div class="form-group">
                                                <strong>CS Prepared Date:</strong> &nbsp;<strong>@Model.PackingReport.CSCreatedDate</strong>
                                            </div>
                                        </div>
                                    }
                                    @if (Model.JobStatus != "Cancelled")
                                    {
                                        <div class="col-sm-6 col-md-6">
                                            <input type="submit" id="btnSavePacking" name="Save" class="btn btn-primary m-t-sm pull-right m-r-sm m-l-sm btn-sm filter-custom-margin m-n Showspinner" value="Save Packing" />
                                            <a href="@Url.Action("GetJobReportForMove", "JobReport", new { Key = CommonService.GenerateQueryString(param, new string[] { Model.MoveID.ToString(), "1", "0" }) })" class="btnView btn btn-sm filter-custom-margin m-r-sm m-l-sm m-n btn-primary  pull-right" target="_blank" title="View PJR">Packing Job Report</a>                                         @*<input type="button" id="btnBillPreparePacking" name="Save" class="btn btn-primary m-t-sm pull-right m-r-sm btn-sm filter-custom-margin m-n BillPreparePacking" value="Prepare Bill" />*@

                                            @if (Model.PackingCostList.CostListSaved && (Model.RMCType == "Other Type" || Model.SurveyReport.IsApprove) && Model.CompanyID == 2) ///@*&& Model.RMCBuss*@
                                            {
                                                if (Model.PackingReport.IsCSSenttoApprove)
                                                {
                                                    <input type="submit" id="btnApprovePacking" name="Save" class="btn btn-primary m-t-sm pull-right m-r-sm btn-sm filter-custom-margin m-n Showspinner btnApprove" value="@Model.PackingReport.ApproveTitle" />
                                                }
                                                else
                                                {
                                                    <input type="button" id="btnPackSendToApprove" name="Save" class="btn btn-primary m-t-sm pull-right m-r-sm btn-sm filter-custom-margin m-n btnApprove"
                                                           value="Send For Approval" />
                                                }
                                            }
                                        </div>
                                    }
                                    @if (Model.PackingReport.IsApprove && Model.CompanyID == 2)
                                    {
                                        <div class="col-sm-3 col-md-3">
                                            <div class="form-group">
                                                <strong>CS Approved By:</strong> &nbsp;<strong>@Model.PackingReport.CSApprovedBY</strong>
                                            </div>
                                        </div>
                                        <div class="col-sm-3 col-md-3">
                                            <div class="form-group">
                                                <strong>CS Approved Date:</strong> &nbsp;<strong>@Model.PackingReport.CSApprovedDate</strong>
                                            </div>
                                        </div>
                                    }
                                    <fieldset class="col-md-12">
                                        <legend>Packing Details</legend>
                                        <div class="m-t-sm">
                                            @Html.Partial("_DetailPartial", Model)
                                        </div>
                                    </fieldset>
                                    <fieldset class="col-md-12 m-n">
                                        <legend data-toggle="collapse" data-target="#SODetails">
                                            <i class="more-less glyphicon glyphicon-plus"></i>
                                            <a class="pull-right" href="javascript:void(0)">Packing Service Order</a>
                                        </legend>
                                        <div class="m-t-sm p-md pad-top-none pad-bot-none panel-collapse collapse CollapsingFieldSet" id="SODetails">
                                            @Html.Partial("_SOPartial", Model)
                                        </div>
                                    </fieldset>
                                    <fieldset class="col-md-12 m-n">
                                        <legend data-toggle="collapse" data-target="#PackingReport">
                                            <i class="more-less glyphicon glyphicon-minus"></i>
                                            <a class="pull-right" href="javascript:void(0)">Packing Report</a>
                                        </legend>
                                        <div class="m-t-sm p-md pad-top-none pad-bot-none panel-collapse collapse CollapsingFieldSet" id="PackingReport">
                                            @Html.Partial("_InfoPartial", Model)
                                        </div>
                                    </fieldset>
                                    @if (Model.PackingCostList.CostListSaved)
                                    {
                                        <fieldset class="col-md-12 m-n">
                                            <legend data-toggle="collapse" data-target="#CostDetails">
                                                <i class="more-less glyphicon glyphicon-plus"></i>
                                                <a class="pull-right" href="javascript:void(0)">Packing Cost</a>
                                            </legend>
                                            <div class="m-t-sm p-md pad-top-none pad-bot-none panel-collapse collapse CollapsingFieldSet" id="CostDetails">
                                                @Html.Partial("_CostPartial", Model)
                                            </div>
                                        </fieldset>
                                    }

                                </div>
                            }
                        </div>

                        //Freight Info
                        <div role="tabpanel" class="@(Model.TabIndex == 3 ? " tab-pane active" : "tab-pane" )" id="FreightInfo">
                            @using (Html.BeginForm("CreateInfo", "MoveManage", new { Indx = 3, SurveyID = @Model.SurveyID, MoveID = @Model.MoveID }, FormMethod.Post, new { enctype = "multipart/form-data" }))
                            {
                                @Html.AntiForgeryToken()
                                Model.Flag = "Freight";
                                @Html.HiddenFor(a => a.MoveJob.ModeID)
                                @Html.HiddenFor(model => model.HoSdEmpID)@Html.HiddenFor(model => model.BrSdEmpID)@Html.HiddenFor(model => model.DestBrSdEmpID)@Html.HiddenFor(model => model.InsurBy)
                                @Html.HiddenFor(a => a.IsDTD)

                                @Html.ValidationSummary(true)

                                <div class="row clearfix">
                                    @if (Model.JobStatus != "Cancelled")
                                    {
                                        <div class="col-sm-12 col-md-12">
                                            <input type="submit" id="btnSaveFreight" name="Save" class="btn btn-primary m-t-sm pull-right m-r-sm btn-sm filter-custom-margin m-n" value="Save Freight" />
                                        </div>
                                    }
                                    <fieldset class="col-md-12 m-n">
                                        <legend>Freight Details</legend>
                                        <div class="m-t-sm">
                                            @Html.Partial("_DetailPartial", Model)
                                        </div>
                                    </fieldset>
                                    <fieldset class="col-md-12 m-n hide">
                                        <legend data-toggle="collapse" data-target="#FrtSODetails">
                                            <i class="more-less glyphicon glyphicon-plus"></i>
                                            <a class="pull-right" href="javascript:void(0)">Freight Service Order</a>
                                        </legend>
                                        <div class="m-t-sm p-md pad-top-none pad-bot-none panel-collapse collapse CollapsingFieldSet" id="FrtSODetails">
                                            @Html.Partial("_SOPartial", Model)
                                        </div>
                                    </fieldset>
                                    <fieldset class="col-md-12 m-n">
                                        <legend data-toggle="collapse" data-target="#FrtReport">
                                            <i class="more-less glyphicon glyphicon-minus"></i>
                                            <a class="pull-right" href="javascript:void(0)">Transit Details</a>
                                        </legend>
                                        <div class="m-t-sm p-md pad-top-none pad-bot-none panel-collapse CollapsingFieldSet" id="FrtReport">
                                            <div class="row">
                                                <a href="@Url.Action("Create", "DMS", new { id = @Model.MoveID, Type = "Transhiment" })" class="btn btn-primary m-r-sm btn-sm pull-right" data-toggle="modal" data-target="#mdlDMS" data-cache="false" title="DMS"><i class="glyphicon glyphicon-folder-open m-r-xs"></i>DMS</a>
                                                @*<a href="javascript:void(0);" data-id="@Model.MoveID" data-type="Transhiment" class="btn btn-primary btn-sm m-r-sm pull-right" title="DMS" onclick="OnBtnUpload(this)"><i class="glyphicon glyphicon-folder-open m-r-xs"></i>DMS</a>*@
                                            </div>

                                            @Html.Partial("_InfoPartial", Model)
                                        </div>
                                    </fieldset>
                                    <fieldset class="col-md-12 m-n hide">
                                        <legend data-toggle="collapse" data-target="#FrtCostDetails">
                                            <i class="more-less glyphicon glyphicon-plus"></i>
                                            <a class="pull-right" href="javascript:void(0)">Freight Cost</a>
                                        </legend>
                                        <div class="m-t-sm p-md pad-top-none pad-bot-none panel-collapse collapse CollapsingFieldSet" id="FrtCostDetails">
                                            @Html.Partial("_CostPartial", Model)
                                        </div>
                                    </fieldset>
                                    <fieldset class="col-md-12 m-n">
                                        <legend data-toggle="collapse" data-target="#FrtInvoice">
                                            <i class="more-less glyphicon glyphicon-minus"></i>
                                            <a class="pull-right" href="javascript:void(0)">Transit Invoice</a>
                                        </legend>
                                        <div class="m-t-sm p-md pad-top-none pad-bot-none panel-collapse CollapsingFieldSet" id="FrtInvoice">
                                            @Html.Partial("_TranshipInvoicePartial", Model)
                                        </div>
                                    </fieldset>
                                </div>
                            }
                        </div>

                        //Delivery Info
                        <div role="tabpanel" class="@(Model.TabIndex == 4 ? " tab-pane active" : "tab-pane" )" id="DeliveryInfo">
                            @using (Html.BeginForm("CreateInfo", "MoveManage", new { Indx = 4, SurveyID = @Model.SurveyID, MoveID = @Model.MoveID }, FormMethod.Post, new { enctype = "multipart/form-data", @id = "Form_Delivery", @name = "Form_Delivery" }))
                            {
                                @Html.AntiForgeryToken()
                                Model.Flag = "Delivery";
                                @Html.HiddenFor(a => a.InvoiceID)
                                @Html.HiddenFor(a => a.CSSenttoApproveUser)
                                @Html.HiddenFor(a => a.MoveJob.ModeID)
                                @Html.HiddenFor(a => a.IsDTD)
                                @Html.HiddenFor(x => x.GPSendForApproval, new { @class = "GPSendForApproval" });
                                @Html.HiddenFor(x => x.GPSendForApprovalUser, new { @class = "GPSendForApprovalUser" });
                                @Html.HiddenFor(x => x.GPPercent, new { @class = "GPPercent" })
                                @Html.HiddenFor(x => x.GPAmount, new { @class = "GPAmount" })
                                @Html.HiddenFor(x => x.GPMasterID, new { @class = "GPMasterID" })
                                @Html.HiddenFor(a => a.IsGPApproved, new { @class = "IsGPApproved" })
                                @Html.HiddenFor(a => a.BaseCurr, new { @class = "BaseCurr" })
                                @Html.HiddenFor(model => model.HoSdEmpID)@Html.HiddenFor(model => model.BrSdEmpID)@Html.HiddenFor(model => model.DestBrSdEmpID)@Html.HiddenFor(model => model.InsurBy)
                                @Html.ValidationSummary(true)
                                <div id="mdlBillPrepareDelivery" class="modal fade" data-backdrop="static" data-keyboard="false">
                                    <div class="modal-dialog">
                                        <div class="modal-content  p-xl pad-top-none">
                                            <div class="modal-header">
                                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                    <span aria-hidden="true">&times;</span>
                                                </button>
                                            </div>
                                            <div class="row">
                                                <div class="col-sm-6">

                                                    <label>Invoices</label>
                                                    @Html.DropDownList("pkgInvoiceList", new List<SelectListItem>(), new { @class = "form-control InvoiceList" })
                                                </div>
                                                <div class="col-sm-6 ">
                                                    <input type="submit" name="Save" value="Proceed" class="btn btn-sm btn-primary filter-custom-margin" id="btnProceed" form="Form_Delivery" />
                                                </div>
                                                <div class="col-sm-6 ">
                                                    <input type="button" name="ShowStatementCharges" value="Show" class="btn btn-sm btn-primary filter-custom-margin" id="ShowStatementCharges" onclick="ShowStatementCharges()" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div id="mdlSendtoApproval" class="modal fade" data-backdrop="static" data-keyboard="false">
                                    <div class="modal-dialog">
                                        <div class="modal-header">
                                            <button type="button" class="close danger" data-dismiss="modal" aria-label="Close" style="background: red; opacity: unset; width:50px;color:white;">
                                                <span aria-hidden="true">&times;</span>
                                            </button>
                                        </div>
                                        <div class="modal-content  p-xl">
                                            <div class="row">
                                                <div class="col-sm-6">
                                                    <label>Select User for Approval</label>
                                                    @*@Html.DropDownList("pkgInvoiceList", new List<SelectListItem>(), new { @class = "form-control InvoiceList" })*@
                                                    @if (ApprovalCount > 1)
                                                    {
                                                        @Html.DropDownList("SendtoApprovalList", new SelectList((System.Collections.IEnumerable)ViewData["ApprovalUserList"], "Value", "Text"), "--Select Approval User--", new { @class = "form-control" })
                                                    }
                                                    else
                                                    {
                                                        @Html.DropDownList("SendtoApprovalList", new SelectList((System.Collections.IEnumerable)ViewData["ApprovalUserList"], "Value", "Text"), new { @class = "form-control" })
                                                    }

                                                </div>
                                                <div class="col-sm-6 ">
                                                    <input type="submit" name="Save" value="Proceed for Approval" class="btn btn-sm btn-primary filter-custom-margin" id="btnSendToCSApprove" form="Form_Delivery" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row clearfix">
                                    <div class="col-sm-3 col-md-3">
                                        <div class="form-group">
                                            <strong>CS Prepared By:</strong> &nbsp;<strong>@Model.DeliveryReport.CSCreatedBY</strong>
                                        </div>
                                    </div>
                                    <div class="col-sm-3 col-md-3">
                                        <div class="form-group">
                                            <strong>CS Prepared Date:</strong> &nbsp;<strong>@Model.DeliveryReport.CSCreatedDate</strong>
                                        </div>
                                    </div>


                                    @if (Model.JobStatus != "Cancelled")
                                    {

                                        <div class="col-sm-6 col-md-6">

                                            <input type="submit" id="btnSaveDelivery" name="Save" class="btn btn-primary m-t-sm pull-right m-r-sm btn-sm filter-custom-margin m-n Showspinner" value="Save Delivery" />
                                            <a href="@Url.Action("GetJobReportForMove", "JobReport", new { Key = CommonService.GenerateQueryString(param, new string[] { Model.MoveID.ToString(), "3", "0" }) })" class="btnView btn btn-sm filter-custom-margin m-r-sm m-l-sm m-n btn-primary  pull-right" target="_blank" title="View DJR">Delivery Job Report</a>
                                            <input type="button" id="btnStatementCharges" name="btnStatementCharges" class="btn btn-primary m-t-sm pull-right m-r-sm btn-sm filter-custom-margin m-n btnStatementCharges" value="Statement Of Charges" />
                                            @if (Model.IsDestApprove)
                                            {
                                                <input type="button" id="btnBillPrepareDelivery" name="Save" class="btn btn-primary m-t-sm pull-right m-r-sm btn-sm filter-custom-margin m-n BillPrepareDelivery" value="Prepare Bill" disabled />
                                            }
                                            @{
                                                bool IsApproveVisible = !Model.PackingCostList.CostListSaved || (Model.PackingCostList.CostListSaved && Model.PackingReport.IsApprove);
                                            }
                                            @if (((Model.RMCType == "Other Type" || Model.SurveyReport.IsApprove) && Model.PackingReport.IsApprove && Model.CompanyID == 2 && Model.RMCBuss) || Model.CompanyID != 2 || (Model.CompanyID == 2 && !Model.RMCBuss && IsApproveVisible))
                                            {

                                                if (Model.DeliveryCostList.CostListSaved)
                                                {
                                                    if (Model.IsCSSenttoApprove)
                                                    {
                                                        <input type="submit" id="btnApproveDelivery" name="Save" class="btn btn-primary m-t-sm pull-right m-r-sm btn-sm filter-custom-margin m-n Showspinner btnApprove" value="@Model.DestApprove" />
                                                    }
                                                    else
                                                    {
                                                        <input type="button" id="btnSendToApprove" name="Save" class="btn btn-primary m-t-sm pull-right m-r-sm btn-sm filter-custom-margin m-n btnApprove"
                                                               value="Send For Approval" />
                                                    }
                                                }
                                            }


                                        </div>
                                    }
                                    @if (Model.IsDestApprove)
                                    {
                                        <div class="col-sm-3 col-md-3">
                                            <div class="form-group">
                                                <strong>CS Approved By:</strong> &nbsp;<strong>@Model.DeliveryReport.CSApprovedBY</strong>
                                            </div>
                                        </div>
                                        <div class="col-sm-3 col-md-3">
                                            <div class="form-group">
                                                <strong>CS Approved Date:</strong> &nbsp;<strong>@Model.DeliveryReport.CSApprovedDate</strong>
                                            </div>
                                        </div>
                                    }
                                    <fieldset class="col-md-12 m-n">
                                        <legend>Delivery Details</legend>
                                        <div class="m-t-sm">
                                            @Html.Partial("_DetailPartial", Model)
                                        </div>
                                    </fieldset>
                                    @if (Model.RMCBuss)
                                    {
                                        <fieldset class="col-md-12 m-n">
                                            <legend data-toggle="collapse" data-target="#ServiceEvaluation">
                                                <i class="more-less glyphicon glyphicon-plus"></i>
                                                <a class="pull-right" href="javascript:void(0)">RMC Service Evaluation</a>
                                            </legend>
                                            <div class="m-t-sm p-md pad-top-none pad-bot-none panel-collapse collapse CollapsingFieldSet" id="ServiceEvaluation">
                                                @Html.Partial("_ServiceEvaluationPartial", Model)
                                            </div>
                                        </fieldset>
                                    }


                                    <fieldset class="col-md-12 m-n">
                                        <legend data-toggle="collapse" data-target="#DelSODetails">
                                            <i class="more-less glyphicon glyphicon-plus"></i>
                                            <a class="pull-right" href="javascript:void(0)">Delivery Service Order</a>
                                        </legend>
                                        <div class="m-t-sm p-md pad-top-none pad-bot-none panel-collapse collapse CollapsingFieldSet" id="DelSODetails">
                                            @Html.Partial("_SOPartial", Model)
                                        </div>
                                    </fieldset>
                                    <fieldset class="col-md-12 m-n">
                                        <legend data-toggle="collapse" data-target="#DelReport">
                                            <i class="more-less glyphicon glyphicon-minus"></i>
                                            <a class="pull-right" href="javascript:void(0)">Delivery Report</a>
                                        </legend>
                                        <div class="m-t-sm p-md pad-top-none pad-bot-none panel-collapse collapse CollapsingFieldSet" id="DelReport">
                                            @Html.Partial("_InfoPartial", Model)
                                        </div>
                                    </fieldset>
                                    @if (Model.DeliveryCostList.CostListSaved)
                                    {
                                        <fieldset class="col-md-12 m-n">
                                            <legend data-toggle="collapse" data-target="#DelCostDetails">
                                                <i class="more-less glyphicon glyphicon-plus"></i>
                                                <a class="pull-right" href="javascript:void(0)">Delivery Cost</a>
                                            </legend>
                                            <div class="m-t-sm p-md pad-top-none pad-bot-none panel-collapse collapse CollapsingFieldSet" id="DelCostDetails">
                                                @Html.Partial("_CostPartial", Model)
                                            </div>
                                        </fieldset>
                                    }
                                </div>

                            }
                        </div>

                        //Cost Sheet
                        <div role="tabpanel" class="@(Model.TabIndex == 5 ? " tab-pane active" : "tab-pane" )" id="Cost">
                            <div class="m-t-sm">
                                <div class="row clearfix">
                                    <div class="col-sm-2 col-md-2">

                                        <strong>Prepared By: @Model.DeliveryReport.CSCreatedBY</strong>
                                    </div>
                                    <div class="col-sm-3 col-md-3">
                                        <strong>Prepared Date: @Model.DeliveryReport.CSCreatedDate</strong>
                                    </div>
                                    <div class="col-sm-2 col-md-2">
                                        <strong>Approved By: @Model.DeliveryReport.CSApprovedBY</strong>
                                    </div>
                                    <div class="col-sm-3 col-md-3">
                                        <strong>Approved Date: @Model.DeliveryReport.CSApprovedDate</strong>
                                    </div>
                                    <div class="col-sm-1 col-md-1">
                                        <input type="button" id="btnExportCS" name="Export" class="btn btn-primary m-t-sm pull-right m-r-sm btn-sm filter-custom-margin m-n" value="Export CostSheet" />
                                    </div>
                                </div>
                                @Html.Partial("_CostSheetPartial", Model)
                            </div>
                        </div>

                        //Email
                        <div role="tabpanel" class="@(Model.TabIndex == 6 ? " tab-pane active" : "tab-pane" )" id="EmailInfo">
                            @using (Html.BeginForm("CreateInfo", "MoveManage", new { Indx = 6, SurveyID = @Model.SurveyID, MoveID = @Model.MoveID }, FormMethod.Post, new { enctype = "multipart/form-data" }))
                            {
                                @Html.AntiForgeryToken()
                                Model.Flag = "Freight";
                                @Html.ValidationSummary(true)
                                @Html.HiddenFor(model => model.HoSdEmpID)@Html.HiddenFor(model => model.BrSdEmpID)@Html.HiddenFor(model => model.DestBrSdEmpID)@Html.HiddenFor(model => model.InsurBy)
                                @Html.HiddenFor(a => a.IsDTD)
                                <div class="m-t-sm">
                                    @Html.Partial("_EmailInfo", Model)
                                </div>
                            }
                        </div>

                        // Document Upload
                        <div role="tabpanel" class="@(Model.TabIndex == 7 ? " tab-pane active" : "tab-pane" )" id="DocUpload">
                            <div class="m-t-sm">
                                @Html.Partial("_DocUploadPartial", Model)
                            </div>
                        </div>
                        <div role="tabpanel" class="@(Model.TabIndex == 8 ? " tab-pane active" : "tab-pane" )" id="AgentFeedback">
                            <div class="m-t-sm">
                                @Html.Partial("_VendorEvaluation", Model)
                            </div>
                        </div>

                        //ShipperFeedback
                        <div role="tabpanel" class="@(Model.TabIndex == 9 ? " tab-pane active" : "tab-pane" )" id="ShipperFeedback">
                            <div class="m-t-sm">
                                @Html.Partial("_ShipperFeedbackPartial", Model)
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
<!--DMS Model-->
<div id="mdlDMS" class="modal modal-wide fade" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">

        </div>
    </div>
</div>
@section Scripts{
    <script src="~/Scripts/MoveManage/jquery.dirty.js"></script>
    <script type="text/javascript">
        //$('#SODetails,#CostDetails,#InfoDetails').on('hidden.bs.collapse', toggleIcon);
        //$('#SODetails,#CostDetails,#InfoDetails').on('shown.bs.collapse', toggleIcon);



        //$('.summernote').summernote({
        //    height: 10,                 // set editor height
        //    minHeight: null,             // set minimum height of editor
        //    maxHeight: null,             // set maximum height of editor

        //    focus: true,
        //    toolbar: []
        //});

        function RegisterPopoverEvent() {
            ////
            $('.btnCostDetails').popover({
                title: 'Cost Details',
                //container: 'body',

                placement: 'top',
                html: true,
                //trigger: 'hover',
                content: function () {
                    //alert("ss");
                    ////
                    var table_row = $(this).closest('tr');
                    var Vol = $(table_row).find(".WtVol").html() == undefined ? 0 : $(table_row).find(".WtVol").html();
                    var Per = $(table_row).find(".Per").html() == undefined ? 0 : $(table_row).find(".Per").html();
                    var Rate = $(table_row).find(".Rate").html() == undefined ? 0 : $(table_row).find(".Rate").html();
                    var RevRate = $(table_row).find(".RevRate").html() == undefined ? 0 : $(table_row).find(".RevRate").html();
                    var Unit = $(table_row).find(".Unit").html() == undefined ? 0 : $(table_row).find('.Unit').val();
                    var RateCurr = $(table_row).find(".RateCurr").html();

                    var RevRateCurr = '@Model.CompanyID' == '2' ? $(table_row).find(".RevRateCurr").html() : $(table_row).find(".RateCurr").html();
                    var popoverid = $(this).attr('data-popover-content');
                    var popoverhtml = '<div><b>Wt. Unit : </b>' + Unit +
                        '</div><div><b>Per :</b> ' + Per +
                        '</div><div><b>Vol :</b> ' + Vol +
                        '</div><div><b>Entered Cost</b> : ' + Rate + ' ' + RateCurr +
                        '</div> <div> <b>Entered Revenue</b> : ' + RevRate + ' ' + RevRateCurr + '</div >';

                    $(popoverid).html(popoverhtml);
                    return $(popoverid).html();
                }
                //content: function () {
                //    var clone = $($(this).closest('#divInstructList').find($(this).attr('data-popover-content'))).clone(true).removeClass('hide');
                //    return clone;
                //}
            });
        }



        $('.BillPreparePacking,.BillPrepareDelivery,.btnStatementCharges').on('click', function (e) {
            var control = $(this);
            var controlid = $(this).attr('id');
            var IsStatement = controlid == 'btnStatementCharges';
            var param = "MoveID=@Model.MoveID&IsStatement=" + IsStatement;
            @*var url ="@Url.Action("GetInvoice", "MoveManage")", { MoveID: '@Model.MoveID', IsStatement =  }"*@
            var url = "@Url.Action("GetInvoice", "MoveManage")" + "?" + param;
            BillPrepared(control, controlid, IsStatement, url);
            });



        $('.Tablist').click(function () {

            var tabcontrol = $(this).attr('aria-controls');
            var data = [];
            if (tabcontrol == 'SurveyInfo') {

                $('#SurveyInfo').find("#MoveSOtable > TBODY > tr").each(function () {
                    ////
                    var CostHeadID = $(this).find('.tdNone .TblCostHead').val();
                    var RateCompID = $(this).find('.tdNone .TblRateComp').val();
                    var Detail = $(this).find(".Remark :input").val();
                    var Volume = $(this).find(".Volume :input").val();
                    var ExpCost = $(this).find(".ExpCost :input").val();
                    var UnitId = $(this).find('.tdNone .TblCostHead').val();
                    var Isactive = $(this).find('.tdNone .TblIsActive').val();
                    var SurveyId = $(this).find('.tdNone .TblSurvey').val();
                    var SurveyDetailId = $(this).find('.tdNone .TblSurveyDetail').val();
                    var suveyerId = $('#SurveyerID').length > 0 ? $('#SurveyerID').val() : null;


                    var alldata = {
                        'SurveyDetailsID': SurveyDetailId,
                        'SurveyID': SurveyId,
                        'SurveyerID': suveyerId,
                        'RateCompID': parseInt(RateCompID),
                        'CostHeadID': parseInt(CostHeadID),
                        'RemarksOnCostHead': Detail,
                        'WtUnitID': parseInt(UnitId),
                        'WtVolume': parseFloat(Volume),
                        'ExpectedCost': parseFloat(ExpCost),
                        'Isactive': Isactive
                    }

                    data.push(alldata);
                });
                $('#SurveyInfo').find('#HFSOList').val(JSON.stringify({ 'SurveyDetail': data }));

                data = [];
                //$('#GPTotalRevenue').val(0); $('#GPTotalCost').val(0);
                $('#SurveyInfo').find("#MoveCosttable > TBODY > tr").each(function () {
                    ////
                    //debugger;
                    var CostHeadID = $(this).find('.tdNone .TblCostHead').val();
                    var RateCompID = $(this).find('.tdNone .TblRateComp').val();
                    var BaseCurrId = $(this).find('.tdNone .TblBaseCurr').val();
                    var RateCurrId = $(this).find('.tdNone .TblRateCurr').val();
                    var ConversionRate = $(this).find(".ConversionRate :input").val();
                    var RevRateCurrId = '@Model.CompanyID' == '2' ? $(this).find('.tdNone .TblRevRateCurr').val() : $(this).find('.tdNone .TblRateCurr').val();
                    var RevConversionRate = '@Model.CompanyID' == '2' ? $(this).find(".RevConversionRate :input").val() : $(this).find(".ConversionRate :input").val();
                    var CostValue = $(this).find(".CostValue :input").val();
                    var BaseRevenueValue = '@Brookfieldtype.ToString()' == "True" ? $(this).find(".BaseRevenueValue :input").val() : $(this).find(".RevenueValue :input").val();
                    var RevenueValue = $(this).find(".RevenueValue :input").val();
                    //$('#GPTotalRevenue').val(parseFloat(BaseRevenueValue) + parseFloat($('#GPTotalRevenue').val()));
                    //$('#GPTotalCost').val(parseFloat(CostValue) + parseFloat($('#GPTotalCost').val()));
                    var Volume = $(this).find(".WtVol").val();
                    var ExpCost = $(this).find(".ExpCost :input").val();
                    var UnitId = $(this).find('.tdNone .TblCostHead').val();
                    var Isactive = $(this).find('.tdNone .TblIsActive').val();
                    var alldata = {
                        'MoveCompID': parseInt(RateCompID),
                        'CostHeadID': parseInt(CostHeadID),
                        'BaseCurrID': parseInt(BaseCurrId),
                        'RateCurrID': parseInt(RateCurrId),
                        'ConversionRate': parseFloat(ConversionRate),
                        'RevRateCurrID': parseInt(RevRateCurrId),
                        'RevConversionRate': parseFloat(RevConversionRate),
                        'CostValue': parseFloat(CostValue),
                        'BaseRev': parseFloat(BaseRevenueValue),
                        'RevenueValue': parseFloat(RevenueValue),
                        'Wt_Vol_No': parseFloat(Volume),
                        'Isactive': Isactive
                    }

                    data.push(alldata);
                });
                $('#SurveyInfo').find('#HFCostList').val(JSON.stringify({ 'CostHeadwiseDetail': data }));
            }
            //if (tabcontrol == 'PackingInfo') {
            else {
                $('#' + tabcontrol).find("#MoveSOtable > TBODY > tr").each(function () {
                    ////
                    var CostHeadID = $(this).find('.tdNone .TblCostHead').val();
                    var RateCompID = $(this).find('.tdNone .TblRateComp').val();
                    var Detail = $(this).find(".Remark :input").val();
                    var Volume = $(this).find(".Volume :input").val();
                    //var ExpCost = $(this).find(".ExpCost :input").val();
                    var UnitId = $(this).find('.tdNone .TblCostHead').val();
                    var Isactive = $(this).find('.tdNone .TblIsActive').val();
                    var alldata = {
                        'MoveCompID': parseInt(RateCompID),
                        'CostHeadID': parseInt(CostHeadID),
                        'ServOrderRemarks': Detail,
                        'WtUnitID': parseInt(UnitId),
                        'WtVolume': parseFloat(Volume),
                        //'ExpectedCost': parseFloat(ExpCost),
                        'Isactive': Isactive
                    }

                    data.push(alldata);
                });
                $('#' + tabcontrol).find('#HFSOList').val(JSON.stringify({ 'CostHeadwiseDetail': data }));

                data = [];
                //$('#GPTotalRevenue').val(0); $('#GPTotalCost').val(0);
                $('#' + tabcontrol).find("#MoveCosttable > TBODY > tr").each(function () {
                    ////
                    //debugger;
                        var CostHeadID = $(this).find('.tdNone .TblCostHead').val();
                        var RateCompID = $(this).find('.tdNone .TblRateComp').val();
                        var BaseCurrId = $(this).find('.tdNone .TblBaseCurr').val();
                        var RateCurrId = $(this).find('.tdNone .TblRateCurr').val();
                        var RevRateCurrId = '@Model.CompanyID' == '2' ? $(this).find('.tdNone .TblRevRateCurr').val() : $(this).find('.tdNone .TblRateCurr').val();
                        var ConversionRate = $(this).find(".ConversionRate :input").val();
                        var RevConversionRate = '@Model.CompanyID' == '2' ? $(this).find(".RevConversionRate :input").val() : $(this).find(".ConversionRate :input").val();
                        var CostValue = $(this).find(".CostValue :input").val();
                        var BaseRevenueValue = '@Brookfieldtype.ToString()' == "True" ? $(this).find(".BaseRevenueValue :input").val() : $(this).find(".RevenueValue :input").val();
                        var RevenueValue = $(this).find(".RevenueValue :input").val();

                    //$('#GPTotalRevenue').val(parseFloat(BaseRevenueValue) + parseFloat($('#GPTotalRevenue').val()));
                    //$('#GPTotalCost').val(parseFloat(CostValue) + parseFloat($('#GPTotalCost').val()));
                    var Volume = $(this).find(".WtVol").html();
                        var Per = $(this).find(".Per").html();
                        var Rate = $(this).find(".Rate").html();
                        var UnitId = $(this).find('.tdNone .TblWtUnit').val();
                        var Isactive = $(this).find('.tdNone .TblIsActive').val();
                        var chkToBill = $(this).find('.tdNone .chkToBill').is(":checked");
                        var alldata = {
                            'MoveCompID': parseInt(RateCompID),
                            'CostHeadID': parseInt(CostHeadID),
                            'BaseCurrID': parseInt(BaseCurrId),
                            'RateCurrID': parseInt(RateCurrId),
                            'RevRateCurrID': parseInt(RevRateCurrId),
                            'WtUnitID': parseInt(UnitId),
                            'Wt_Vol_No': parseFloat(Volume),
                            'Per': parseInt(Per),
                            'Rate': parseFloat(Rate),
                            'ConversionRate': parseFloat(ConversionRate),
                            'RevConversionRate': parseFloat(RevConversionRate),
                            'CostValue': parseFloat(CostValue),
                            'BaseRev': parseFloat(BaseRevenueValue),
                            'RevenueValue': parseFloat(RevenueValue),
                            'Isactive': Isactive,
                            'ToBill': chkToBill,
                            //var CostHeadID = $(this).find('.tdNone .TblCostHead').val();
                            //var RateCompID = $(this).find('.tdNone .TblRateComp').val();
                            //var BaseCurrId = $(this).find('.tdNone .TblBaseCurr').val();
                            //var RateCurrId = $(this).find('.tdNone .TblRateCurr').val();
                            //var ConversionRate = $(this).find(".ConversionRate :input").val();
                            //var CostValue = $(this).find(".CostValue :input").val();
                            //var RevenueValue = $(this).find(".RevenueValue :input").val();
                            //var Volume = $(this).find(".Volume :input").val();
                            //var ExpCost = $(this).find(".ExpCost :input").val();
                            //var UnitId = $(this).find('.tdNone .TblCostHead').val();
                            //var Isactive = $(this).find('.tdNone .TblIsActive').val();
                            //var alldata = {
                            //    'MoveCompID': parseInt(RateCompID),
                            //    'CostHeadID': parseInt(CostHeadID),
                            //    'BaseCurrID': parseInt(BaseCurrId),
                            //    'RateCurrID': parseInt(RateCurrId),
                            //    'ConversionRate': parseFloat(ConversionRate),
                            //    'CostValue': parseFloat(CostValue),
                            //    'RevenueValue': parseFloat(RevenueValue),
                            //    'Isactive': Isactive,
                        }

                        data.push(alldata);

                });
                $('#' + tabcontrol).find('#HFCostList').val(JSON.stringify({ 'CostHeadwiseDetail': data }));

                if (tabcontrol == 'FreightInfo') {

                        GetTrasitInvoiceTotal();
                        GetTrasitInvJobTotal();
                    if (@Model.FreightReport.TranShipmentWtVolList.Count > 0) {

                        GetTranshipWtColList(null);
                    }

                    //table.siblings('#HFTransitList').val(JSON.stringify({ 'TransitInfo': data }));

                   // FixedHeaderTable();
                }
        }
        });



        $(function () {

            //.click(function (e) { e.preventDefault(); });
            RegisterPopoverEvent();

            var Destination = $('#DestinationAddress');

            Destination.popover({
                title: 'Destination <a href="#" class="close" data-dismiss="alert">&times;</a>',
                container: 'body',
                placement: 'top',
                html: true,
                content: function () {
                    var clone = $($(this).data('popover-content')).clone(true).removeClass('hide');
                    return clone;
                }
            }).click(function (e) { e.preventDefault(); });

            Destination.on('shown.bs.popover', function () {

                $('.PopDestCity').val($('#PopDestCity').val()).attr("selected", "selected");

                $(".btnSaveDest").click(function (e) {
                    $(this).parent().parent().mask("Loading...");
                    $('#popDestAdd').val($(this).parent().find('#popDestAdd').val());
                    $('#popDestAdd2').val($(this).parent().find('#popDestAdd2').val());
                    $('#popDestPhone').val($(this).parent().find('#popDestPhone').val());
                    $('#popDestEmail').val($(this).parent().find('#popDestEmail').val());
                    $('#popDestPin').val($(this).parent().find('#popDestPin').val());
                    $('#PopDestCity').val($(this).parent().find('#PopDestCity').val()).attr("selected", "selected");
                    e.preventDefault();
                    $(this).parent().parent().unmask();
                    $(this).parents(".popover").popover('hide');
                });
            });

            var Origin = $('#OriginAddress');

            Origin.popover({
                title: 'Origin <a href="#" class="close" data-dismiss="alert">&times;</a>',
                container: 'body',
                html: true,
                content: function () {
                    var clone = $($(this).data('popover-content')).clone(true).removeClass('hide');
                    return clone;
                    //return $('#popover-content-Origin').html();
                },//$('#popover-content-Origin'),
                placement: 'left',
                html: true
            }).click(function (e) { e.preventDefault(); });

            Origin.on('shown.bs.popover', function () {

                $('.PopOrgCity').val($('#PopOrgCity').val()).attr("selected", "selected");

                $(".btnSaveOrigin").click(function (e) {
                    ////
                    $(this).parent().parent().mask("Loading...");
                    $('#popOrgAdd').val($(this).parent().find('#popOrgAdd').val());
                    $('#popOrgAdd2').val($(this).parent().find('#popOrgAdd2').val());
                    $('#popOrgPhone').val($(this).parent().find('#popOrgPhone').val());
                    $('#popOrgEmail').val($(this).parent().find('#popOrgEmail').val());
                    $('#popOrgPin').val($(this).parent().find('#popOrgPin').val());
                    $('#PopOrgCity').val($(this).parent().find('#PopOrgCity').val()).attr("selected", "selected");
                    e.preventDefault();
                    $(this).parent().parent().unmask();
                    $(this).parents(".popover").popover('hide');
                });

                    //$('.popOrgAdd').change(function () {
                    //    //
                    //    $('#popOrgAdd').val($(this).val());
                    //});

                    //$('.popOrgPhone').on('change keyup paste', function () {
                    //    //
                    //    $('#popOrgPhone').val($(this).val());
                    //});

                    //$('.PopOrgCity').change(function () {
                    //    //
                    //    $('#PopOrgCity').val($(this).val()).attr("selected", "selected");
                    //});
            });

            ////////History Rate

            var HistoryRate = $('#btnHistoryRate');

            HistoryRate.popover({
                title: 'Rates <a href="#" class="close" data-dismiss="alert">&times;</a>',
                container: 'body',
                placement: 'bottom',
                html: true,
                content: function () {
                    var clone = $($(this).data('popover-content')).clone(true).removeClass('hide');
                    return clone;
                }
            }).click(function (e) { e.preventDefault(); });


            HistoryRate.on('shown.bs.popover', function () {


                $('input[name=rbGrpRate]').change(function () {


                        var RateComponentID = $('input[name=rbGrpRate]').filter(':checked').val();
                        var AgentID = "-1";
                    if (RateComponentID == "1" || RateComponentID == "2" || RateComponentID == "3" || RateComponentID == "4"
                        || RateComponentID == "7" || RateComponentID == "8" || RateComponentID == "9" || RateComponentID == "10") {

                            $('#MoveRateComponenttable tbody tr').each(function () {

                                if ($(this).find('td .TblRateComponent').val() == RateComponentID) {
                                    AgentID = $(this).find('.TblHFVActJobAgent').val();
                                }
                            });
                        var CostorRev = (RateComponentID == "7" || RateComponentID == "8" || RateComponentID == "9" || RateComponentID == "10") ? "R" : "C" ;
                            var params = "ComponentID=" + RateComponentID + "&RMCID=" + $('#MoveJob_RMCID').val() + "&AgentID=" + AgentID +
                                "&City1=" + (RateComponentID == "4" ? ($('#MoveJob_FromLocationID').val() || "-1") : ($('#MoveJob_FromLocationID').val() || "-1")) +
                                "&City2=" + (RateComponentID == "4" ? ($('#MoveJob_ToLocationID').val() || "-1") : ($('#MoveJob_ToLocationID').val() || "-1") ) +
                                "&Port1=" + ($('#MoveJob_ModeID').val() == "1" || $('#MoveJob_ModeID').val() == "2" ? ($("#MoveJob_ExitPointID").val() || "-1") : "-1") +
                                "&Port2=" + ($('#MoveJob_ModeID').val() == "1" || $('#MoveJob_ModeID').val() == "2" ? ($("#MoveJob_EntryPointID").val() || "-1") :"-1") +
                                "&ExitPortAir=" + ($('#MoveJob_ModeID').val() == "2" ? ($("#MoveJob_ExitPointID").val() || "-1") : "-1") +
                                "&EntryPortAir=" + ($('#MoveJob_ModeID').val() == "2" ? ($("#MoveJob_EntryPointID").val() || "-1") : "-1") +
                                "&RevnOrCost=" + (CostorRev) + "&OrgRMCAgentEffectDateID=0&IsJobPage=true";
                        ////
                            var url = "@Url.Action("SubHistoryRates", "Cost")" + "?" + params;


                            return !window.open(url);
                            //return window.open(url, '_blank');


                    } else if (RateComponentID == "5")
                    {
                            var params = "UpdatedBatchID=" + $('#UpdatedBatchId').val() + "&IsDisplay=1";

                            var url = "@Url.Action("GetFSFRDet", "Lead")" + "?" + params;

                            return !window.open(url);
                    }
                    else if (RateComponentID == "6")
                    {
                            var params = "UpdatedBatchId=" + $('#UpdatedBatchId').val() +"&View=1";

                            var url = "@Url.Action("JobSFRCalculation", "Pricing")" + "?" + params;

                            return !window.open(url);
                    }

                    });

            });

        });

        $(document).ready(function () {
            if ('@IsShowFeedbackPopup' == 'True' || '@IsAVEval' == 'True') {
                swal({ title: "Info!", text: "@Str_feedback", type: "info" });
            }
            
            
            if ('@SaveType' != '') {
                //alert("Save");
                if ($('#IsGPDirectSave').val() == 0) {
                    $('#overlay').fadeOut();
                    event.preventDefault();
                }
                //var GPPercent = (parseFloat(parseFloat($('#GPTotalRevenue').val()) - parseFloat($('#GPTotalCost').val())) / parseFloat($('#GPTotalRevenue').val())) * 100
                var Convurl = '@Url.Action("GetGPAmount", "MoveManage", new { RevAmt = "#1", GPPercent = "#2", MoveID = "#3", BaseCurr = "#4" })';
                Convurl = Convurl.replace("%231", '@GPTotalRevenue');
                Convurl = Convurl.replace("%232", '@Model.GPPercent');
                Convurl = Convurl.replace("%233", @Model.MoveID);
                Convurl = Convurl.replace("%234", '@Model.BaseCurr');
                Convurl = Convurl.replace(/&amp;/g, "&");

                fn_GPApproval('@SaveType', '@Model.MoveID', Convurl);
            }

            $('.InsurBy').on('change', function () {
                //debugger;
                if ('@Model.RMCBuss'.toUpperCase() == 'FALSE' && '@Model.CompanyID' == '1' && ('@Model.Project' == "STG" || '@Model.Project' == "MSTG")) {
                    if ($(this).val() == '1') {
                        $('.InsuranceDiv').removeClass('hide');
                    }
                    else {
                        $('.InsuranceDiv').addClass('hide');
                        $(".InsuranceDiv > *").val('');
                    }
                }
            });


            //City Dropdown

            if ($("#MoveJob_BusinessLineID option:selected").text().toUpperCase() != "AGENT")
                $("#btnGetACODetails").hide();

            AjaxFillDropDown('.CityDropDown', "@Url.Action("GetCityList", "MoveManage")");
            AjaxFillDropDown('#MoveJob_FromLocationID', "@Url.Action("GetCityList", "MoveManage")", '@Model.MoveJob.FromLocationID');
            AjaxFillDropDown('#MoveJob_ToLocationID', "@Url.Action("GetCityList", "MoveManage")", '@Model.MoveJob.ToLocationID');
            @*AjaxFillDropDown('#PopOrgCity', "@Url.Action("GetCityList", "MoveManage")",'@Model.MoveJob.OrgCityID');
            AjaxFillDropDown('#PopDestCity', "@Url.Action("GetCityList", "MoveManage")", '@Model.MoveJob.DestCityID');*@
            AjaxFillDropDown('#City', "@Url.Action("GetCityList", "MoveManage")", '@Model.MoveJob.Shipper.AddressCityID');

            //Client Dropdown
            agenturl = '@Url.Action("GetAgentList", "MoveManage", new { AgentType = "CL" })';
            agenturl = agenturl.replace('CL', '@Model.ClientType');
            AjaxFillDropDown('.Clientselect', agenturl);
            AjaxFillDropDown('.Clientselect', agenturl, '@Model.MoveJob.ClientId');

            //Account Dropdown
            agenturl = '@Url.Action("GetAgentList", "MoveManage", new { AgentType = "C" })';
            AjaxFillDropDown('.Accountselect', agenturl);
            AjaxFillDropDown('.Accountselect', agenturl, '@Model.MoveJob.AccountId');

            agenturl = '@Url.Action("GetShippingLineAgentSearchList", "Combo")';
            AjaxFillDropDown('#SSLAgentId', agenturl,'@Model.FreightReport.SSLAgentId');
            agenturl ='@Url.Action("GetShippingCarrierSearchList", "Combo", new { ModeId = Model.MoveJob.ModeID })'
            AjaxFillDropDown('#SSLCarrierId', agenturl,'@Model.FreightReport.SSLCarrierId');

            var Mode = "R";
            @{
                Model.MoveJob.ModeName = (Model.MoveJob.ModeName ?? "");
            }
            if ('@Model.MoveJob.ModeName.ToUpper()' == 'SEA') {

                Mode = "S";
            }
            else if ('@Model.MoveJob.ModeName.ToUpper()' == 'AIR') {

                Mode = "A";
            }

            agenturl = '@Url.Action("GetPortSearchList", "Combo", new { Mode = "-1" })';
            agenturl = agenturl.replace("-1", Mode);
            AjaxFillDropDown('#PortLoad', agenturl);
            AjaxFillDropDown('#PortLoad', agenturl, '@Model.FreightReport.PortLoad');

            AjaxFillDropDown('#PortDischarge', agenturl);
            AjaxFillDropDown('#PortDischarge', agenturl, '@Model.FreightReport.PortDischarge');


            AjaxFillDropDown('.ddl_TranshipPortId', agenturl);
            AjaxFillDropDown('.ddl_TranshipPortId', agenturl, '-1');

            //$('#TransitShipment').trigger('change');
            $('#dtInsPackDate').val($('#Insurance_InsPackDate').val());
            $('#divEmailDet').find('#sendComunicationEmail').on('click', function () {
               // //
                //$('#divEmailDet').find('#MoveEmail_Body').val($(this).val());
            });
            if (true) {
                $('divInstructdata').addClass('@RMCFeesCSS');
                $('#MoveRateComponenttable tbody tr,#MoveRateComponenttable thead tr').each(function () { $(this).find('.thagent,.JobAgent').addClass('@RMCFeesCSS'); });
            }

            $('.Tablist').each(
                function () {
                    if ($(this).closest('li').hasClass('active')) {
                        $(this).trigger('click');
                    }
                });
            //.find('.Tablist').trigger('click');

            $('.chkFunction').trigger('change');
            $('.FreightLCLFCL').trigger('change');

            if ('@Model.MoveJob.ModeName.ToUpper()'!='SEA') {

                $('#dll_TransitDistJobNo').val('@Model.MoveID').trigger('change');
            }
            //loadTransitJobNo('.TransitDistMoveIDList');
            //loadTransitJobNo('#dll_TransitInvJobNo');

        });



        $(document).ready(function () {


            //FixedHeaderTable();

            if ('@Model.TabIndex' == '3') {

                GetTrasitInvoiceTotal();
                GetTrasitInvJobTotal();
                if (@Model.FreightReport.TranShipmentWtVolList.Count > 0) {
                    GetTranshipWtColList(null);
                }
            }

            DatePickerClass();
            TimePickerClass();
            $('body').on('hidden.bs.modal', '.modal', function () {
                $(this).removeData('bs.modal');
            });

            var IsSurvey = @Html.Raw(Json.Encode(Model.SurveyID));

            var IsSOCost = @Html.Raw(Json.Encode(Model.IsSOCost));

            var IsRMC = @Html.Raw(Json.Encode(Model.RMCBuss));

            var IsDestApprove = @Html.Raw(Json.Encode(Model.IsDestApprove));
            //if (IsSOCost) {
            //    $('.SurveyCostDetails').removeClass('hide');
            //}

            if ((IsSurvey != null && IsSurvey > 0)) {
                $("#MoveJob_FromLocationID").attr('disabled', 'disabled');
                $("#MoveJob_ToLocationID").attr('disabled', 'disabled');

                if ($("#MoveCostMst_FromLocationID").val() != null && $("#MoveCostMst_FromLocationID").val()!="") {

                    $("#MoveCostMst_FromLocationID").attr('disabled', 'disabled');
                    $("#MoveCostMst_ToLocationID").attr('disabled', 'disabled');
                }
            }
            $("#MoveJob_RMCID").attr('disabled', 'disabled');
            $("#MoveJob_BusinessLineID").attr('disabled', 'disabled');
            $("#MoveJob_GoodsDescriptionID").attr('disabled', 'disabled');
            $("#MoveJob_ModeID").attr('disabled', 'disabled');
            $("#ServiceLineID").attr('disabled', 'disabled');
            if (JSON.parse(IsRMC)) {
                $("#MoveJob_ClientId").attr('disabled', 'disabled');
            }

            if (JSON.parse(IsDestApprove)) {
                $('#MoveCosttable > TBODY > tr').each(function () {
                        $(this).find(".CostValue :input").attr('readonly');
                        $(this).find(".BaseRevenueValue :input").attr('readonly');
                    $(this).find(".RevenueValue :input").attr('readonly');
                });
            }

            /*if ($("#MoveCostMst_RMCID").val() != null && $("#MoveCostMst_RMCID").val() != "") {

                $("#MoveCostMst_RMCID").attr('disabled', 'disabled');
                //$("#MoveCostMst_ToLocationID").attr('disabled', 'disabled');
            }*/

            TotalCalEstimate();

            if ($('#chgAcctMgr').val()) {
                $('#chgAcctMgr').show();
                $('#chg_AccMgr').hide();
                $('#AccountMgr').hide();
            }
            else {
                $('#chgAcctMgr').hide();
                $('#chg_AccMgr').show();
            }

            //Account Mgr Change event
            $('#chg_AccMgr').click(function () {
                if ($('#chg_AccMgr').text() == 'Change') {
                    $('#AccountMgr').hide();
                    $('#chgAcctMgr').show();
                    $('#chg_AccMgr').text('Revert');
                }
                else {
                    $('#AccountMgr').show();
                    $('#chgAcctMgr').hide();
                    $('#chg_AccMgr').text('Change');
                    $('#chgAcctMgr').val(null);
                }
            });

            $('#Account').change(function () {

                var client = parseInt($(this).val());
                $.get("@Url.Action("GetaJAXClientDetails", "Enquiry")", { ClientId: client, Mode: 'C' }, function (data) {
                    //alert(data.AccountGSTNO);
                    //debugger;
                    if (!$('.AccountMGR').hasClass('collapse')) {
                        if (data.AccountMgr) {
                            $("#AccountMgr").val(data.result.AccountMgr);
                        }
                    }
                    $("#MoveJob_AccountGSTNO").val(data.result.AccountGSTNO);
                });

            });

            $('#MoveJob_ClientId').change(function () {
                var client = parseInt($(this).val());
                $.get("@Url.Action("GetaJAXClientDetails", "Enquiry")", { ClientId: client, Mode: 'A' }, function (data) {
                    //alert(data.AccountMgr);

                    $("#MoveJob_ClientGSTNO").val(data.ClientGSTNO);
                });

            });
            $('#MoveCostMst_ModeID').change(function () {
                var mode = $(this).val();
                $.ajax({
                    type: "post",
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    url: "GetShippingLineList",
                    data: "{mode:'" + mode + "'}",
                    success: function (data) {
                        var ShipingLineID = "#MoveCostMst_ShipingLineID";
                        if (mode != null && mode != "") {
                            $(ShipingLineID).prop("disabled", true);

                            $(ShipingLineID).empty();
                            var s = '<option value="-1">--Select ShippingLine--</option>';
                            $(ShipingLineID).append(s);
                            $.each(data, function (index, item) { // item is now an object containing properties ID and Text
                                $(ShipingLineID).append($('<option></option>').text(item.Text).val(item.Value));
                            });
                            $(ShipingLineID).prop("disabled", false);
                        }
                    },
                    failure: function (data) {
                        //alert('error occured');
                    }
                });
            });

            $('#MoveJob_ModeID input[type="checkbox"]').change(function () {
                var mode = $(this).val();
                $.ajax({
                    type: "post",
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    url: "GetShippingLineList",
                    data: "{mode:'" + mode + "'}",
                    success: function (data) {
                        var ShipingLineID = "#MoveJob_ShipingLineID";
                        if (mode!=null && mode != "") {
                            $(ShipingLineID).prop("disabled", true);
                            $(ShipingLineID).empty();
                            var s = '<option value="-1">--Select ShippingLine--</option>';
                            $(ShipingLineID).append(s);
                            $.each(data, function (index, item) { // item is now an object containing properties ID and Text
                                $(ShipingLineID).append($('<option></option>').text(item.Text).val(item.Value));
                            });
                            $(ShipingLineID).prop("disabled", false);
                        }
                    },
                    failure: function (data) {
                        //alert('error occured');
                    }
                });
            });

            $('#CostBaseCurrencyRateDropdown, #CostRateCurrencyDropdown').change(function () {
                if (this.id == "CostBaseCurrencyRateDropdown" && $(this).val() == $('#CostRateCurrencyDropdown').val()) {

                    $('#txtConversionRate').val(1);
                }
                if (this.id =="CostRateCurrencyDropdown"  &&  $(this).val() == $('#CostBaseCurrencyRateDropdown').val()) {

                    $('#txtCostConversionRate').val(1);
                }
            });

            $('#btnGetACODetails').click(function () {
                var MoveID = @Model.MoveID;

                $.ajax({
                    type: "post",
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    url: "@Url.Action("GetACODetails", "MoveManage")",
                    data: "{MoveID:'" + MoveID + "'}",
                    async: false,
                    success: function (data) {
                        $("#ddl_JobStatusSDId").val(data.ACODetails.JobStatusSDId);
                        $("#ddl_BillingStatusId").val(data.ACODetails.BillingStatusId);
                        $("#txtRemarks").val(data.ACODetails.Remarks);
                    },
                    failure: function (data) {
                        //alert('error occured');
                    },
                    error: function (data) {
                        //alert('error occured');
                    }
                });
            });

            ////Freeze the table header
            //$("#DocTable").freezeHeader({ 'height': '300px' });
            //$('#DocTable').fixedHeaderTable({height: 300 });

        });

        /////On RMC Change
        function RMC_OnChange(_RMC)
        {
            if (_RMC.value != null && _RMC.value != "") {
                var CostHeadDrp = (_RMC.id == "MoveJob_RMCID") ? "#CostHeadDropdown" : "#CostHeadCostDropdown";
                $(CostHeadDrp).empty();
                $(CostHeadDrp).append($('<option>').text("--Select CostHead--").attr('value', -1));
                $.ajax({
                    contentType: "application/json; charset=utf-8",
                    url: "@Url.Action("GetCostHead", "Combo")?RMCID=" + _RMC,
                    async: 'false',
                    dataType: 'json',
                    type: "GET",
                    success: function (data) {
                        $.each(data, function (number, municipe) {
                            $(CostHeadDrp).append($('<option>').text(municipe.Text).attr('value', municipe.Value));
                        });
                    },
                    error: function (reponse) {
                        alert("error : " + reponse);
                    }
                });
            }
        }


        ////On Instruct text box enter key press call the Add button event
        $('#txtServiceInstruct').on("keypress", function (e) {
            if (e.keyCode == 13) {

                $('#btnAddInstruct').click();
                return false; // prevent the button click from happening
            }
        });

        $('#txtCostAmount').on("keypress", function (e) {
            if (e.keyCode == 13) {

                $('#btnAddCostHead').click();
                return false; // prevent the button click from happening
            }
        });




        $(document).on('click', "#btnSaveInstruction ,#btnSaveCost, #btnSaveJob", function (event) {
            ////
            //event.preventDefault();
            //return false;
            var JsonStr = JSON.stringify(getInstructionList(this.id));
            var jsonobj = getInstructionList(this.id);
            var len = jsonobj.length;
            //jQuery.inArray("CostHeadwiseDetail", getInstructionList(this.id));
            if (this.id =="btnSaveInstruction") {

                $("#MoveInstructionMst_HFVMoveInstructionList").val(JsonStr);
            }
            else if (this.id == "btnSaveJob")
            {
                $("#MoveJob_HFVMoveRateCompList").val(JsonStr);
                if (!($('.chkOutSourced').is(':checked')) && '@Model.CompanyID' == '1') {
                    if ('@Model.IsOrgWHSave'.toUpperCase() == 'FALSE' && !($('#OrgWarehouse').val())) {
                        alert('Please select Origin Warehouse.');
                        $('#overlay').fadeOut();
                        event.preventDefault();
                    }
                    if ('@Model.IsDestWHSave'.toUpperCase() == 'FALSE' && !($('#DestWarehouse').val())) {
                        alert('Please select Destination Warehouse.');
                        $('#overlay').fadeOut();
                        event.preventDefault();
                    }
                }



                if ('@Model.Project' == 'STG' && !($('#OldJobNo').val()) && '@Model.CompanyID' == '1') {
                    alert('Please enter Old Job No.');
                    $('#overlay').fadeOut();
                    event.preventDefault();
                }

                if ('@Model.Project' == 'STG' || '@Model.Project' == 'MSTG') {
                    if ($('.InsurBy').val() == 1 && '@Model.CompanyID' == '1' && '@Model.RMCBuss'.toUpperCase() == 'FALSE') {
                    if (!($('#ContactPerson').val()))
                    {
                        alert('Please enter Contact Person');
                        $('#overlay').fadeOut();
                        event.preventDefault();
                    }
                    if (!($('#EmailID').val())) {
                        alert('Please enter Email ID.');
                        $('#overlay').fadeOut();
                        event.preventDefault();
                    }
                    if (!($('#InsuranceValueAmount').val())) {
                        alert('Please enter Insurance Value Amount.');
                        $('#overlay').fadeOut();
                        event.preventDefault();
                    }
                    if (!($('#InsuranceValueCurrency').val())) {
                        alert('Please enter Insurance Value Currency.');
                        $('#overlay').fadeOut();
                        event.preventDefault();
                    }
                }
                }

                //alert($('.InsurBy').val() + '@Model.CompanyID' + '@Model.Insurance.IsSendForInsurance'.toUpperCase() + $('#IsDirectSave').val());

                if ((('@Model.CompanyID' == '1' && '@Model.Insurance.IsSendForInsurance'.toUpperCase() == 'FALSE') ||
                    (!('@Model.CompanyID' == '1' || '@Model.CompanyID' == '2') && '@Model.IsGCCInsurance'.toUpperCase() == 'FALSE'))
                    && $('.InsurBy').val() == 1 && $('#IsDirectSave').val() == 0)
                {
                    ////code for insurance..do not edit below commented code .
                    $('#overlay').fadeOut();
                    event.preventDefault();
                    swal({
                        title: "Insurance is not entered?",
                        type: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#DD6B55",
                        confirmButtonText: "Continue",
                        cancelButtonText: "Cancel",
                        closeOnConfirm: true,
                        closeOnCancel: true
                    },
                        function (isConfirm) {
                            if (isConfirm) {
                                $('#IsDirectSave').val("1");
                                $('#btnSaveJob').click();
                            }
                        });
                }


                var Nationality = $('#Nationality').val();
                if (Nationality && '@Model.CompanyID' == '1')
                {
                    if ($('#IsDirectSave').val() == 0)
                    {
                        $('#overlay').fadeOut();
                        event.preventDefault();
                        $.get("@Url.Action("GetGDPRNationality", "MoveManage")", { NationaLity: Nationality }, function (data)
                        {
                            if (data.ISGDPRNationalty.toString().toUpperCase() == 'TRUE' && '@Model.ISGDPRFileUploaded'.toUpperCase() == 'FALSE')
                            {
                                swal({
                                    title: "Please take GDPR concent from shipper",
                                    type: "warning",
                                    showCancelButton: true,
                                    confirmButtonColor: "#DD6B55",
                                    confirmButtonText: "Continue",
                                    cancelButtonText: "Cancel",
                                    closeOnConfirm: true,
                                    closeOnCancel: true
                                },
                                function (isConfirm) {
                                    if (isConfirm) {
                                        $('#IsDirectSave').val("1");
                                        $('#btnSaveJob').click();

                                    }
                                });
                            }
                            else {
                                $('#IsDirectSave').val("1");
                                $('#btnSaveJob').click();
                            }
                        });
                    }
                }
                else {
                    if ('@Model.CompanyID' == '1') {
                        alert("Please select Nationality.");
                        $('#overlay').fadeOut();
                        event.preventDefault();
                    }
                }


            }
            else {
                $("#MoveCostMst_HFVMoveCostHeadList").val(JsonStr);
            }
            if (JsonStr == null || JsonStr=="") {

                if (this.id == "btnSaveInstruction") {
                    alert("Please add atleast one Service Instruction");
                }
                else if (this.id == "btnSaveCost") {
                    alert("Please add atleast one Cost Head");

                }

                event.preventDefault();
                return false;
            }


            //Packing Cost
            //btnSavePacking
            var ExitPort = "0", EntryPort = "0";
            //var orgportvalid=false, destportvalid = false;
            $('#MoveRateComponenttable > TBODY > tr').each(function () {
                var RateCompDropdownSelected = $('.TblRateComponent', this).val();

                //if (RateCompDropdownSelected == 1) {
                //    ExitPort = $('.tdNone', this).find('.TblOrgPort').val();
                //}
                //if (RateCompDropdownSelected == 3) {
                //    destportvalid = $('.tdNone', this).find('.TblDestPort').val() == EntryPort || EntryPort==-1;
                //}
                ////
                if (RateCompDropdownSelected == 2) {

                    //orgportvalid = $('.tdNone', this).find('.TblOrgPort').val();
                    ExitPort = $('.tdNone', this).find('.TblOrgPort').val();
                    EntryPort = $('.tdNone', this).find('.TblDestPort').val();
                }
            });
            //////
            if (EntryPort) {

                $('#MoveJob_EntryPointID').val(parseInt(EntryPort));
            }
            if (ExitPort) {
                $('#MoveJob_ExitPointID').val(parseInt(ExitPort));
            }

        });

        $('#SendtoGPApprovalList').change(
            function ()
            {
                var SendToApprUser = $(this).val();
                $(".GPSendForApprovalUser").each(function () { $(this).val(SendToApprUser); });
            });

        $('#btnSendToGPApprove').on('click',
            function () {
                var button = $('#BtnSubmit').val();
                $('#'+button).click();
            });

        $(document).on('click', "#btnSaveSurvey, #btnSavePacking ,#btnSaveFreight, #btnSaveDelivery,#btnSendToCSApprove,btnApproveDelivery", function (event) {

            var btnRevenueValue = 0;
            var btnCostValue = 0;
            var button = this.id;
            var data = [];

            var CompanyID = '@Model.CompanyID';
            var ModeName = '@Model.MoveJob.ModeName';
            if (button == "btnSaveSurvey") {
                GetSurveyCostHeadXML(btnRevenueValue, btnCostValue, button, data, CompanyID);
            }
            else
            {
                GetNotSurveyCostHeadXML(btnRevenueValue, btnCostValue, button, data,'@Model.CompanyID');
                ////validation of the forwading branch if the origin or destination contains the india
                if (button == "btnSaveFreight") {
                    FreightValid('@Model.MoveID', data);
                }

                var passportno = "";
                var end = new Date();
                end.setHours(24,00,00,000);
                var ISDeliveryDateValid = '@ISDeliveryDateValid';
                var MoveID = '@Model.MoveID';
                var OrgStgStartDate = '@Model.PackingReport.OrgStgStartDate';
                var OrgStgStartDate = '@Model.PackingReport.OrgStgEndDate';
                if (button == "btnSavePacking") {
                    let packingValid = PackingValid('@Model.PackingReport.Packdate', '@Model.PackingReport.OrgStgStartDate', '@Model.PackingReport.OrgStgEndDate', ModeName, end, ISDeliveryDateValid);
                    if (packingValid == 'false') {
                        $('#overlay').fadeOut();
                        event.preventDefault();
                    }
                }
                if (button == "btnSaveDelivery" || button == "btnSendToCSApprove" || button == "btnApproveDelivery") {
                    var DeliveryDate = '@Model.DeliveryReport.DeliveryDate';
                    var DestStgStartDate = '@Model.DeliveryReport.DestStgStartDate';
                    var DestStgEndDate = '@Model.DeliveryReport.DestStgEndDate';

                    var RMCBuss = "@Model.RMCBuss"; var Project = "@Model.Project";//'@Model.CompanyID' != '2';
                    var IsGCCInsurance = '@Model.IsGCCInsurance';
                    var IsStgDateValid_LG = true;

                    if ('@Model.IsSTGUnlock'.toUpperCase() == 'FALSE' && '@Model.CompanyID' == '1' && RMCBuss.toUpperCase() == 'FALSE') {
                        var fn_OrgStgStartDate = $('#PackingInfo').find('#OrgStgStartDate').val();
                        var fn_OrgStgEndDate = $('#PackingInfo').find('#OrgStgEndDate').val();
                        var fn_DestStgStartDate = $('#DeliveryInfo').find('#DestStgStartDate').val();
                        var fn_DestStgEndDate = $('#DeliveryInfo').find('#DestStgEndDate').val();
                        if (button == "btnSendToCSApprove" || button == "btnApproveDelivery") {
                            debugger;

                            if ('@Model.IsOrgWHSave'.toUpperCase() == 'FALSE')
                            {
                                var Difference_In_Time = end.getTime() - new Date(fn_OrgStgStartDate).getTime();
                                var Difference_In_Days = Difference_In_Time / (1000 * 3600 * 24);
                                if (Difference_In_Days > 180 && !fn_OrgStgEndDate)
                                {
                                    alert('This shipment is lock (Origin Stg Start Date is exceeded 6 months) . Please inform the LTS incharge to unlock the same.');
                                    $('#overlay').fadeOut();
                                    event.preventDefault();
                                    IsStgDateValid_LG = false;
                                    return 'false';
                                }


                                Difference_In_Time = new Date(fn_OrgStgEndDate).getTime() - new Date(fn_OrgStgStartDate).getTime();
                                Difference_In_Days = Difference_In_Time / (1000 * 3600 * 24);
                                if (Difference_In_Days > 180)
                                {
                                    alert('This shipment is lock (Origin Stg Start Date is exceeded 6 months from Origin Stg End Date) . Please inform the LTS incharge to unlock the same.');
                                    $('#overlay').fadeOut();
                                    event.preventDefault();
                                    IsStgDateValid_LG = false;
                                    return 'false';
                                }
                            }

                            if ('@Model.IsDestWHSave'.toUpperCase() == 'FALSE') {
                                Difference_In_Time = end.getTime() - new Date(fn_DestStgStartDate).getTime();
                                Difference_In_Days = Difference_In_Time / (1000 * 3600 * 24);
                                if (Difference_In_Days > 180 && !fn_DestStgEndDate) {
                                    alert('This shipment is lock (Dest Stg Start Date is exceeded 6 months) . Please inform the LTS incharge to unlock the same.');
                                    $('#overlay').fadeOut();
                                    event.preventDefault();
                                    IsStgDateValid_LG = false;
                                    return 'false';
                                }

                                Difference_In_Time = new Date(fn_DestStgEndDate).getTime() - new Date(fn_DestStgStartDate).getTime();
                                Difference_In_Days = Difference_In_Time / (1000 * 3600 * 24);
                                if (Difference_In_Days > 180) {
                                    alert('This shipment is lock (Dest Stg End Date is exceeded 6 months) . Please inform the LTS incharge to unlock the same.');
                                    $('#overlay').fadeOut();
                                    event.preventDefault();
                                    IsStgDateValid_LG = false;
                                    return 'false';
                                }
                            }



                        }
                    }


                    if (IsStgDateValid_LG == 'true') {
                        let deliveryValid = DeliveryValid(MoveID, DeliveryDate, DestStgStartDate, DestStgEndDate, RMCBuss, Project, IsGCCInsurance, CompanyID, ModeName, button, end, ISDeliveryDateValid);

                        if (deliveryValid == 'false') {
                            $('#overlay').fadeOut();
                            event.preventDefault();
                        }
                    }

                }

            }

        });




        ////Show quote detail
        function showDetails(clickedElement)
        {

            var id = $(clickedElement).data('assigned-id');
            var route = '@Url.Action("Details", "Quotation", new { id= "-1" })';
            route = route.replace("-1", id);
            $('#partial').load(route, function() {
                TotalCalCostEstimateDetail();
            });

            //var dataid = $(clickedElement).attr("data-id");
            //showDetailsAjax(dataid);
        }









        $("#btnExportCS").on("click", function (e) {

            //var MoveID = $('#MoveID').val();
            var MoveID = '@Model.MoveID';
            var url = '@Url.Action("ExportToExcel", new { MoveID = "-1" })';
            url = url.replace("-1", MoveID);
            //window.location.href = url;

            BtnExportCS('@Model.MoveJob.RMCName', '@Model.MoveJob.ModeName', '@Model.MoveJob.Shipper.ShipperFName', '@Model.MoveJob.Shipper.ShipperLName',
                '@Model.MoveJob.FromLocationName','@Model.DeliveryDetail.OrgAgentName','@Model.MoveJob.ToLocationName','@Model.DeliveryDetail.DestAgentName',url);
        });

        $('.ComboChange').on("change", function ()
        {
            //
            var controlID = this.id;
            if (controlID == "MoveJob_RateComponent") {

                if (!('@Model.MoveJob.ModeName' == "Road" && '@Model.RMCType' == "Brookfield Type")) {
                    if (this.value == 2) {
                    $('#MoveJob_ExitPort').closest(".port").removeClass("hide");
                    $('#MoveJob_EntryPort').closest(".port").removeClass("hide");

                }
                else {
                    $('#MoveJob_ExitPort').closest(".port").addClass("hide");
                    $('#MoveJob_EntryPort').closest(".port").addClass("hide");
                }
                }
                $('#MoveJob_ExitPort').val('').attr("selected", "selected");
                $('#MoveJob_EntryPort').val('').attr("selected", "selected");
            }
        });


        $('.charge').on('blur', function () {
            var value = $(this).val();
            if (value && parseInt(value) != 0) {

                $(this).parent().siblings().find('.charge').val(0.00);
            }
        })


        function GetSubCost(element) {
            //
            var CostHeadID = $(element).closest('tr').find('td .TblCostHead').val();
            var RateCompID = $(element).closest('tr').find('td .TblRateComp').val();
            PopUpSubCost(CostHeadID, RateCompID, '0');
            }





        $(".coordinatechange").on('select2:close', function (e)
        {
            //
            var coordinate = $(this).val();
            if (coordinate) {
                $('.coordinatechange').each(function (i, obj) {
                    //
                    $(this).val(coordinate).change();
                });

            }

        });

        function OnBtnUpload(sender) {

            var $buttonClicked = $(sender);
            var id = $buttonClicked.attr('data-id');
            var type = $buttonClicked.attr('data-type');
            var docName = $buttonClicked.attr('data-doc');
            var TeamDetailPostBackURL = '@Url.Action("Create", "DMS")';
            var options = { "backdrop": "static", keyboard: true };
            $.ajax({
                type: "GET",
                url: TeamDetailPostBackURL,
                contentType: "application/json; charset=utf-8",
                data: { "id": id, "Type": type, "DocName": docName },
                datatype: "json",
                success: function (data) {
                    ////
                    $('#mdlDMS .modal-content').html(data);
                    $('#mdlDMS').modal(options);
                    $('#mdlDMS').modal('show');

                    AjaxFillDropDown('.CityDropDown', "@Url.Action("GetCityList", "Enquiry")");
                },
                error: function () {
                    alert("Dynamic content load failed.");
                }
            });

            return false;
        }

    </script>
    <!--Document-->
    <script type="text/javascript">
        $('form#DocCustomFilter').submit(function (e) {
            e.preventDefault();
            $(this).ajaxSubmit({
                target: '#docgrid',
                success: function () {

                   // $("#DocTable").freezeHeader({ 'height': '300px' });
                    //$('#DocTable').fixedHeaderTable({ height: 300 });
                }
            });
        });




        function ShowStatementCharges() {

            var key = $('#InvoiceID').val();
            var IsStatement = true;
            var param = "key=" + key + "&BillType=I&IsStatement="+ IsStatement;
            var url = "@Url.Action("BillFormat_Print", "Billing")" + "?" + param;
            return !window.open(url);
        }

        function loadTransitJobNo(ControlId) {

            //debugger;
            var Masterid = '@Model.FreightReport.TransInvMasterID';
            var Mode = '@Model.MoveJob.ModeID';
            var url = '@Url.Action("GetTransitJobNoList", "Combo",new { Mode = "-1", MasterID = "-2" })';
            url = url.replace("-1", Mode);
            url = url.replace("-2", Masterid);
            url = url.replace(/&amp;/g, "&");

            fn_loadTransitJobNo(ControlId, Masterid, Mode, url);


        }

        $("#btnInstructionSheet").click(function (e) {

            e.preventDefault();

            var MoveId = '@Model.MoveID';
            var Cheque_No = $('#Cheque_No').val();
            var Cheque_Amt = $('#Cheque_Amt').val();
            var url = '@Url.Action("CheckCreditPrivateClient", "MoveManage", new { id = "-1"})';
            url = url.replace("-1", MoveId);
            url = url.replace(/&amp;/g, "&");
            fn_InstructionValid(MoveId, Cheque_No, Cheque_Amt, url);
        });

        $('.ddlActivity').on("change", function () {
            //ShowMail(this);
            @*@*var ActivityId = $(this).val();
            //var MoveID = '@Model.MoveJob.ModeID';
            $('#hfActivityID').val(ActivityId);
            $('.ActivityHistoryListItem').each(function () {
                $(this).removeClass('active');
            });

            var url = '@Url.Action("GetMailFormat", "MoveManage",new { ActivityID = "-1", MoveID = "-2" })';
            url = url.replace("-1", ActivityId);
            url = url.replace("-2", 0);
            url = url.replace(/&amp;/g, "&");

            //debugger;
            $.getJSON(url, null, function (data) {

                $('.EmailTo').val(data.result.EmailTo);
                $('.EmailCC').val(data.result.EmailCC);
                $('.EmailBCC').val(data.result.EmailBCC);
                $('.Subject').val(data.result.Subject);
                $('.EmailBody').summernote('code', data.result.Body);
                $('.EmailBody').trigger('blur');
                //$('.EmailBody').html(data.result.EmailBody);

            });*@
            //url = url.replace(/&amp;/g, "&");
        });

        $('.EmailBody').blur(function () {
            $('#MoveEmail_Body').val(htmlEntities($(this).val()));
        });



        function ShowMail(element)
        {
            var ActivityId = 0, TransID = 0;
            if ($(element).hasClass('ddlActivity')) {
                ActivityId = $(element).val();
            }
            else {
                $('.tblMailActivityHist tbody').each(function () {
                    if ($(this).find('tr td .IsSelectMail').is(':checked')) {
                        TransID = $(this).find('tr td .hfHistTransID').html();
                        ActivityId = $(this).find('tr td .hfHistActivityID').html();
                    }
                });
            }
            $('#hfActivityID').val(ActivityId);
            var MoveID = '@Model.MoveID';
            //$('.ActivityHistoryListItem').each(function ()
            //{
            //    $(this).removeClass('active');
            //});
            //$(element).addClass('active');

            var url = '@Url.Action("GetMailFormat", "MoveManage",new { TransID = "-1", ActivityID = "-2", MoveID = "-3" })';
            url = url.replace("-1", TransID);
            url = url.replace("-2", ActivityId);
            url = url.replace("-3", MoveID);
            url = url.replace(/&amp;/g, "&");

            $.getJSON(url, null, function (data) {

                $('.EmailTo').val(data.result.EmailTo);
                $('.EmailCC').val(data.result.EmailCC);
                $('.EmailBCC').val(data.result.EmailBCC);
                $('#Subject').val(data.result.Subject);

                $('.EmailBody').summernote('code', htmlEntities(data.result.Body));
                $('.EmailBody').trigger('blur');
                $('#MailDetModal').modal('hide');
                //$('.EmailBody').html(data.result.EmailBody);

            });
        }

        $('.ActivityHistoryListItem').on('click', function ()
        {
            var ActivityId = $(this).find('#spanActivilty').html();
            var MoveID = '@Model.MoveID';
            var url = '@Url.Action("GetMailHistList", "MoveManage",new { ActivityID = "-1", MoveID = "-2" })';
            url = url.replace("-1", ActivityId);
            url = url.replace("-2", MoveID);
            url = url.replace(/&amp;/g, "&");
            $.getJSON(url, null, function (data) {

                for (var i = 0; i < data.result.length; i++) {
                    var mailstr = '<tr class="m-n pad-none">' +
                        '<td class="m-n pad-none"><span class="hide hfHistActivityID">' + data.result[i].ActivityID + '</span>' + data.result[i].SentBy + '</td> ' +
                        '<td class="m-n pad-none"><span class="hide hfHistTransID">' + data.result[i].MailTransID + '</span>' + data.result[i].SentDate + '</td> ' +
                        '<td class="m-n pad-none"><input class="form-check-input IsSelectMail" data-val="true" data-val-required="The field is required." type = "checkbox" value = "true" name="IsSelectMail" ><input name="IsSelectMail" type="hidden" value="false" autocomplete="off"></td> ' +
                        '</tr>';
                    $('.tblMailActivityHist tbody').append(mailstr);
                    $('.HeadingActivity').append(data.result[i].ActivityName);
                }

                //$('.EmailTo').val(data.result.EmailTo);
                //$('.EmailCC').val(data.result.EmailCC);
                //$('.EmailBCC').val(data.result.EmailBCC);
                //$('#Subject').val(data.result.Subject);

                //$('.EmailBody').summernote('code', htmlEntities(data.result.Body));
                //$('.EmailBody').trigger('blur');
                //$('.EmailBody').html(data.result.EmailBody);
                $('#MailDetModal').modal();
            });


        });

        ////
        $(document).ready(function () {

            $("*").dblclick(function (e) {
                e.preventDefault();
            });

            TemplateValidationRules();

            ///Validate for dynamic controls
            $("#formVendorEval").validate(
                {
                    errorPlacement: function (error, element) {
                        /*here we add the error label to the div that is after the br tag
                        using the next method provided by jquery to navigate on the DOM*/
                        error.appendTo(element.parents('.DivAnswer').siblings('.errorTxt'));
                    }
                }
            );


            if (@Model.CompanyID== 2) {

                $("input[name*='vendorEvaluation.OrgEvalQuestions']").each(function () {

                    $(this).rules("remove", "required");
                });
                $("input[name*='vendorEvaluation.DestEvalQuestions']").each(function () {

                    $(this).rules("remove", "required");
                });
            }

            $('#btnSaveAgentFeedback').click(function (e) {

                if (@Model.CompanyID== 2) {

                    if ($('.VendorEvalOrg:checked').length == 0 && $('.VendorEvalDest:checked').length == 0) {
                        alert('Nothing is checked!');
                        e.preventDefault();
                        return false;
                    }
                    else {

                        if ($('.VendorEvalOrg:checked').length > 0 && $('.VendorEvalOrg:checked').length != ($('.VendorEvalOrg').length / 2)) {

                            alert('Need to answer all Origin Partner questions');

                            e.preventDefault();
                            return false;
                        }
                        if ($('.VendorEvalDest:checked').length > 0 && $('.VendorEvalDest:checked').length != ($('.VendorEvalDest').length / 2)) {

                            alert('Need to answer all Destination Partner questions');

                            e.preventDefault();
                            return false;
                        }

                        $('#overlay').fadeIn();
                    }
                }
                else {

                    if ($('#formVendorEval').valid()) {

                        $('#overlay').fadeIn();
                    }
                }
            });

            $('#btnClearOrgVendorEvalSelect').click(function (e) {

                $('.VendorEvalOrg').prop('checked', false);
                $('.OrganswerList').val('');
                e.preventDefault();
            });

            $('#btnClearDestVendorEvalSelect').click(function (e) {

                $('.VendorEvalDest').prop('checked', false);
                $('.DestanswerList').val('');
                e.preventDefault();
            });

            $('#ReportID').change(function (e) {

                if ($(this).val() == 9 || $(this).val() == 10) {
                    e.preventDefault(e);
                    var filetype = $(this).val() == 10 ? "GPP" : "GDCF";
                    var win = window.open('@Url.Action("CostUploadFormat", "Cost")' + "?RMCId=0&ComponentId=0&CostOrRevenue=G&FileType=" + filetype
                         + "&Mode=ALL", '_blank', 'width = 300, height = 200');
                    win.focus();
                    return false;
                }
            });

            //$('#FormReport').on('submit',function (e)
            //{
            //    debugger;
            //    if ($('#ReportID').val() == '9' || $('#ReportID').val() == '10') {

            //        e.preventDefault(e);
            //        return false;
            //    }
            //});

        });




        function OpenRequestDocs() {
            var url = "@Url.Action("RequestDocs", "MoveManage", new { MoveID = Model.MoveID.ToString() })";
            url = url.replace(/&amp;/g, "&");
            return !window.open(url);
        }

    </script>
    <script type="text/javascript">
        var SFQuestionIDList = [];
        $(document).ready(function () {
            $("#formShipperFeedback").submit(function () {
                BindQuestionList();

                if ($("#SFQuestionIDListHidden").val() == "") {
                    swal({ title: "Error!", text: "Please select atleast one question.", type: "error" });
                    return false;
                }
            });

            $("tr.yesnoother").each(function () {
                if ($(this).find("input[value='0']").prop("checked"))
                    $(this).find("input:text.yesno").show();
                else
                    $(this).find("input:text.yesno").hide();
            });

            $("tr.trAnswers input:radio,tr.trAnswers input:checkbox").each(function () {
                $(this).on("click", function (e) {
                    e.preventDefault();
                });
            });
        });

        $(document).ready(function () {

            $("form[name='Form_DMS']").submit(function (e) {

                if ($(this).valid()) {

                    //debugger;
                    if ($('#DocNameDropdown option:selected').text() == 'Vendor Invoice') {

                        alert('Vendor Invoice cannot be uploaded using this option');
                        e.preventDefault();
                    }

                }
            });

            function TimePickerClass() {
	                $('#SurveyTime').datetimepicker({
		            format: 'H:m',
            	});
            }




        });

        function DatePickerClass() {
            fn_DatePickerClass('@DeliveryDateValue', '@PackDateValue', '@SurveyDateValue');
        }

        function ShowVendorInvoiceDMS(IsShow) {

            if (IsShow == true) {

                let TeamDetailPostBackURL = '@Url.Action("AgentInvoiceCreate","DMS")';
                let id = '@Model.MoveID';
                let type = $('#DocTypeDropdown option:selected').val();
                let docName = $('#DocNameDropdown option:selected').val();
                let options = { "backdrop": "static", keyboard: true };
                $.ajax({
                    type: "GET",
                    url: TeamDetailPostBackURL,
                    contentType: "application/json; charset=utf-8",
                    data: { "id": id, "Type": type, "DocName": docName },
                    datatype: "json",
                    success: function (data) {
                        ////
                        $('#mdlDMS .modal-content').html(data);
                        $('#mdlDMS').modal(options);
                        $('#DocNameDropdown').select2("close");
                        $('#mdlDMS').modal('show');
                        AjaxFillDropDown('#InvDmsAgentId', '@Url.Action("GetInvDmsAgentList", "Combo")')

                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        console.log(errorThrown);
                        console.log(textStatus);
                        alert("some error");
                    }
                });

                return true;
            }
            else {
                $('#mdlDMS').modal('hide');
                return false;
            }
        }

        var ActiveTabName = "";
        $(document).ready(function () {
            $("#tabRateUpload").dirty();
            $("#tabRateUpload").dirty("setAsClean");
            $("li").click(function (e) {
                if (ActiveTabName != "" && ActiveTabName != $(this).text() && $("#tabRateUpload").dirty("isDirty")) {
                    if (confirm('Data is edited. Please save data before changing tab.'))
                        return false;
                }
                $("#tabRateUpload").dirty("setAsClean");
                ActiveTabName = $(this).text();
            });
        });




    </script>
    @*<link type="text/css" href="https://cdn.datatables.net/1.10.21/css/dataTables.bootstrap.min.css" />*@
    @*<link type="text/css" href="https://cdn.datatables.net/1.10.21/css/jquery.dataTables.min.css" />*@
    @*<script type="text/javascript" src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.min.js"></script>
        <script type="text/javascript" src="https://cdn.datatables.net/1.10.21/js/dataTables.bootstrap.min.js"></script>*@
    @Styles.Render("~/Content/bootstrap-multiselectcss")
    @*@Styles.Render("~/Content/bootstrap-tablecss-fixed-columns")*@
    <link type="text/css" href="~/Content/bootstrap-datetimepicker.min.css" />
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/bootstrap-select")
    @Scripts.Render("~/bundles/bootstrap-multiselect")
    @*@Scripts.Render("~/bundles/bootstrap-table-fixed-columns")*@
    @Scripts.Render("~/bundles/SubCostHead")
    @Scripts.Render("~/bundles/MoveManage")





}