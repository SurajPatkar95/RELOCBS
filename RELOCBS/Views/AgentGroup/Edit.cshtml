@model RELOCBS.Entities.AgentGroup

@{
    ViewBag.Title = "Edit Agent Group";

    if (Model.AgentOrCorp == "C")
    {
        ViewBag.Title = "Edit Corporate Group";
    }

    var AgentNameLable = Model.AgentOrCorp == "C" ? "Corporate Group Name" : "Agent Group Name";
}

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
    <h4 class="modal-title">@ViewBag.Title</h4>
</div>

@using (Html.BeginForm("Edit", "AgentGroup", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.AgentOrCorp)
    @Html.HiddenFor(model => model.CompID)
    <div class="modal-body">
        <div class="row">
            <div class="col-sm-12">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.AgentGroupID)
                @*<div class="form-group row">
                    @Html.LabelFor(model => model.ShortAgentGroupName, htmlAttributes: new { @class = "control-label col-md-3 col-md-offset-2" })
                    <div class="col-md-5">
                        @Html.EditorFor(model => model.ShortAgentGroupName, new { htmlAttributes = new { @class = "form-control input-sm" } })
                        @Html.ValidationMessageFor(model => model.ShortAgentGroupName, "", new { @class = "text-danger" })
                    </div>
                </div>*@
                <div class="form-group row">
                    <label class="control-label col-md-3 col-md-offset-2">@AgentNameLable</label>
                    <div class="col-md-5">
                        @Html.EditorFor(model => model.AgentGroupName, new { htmlAttributes = new { @class = "form-control input-sm" } })
                        @Html.ValidationMessageFor(model => model.AgentGroupName, "", new { @class = "text-danger" })
                    </div>
                </div>
                @*<div class="form-group row">
                    @Html.LabelFor(model => model.Address1, htmlAttributes: new { @class = "control-label col-md-3 col-md-offset-2" })
                    <div class="col-md-5">
                        @Html.EditorFor(model => model.Address1, new { htmlAttributes = new { @class = "form-control input-sm" } })
                        @Html.ValidationMessageFor(model => model.Address1, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    @Html.LabelFor(model => model.Address2, htmlAttributes: new { @class = "control-label col-md-3 col-md-offset-2" })
                    <div class="col-md-5">
                        @Html.EditorFor(model => model.Address2, new { htmlAttributes = new { @class = "form-control input-sm" } })
                    </div>
                </div>
                <div class="form-group row">
                    @Html.LabelFor(model => model.CityName, htmlAttributes: new { @class = "control-label col-md-3 col-md-offset-2 requiredlabel" })
                    <div class="col-md-5">
                        @Html.DropDownListFor(model => model.CityID, new SelectList((System.Collections.IEnumerable)ViewData["City"], "Value", "Text"), "--Select City--", new { @class = "form-control input-sm clearfix enableselect" })
                        @Html.ValidationMessageFor(model => model.CityID, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    @Html.LabelFor(model => model.PinCode, htmlAttributes: new { @class = "control-label col-md-3 col-md-offset-2" })
                    <div class="col-md-5">
                        @Html.EditorFor(model => model.PinCode, new { htmlAttributes = new { @class = "form-control input-sm" } })
                    </div>
                </div>
                <div class="form-group row">
                    @Html.LabelFor(model => model.ContactPerson, htmlAttributes: new { @class = "control-label col-md-3 col-md-offset-2" })
                    <div class="col-md-5">
                        @Html.EditorFor(model => model.ContactPerson, new { htmlAttributes = new { @class = "form-control input-sm" } })
                        @Html.ValidationMessageFor(model => model.ContactPerson, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    @Html.LabelFor(model => model.ContactPhone, htmlAttributes: new { @class = "control-label col-md-3 col-md-offset-2" })
                    <div class="col-md-5">
                        @Html.EditorFor(model => model.ContactPhone, new { htmlAttributes = new { @class = "form-control input-sm" } })
                        @Html.ValidationMessageFor(model => model.ContactPhone, "", new { @class = "text-danger" })
                    </div>
                </div>*@
                <div class="form-group row">
                    <div class="col-md-offset-2">
                        <div class="col-md-5">
                            @Html.CheckBoxFor(model => model.Isactive, new { htmlAttributes = new { @class = "form-control input-sm" } }) Active
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-footer">
        <div class="pull-right">
            <input type="submit" value="Save" class="btn btn-primary btn-sm" id="btnCreate" />
        </div>
    </div>
}

<script>
    $(document).ready(function () {
        $("[data-val-required]").each(function () {
            $("label[for=" + this.id + "]").addClass("requiredlabel")
        });

            $('.enableselect').select2();
            var CityID = '@Model.CityID';
            AjaxFillDropDown('select#CityID', "@Url.Action("GetCityList", "AgentGroup")");
            if (CityID != null && parseInt(CityID) > 0) {
                AjaxFillDropDown('select#CityID', "@Url.Action("GetCityList", "AgentGroup")", CityID);
            }

    });
</script>
<script>
    $(document).ready(function () {

        $("input").attr("autocomplete", "off");
        

        var form = $("#mdlAddEdit form");
        form.removeData('validator');
        form.removeData('unobtrusiveValidation');
        $.validator.unobtrusive.parse(form);

        $('#mdlAddEdit').on('shown.bs.modal', function () {
            $('#CountryID').focus();
        });
        $('#mdlAddEdit form').on('submit', function (e) {
            e.preventDefault();
            if (!$(this).valid()) { return; }

            $('#mdlAddEdit .modal-content').mask("Loading...");
            $(this).ajaxSubmit({
                target: '#mdlAddEdit .modal-content',
                success: function (data) {
                    $('#mdlAddEdit .modal-content').html(data.Result);
                    if (data.Success) {
                        $('#mgrid .pagination li.active a').trigger('click');
                        toastr.success("Group updated successfully.");
                        $('#mdlAddEdit').modal('hide');
                    }
                    $('#mdlAddEdit .modal-content').unmask();
                }
            });
        });
    });
</script>