@using RELOCBS.Common;

@using RELOCBS.Utility;

@model RELOCBS.Entities.JobDocUpload

@{

    //Layout = null;
    ViewBag.Title = "DMS";
}

<style type="text/css">
    .modal-open {
        overflow-y: scroll;
    }

    body {
        overflow-y: scroll;
    }
</style>

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
    <h4 class="modal-title">@ViewBag.Title</h4>
</div>

<div class="modal-body">
    <div class="container-fluid">
        @using (Html.BeginForm("Create", "DMS", new { id = @Model.ID, Type = @Model.DocFromType }, FormMethod.Post, new { enctype = "multipart/form-data", @id = "Form_DMS", @name = "Form_DMS" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.ID)
            @Html.HiddenFor(model => model.DocFromType)
            @Html.HiddenFor(model => model.DocNameText)
            <div class="row">
                <div class="col-sm-2 form-group">
                    <label>Document Type</label>
                    @Html.DropDownListFor(model => model.DocTypeID, new SelectList((System.Collections.IEnumerable)ViewData["DocTypeList"], "Value", "Text"), "--Select Doc.Type--", new { id = "DocTypeDropdown", @class = "form-control input-sm clearfix docenableselect", @onchange = "javascript:DocType_OnChange(this.value);" })
                    @Html.HiddenFor(model => model.DocTypeID)
                    @Html.ValidationMessageFor(model => model.DocTypeID, "", new { @class = "text-danger" })
                </div>
                <div class="col-sm-3 form-group">
                    <label>Document Name</label>
                    @Html.DropDownListFor(model => model.DocNameID, new SelectList((System.Collections.IEnumerable)ViewData["DocNameList"], "Value", "Text"), null, new { id = "DocNameDropdown", @class = "form-control input-sm clearfix docenableselect" })
                    @Html.ValidationMessageFor(model => model.DocNameID, "", new { @class = "text-danger" })
                </div>
                <div class="col-sm-3 form-group">
                    <label>Description</label>
                    @Html.EditorFor(model => model.DocDescription, new { htmlAttributes = new { @class = "form-control input-sm clearfix" } })
                    @Html.ValidationMessageFor(model => model.DocDescription, "", new { @class = "text-danger" })
                </div>

                <div class="col-sm-3 form-group">
                    <label>File Upload</label>
                    @Html.TextBoxFor(model => model.file, new { type = "file", @class = "inputfile inputfile-4 form-control", accept = ".xls,.xlsx,.doc,.docx,.jpg,.jpeg,.png,.pdf,.ppt,.pptx,.csv", @multiple = "multiple" })
                    @Html.ValidationMessageFor(model => model.file, "", new { @class = "text-danger" })
                </div>
                <div class="col-sm-1 form-group">
                    <div class="clearfix">
                        <input type="submit" name="Save" value="Upload" class="btn btn-primary btn-sm filter-custom-margin">
                    </div>
                </div>
            </div>

        }
        <div class="row">
            <div class="table-responsive">
                <table class="table table-striped fixed_header">
                    <thead class="ibox-title">
                        <tr>
                            <th>Document Type</th>
                            <th>Document Name</th>
                            <th>Description</th>
                            <th>File Name</th>
                            <th>Uploaded By</th>
                            <th></th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.docLists.Count; i++)
                        {
                            <tr>
                                <td>
                                    @Html.DisplayFor(model => Model.docLists[i].DocType)

                                </td>
                                <td>
                                    @Html.DisplayFor(model => Model.docLists[i].DocName)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => Model.docLists[i].DocDescription)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => Model.docLists[i].FileName)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => Model.docLists[i].UploadBy)
                                </td>
                                <td>
                                    @using (Html.BeginForm("JobDocDownload", "MoveManage", new { id = @Model.docLists[i].FileID }, FormMethod.Post, new { id = "DownloadForm", target = "_blank" }))
                                    {
                                        @Html.AntiForgeryToken();
                                        @Html.Hidden("FileID", Model.docLists[i].FileID, new { @class = "FileID" })
                                        <button type="submit" name="Download" value="Download" class="btn btn-primary btn-sm"><i class="fa fa-download" aria-hidden="true"></i></button>
                                    }
                                </td>
                                <td>
                                    @if (CommonService.IsViewFileButton(@Model.docLists[i].FileName))
                                    {
                                        using (Html.BeginForm("ViewDocument", "DMS", new { id = @Model.docLists[i].FileID }, FormMethod.Post, new { id = "ViewForm", target = "_blank" }))
                                        {
                                            @Html.AntiForgeryToken();
                                            @Html.Hidden("FileID", Model.docLists[i].FileID, new { @class = "FileID" })
                                            <button type="submit" name="View" value="View" class="btn btn-primary btn-sm"><i class="fa fa-eye" aria-hidden="true"></i></button>
                                        }
                                    }
                                </td>
                                <td>
                                    @if (UserSession.GetUserSession().LoginType == "SA" || UserSession.GetUserSession().LoginType == "AA" || UserSession.GetUserSession().LoginID == Model.docLists[i].UploadById)
                                    {
                                        using (Html.BeginForm("DocDelete", "DMS", new { FileID = @Model.docLists[i].FileID, Type = @Model.DocFromType }, FormMethod.Post, new { id = "DeleteForm" }))
                                        {
                                            @Html.AntiForgeryToken();
                                            @Html.Hidden("FileID", Model.docLists[i].FileID, new { @class = "FileID" })
                                            @Html.HiddenFor(model => model.ID)
                                            @Html.HiddenFor(model => model.DocFromType)
                                            @Html.HiddenFor(model => model.DocTypeID)
                                            <button type="submit" name="Delete" value="Delete" class="btn btn-danger btn-sm btnDeleteDoc"><i class="fa fa-trash-o"></i></button>
                                        }
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>




<script type="text/javascript">
    function DocType_OnChange(_DocType) {
        $("#DocNameDropdown").text('');
        $("#DocNameDropdown").val('');
        $("#DocNameDropdown").empty();
        //$("#DocNameDropdown").append($('<option>').text("--Select Docuement Name--").attr('value', ''));
        if (_DocType != null && _DocType != "") {

            $.ajax({
                contentType: "application/json; charset=utf-8",
                url: "@Url.Action("GetDocName", "Combo")?DocType=" + _DocType,
                async: 'false',
                dataType: 'json',
                type: "GET",
                success: function (data) {
                    $.each(data, function (number, municipe) {

                        $("#DocNameDropdown").append($('<option>').text(municipe.Text).attr('value', municipe.Value));

                    });
                    
                },
                error: function (reponse) {
                    alert("error : " + reponse);
                }
            });
        }

        }

</script>
<script>
    $("#DocTypeDropdown :not(option:selected)").prop("disabled", true);

    $(document).ready(function () {

        $("input").attr("autocomplete", "off");

        //debugger;
        //if ($("#DocNameDropdown option").length == 3) {
        //    $('#DocNameDropdown').val($('#DocNameDropdown option:eq(1)').val()).trigger('change');

        //    //$("#DocNameDropdown").select2().select2('val', $('#DocNameDropdown option:eq(2)').val());
        //}

        $('.docenableselect').select2();
        
        var form = $("#mdlDMS form");
        form.removeData('validator');
        form.removeData('unobtrusiveValidation');
        $.validator.unobtrusive.parse(form);
       

        $('#mdlDMS').on('shown.bs.modal', function () {
            $('#DocTypeDropdown').focus();
        });

        $('#mdlDMS').on('hidden.bs.modal', function () {
            $(this).removeData('bs.modal');
        });



        $('#Form_DMS').on('submit', function (e) {
            e.preventDefault();
            if (!$(this).valid()) { return; }

            $('#mdlDMS .modal-content').mask("Loading...");
            $(this).ajaxSubmit({
                target: '#mdlDMS .modal-content',
                success: function (data) {
                    $('#mdlDMS .modal-content').html(data.Result);
                    if (data.Success) {
                        //$('#mgrid .pagination li.active a').trigger('click');
                        toastr.success("File Upload saved successfully.");
                        //$('#mdlAddEdit').modal('hide');
                    }
                    $('#mdlDMS .modal-content').unmask();
                }
            });
        });


        $('.btnDeleteDoc').click(function (event) {

            debugger;
            event.preventDefault();
            $frmRWDelete = $('#DeleteForm');
            swal({
                title: "Are you sure you want to delete this record?",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "Delete",
                cancelButtonText: "No",
                closeOnConfirm: true,
                closeOnCancel: true
            },
                function (isConfirm) {
                    if (isConfirm) {
                        $('#mdlDMS .modal-content').mask("Loading...");
                        $($frmRWDelete).ajaxSubmit({
                            success: function (data) {
                                $('#mdlDMS .modal-content').html(data.Result);
                                document.body.style.overflowY = 'scroll';
                                if (data.Success) {
                                    toastr.success("Document deleted successfully.");
                                    
                                } else if (!data.Success) {
                                    swal({
                                        text: "Document Delete Failed.",
                                        type: "error"
                                    });
                                }
                                $('#mdlDMS .modal-content').unmask();
                            },
                            complete: function () {
                                $('#mdlDMS .modal-content').unmask();
                            }
                        });
                    } else {
                        swal("", "Document Delete Cancelled.", "error");
                    }
                });
            

        });

    });

</script>

@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqunobtrusive")

}