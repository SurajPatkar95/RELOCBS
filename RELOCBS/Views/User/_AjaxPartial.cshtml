@model IEnumerable<RELOCBS.Entities.User>
@using RELOCBS.Utility;
@using RELOCBS.App_Code;
@using PagedList;
@using PagedList.Mvc;
@using GridMvc.Html
@{

    string _PageID = "7";
    bool hasAddAccess = UserSession.HasPermission(_PageID, EnumUtility.PageAction.ADD);
    bool hasEditAccess = UserSession.HasPermission(_PageID, EnumUtility.PageAction.EDIT);
    bool hasDeleteAccess = UserSession.HasPermission(_PageID, EnumUtility.PageAction.DELETE);
}
@Html.Grid(Model).Named("mainGrid").Columns(columns =>
{

//columns.Add(o => o.LoginID)
//    .Titled("User Id")
//    .Css("col-md-3")
//    .SetWidth(2)
//    .SortInitialDirection(GridMvc.Sorting.GridSortDirection.Ascending);

columns.Add().Titled("")
        .Encoded(false)
        .Sanitized(false)
        .SetWidth(10)
        .RenderValueAs(o => Html.CheckBox("IsCheck",false,new { @data_id=o.LoginID }));
columns.Add(o => o.UserName)
.Titled("User Name").Css("col-md-3");
columns.Add(o => o.LoginType)
    .Css("col-md-3")
    .Titled("LoginType")
    .SetWidth(10);
columns.Add(o => o.LoginText)
.Titled("LoginText").Css("col-md-3");
columns.Add(o => o.PasswordExpiryDate)
    .Css("col-md-3")
    .Titled("PwdExpiryDate").Format("{0:dd-MMM-yyyy}")
    .SetWidth(10);
columns.Add(o => o.PasswordExpiryDays)
    .Css("col-md-3")
    .Titled("PwdExpiryDays")
    .SetWidth(10);

columns.Add(o => o.AttemptCount)
    .Css("col-md-3")
    .Titled("LoginAttempts")
    .SetWidth(10);
columns.Add(o => o.LastLogInDateTime)
    .Css("col-md-3")
    .Titled("LastLogIn").Format("{0:dd-MMM-yyyy HH:mm}")
    .SetWidth(10);
columns.Add(o => o.isActive)
.Titled("Active").Css("col-md-1")
.Encoded(false)
.Sanitized(false)
.RenderValueAs(d =>
@<span>
    @if (d.isActive == true)
    {
        <i class="fa fa-check text-navy"></i>
    }
</span>
);
columns.Add(o => o.DeactivatedOn)
    .Css("col-md-3")
    .Titled("LastDeactiveDate").Format("{0:dd-MMM-yyyy HH:mm}")
    .SetWidth(10);
columns.Add()
.Encoded(false)
.Sanitized(false)
.Sortable(true)
.Css("col-md-3").Titled("Actions")
.RenderValueAs(d =>
@<span>
    @if (hasEditAccess)
                {
        <a href="@Url.Action("Create/" + d.LoginID, "User")" class="btnEdit btn btn-xs btn-default glyphicon glyphicon-pencil pull-left" data-toggle="modal" data-target="#mdlAddEdit" data-cache="false" title="Edit User"></a>
        <a href="#" class="btn btn-xs btn-default pull-left" title="Map Role" onclick="MappingPopUp(@d.LoginID,'Role')">Map Role</a>
        <a href="#" class="btn btn-xs btn-default pull-left" title="Map Company" onclick="MappingPopUp(@d.LoginID,'Comp')">Map Company</a>
        <a href="#" class="btn btn-xs btn-default pull-left" title="Map Click Restriction" onclick="MappingPopUp(@d.LoginID,'clickrestrict')">Map Restriction</a>
                }

    @*@if (d.Isactive == true && hasDeleteAccess)
                {
        <div class="pull-left">
            <form method="post" action="@Url.Action("Delete/" + d.UserID, "City")" class="frmRWDelete" title="Delete City">
                @Html.AntiForgeryToken()
                <input type="hidden" name="CityID" value="@d.UserID" />
                <button type="submit" class="btnDelete btn btn-xs btn-danger glyphicon glyphicon-trash marl-5"></button>
            </form>
        </div>
                }*@

</span>
);

columns.Add()
.Encoded(false)
.Sanitized(false)
.Sortable(true)
.Css("col-md-3").Titled("")
.RenderValueAs(d =>
    @<span>
        @if (hasEditAccess)
        {
            
            
            <a href="#" class="btn btn-xs btn-default pull-left" title="Map Country" onclick="MappingPopUp(@d.LoginID,'Branch')">Map Branch</a>
            <a href="#" class="btn btn-xs btn-default pull-left" title="Map Bussiness" onclick="MappingPopUp(@d.LoginID,'Rmc')">Map Bussiness</a>
            <a href="#" class="btn btn-xs btn-default pull-left" title="Map Warehouse" onclick="MappingPopUp(@d.LoginID,'warehouse')">Map Warehouse</a>
        }
    </span>
    );

columns.Add()
.Encoded(false)
.Sanitized(false)
.Sortable(true)
.Css("col-md-3").Titled("")
.RenderValueAs(d =>
    @<span>
        @if (hasEditAccess)
        {
            
            <a href="#" class="btn btn-xs btn-default pull-left" title="Map Report" onclick="MappingPopUp(@d.LoginID,'report')">Map Report</a>
            <a href="#" class="btn btn-xs btn-default pull-left" title="Map RevenueBranch" onclick="MappingPopUp(@d.LoginID,'rvbranch')">Map RevenueBranch</a>
         <a href="#" class="btn btn-xs btn-default pull-left" title="Map Serviceline" onclick="MappingPopUp(@d.LoginID,'serviceline')">Map Serviceline</a>
        }
    </span>
    );    
    
 }).Sortable()

<div class="clearfix pnl-pagination">
    <div class="pull-right">
        @Html.PagedListPager((IPagedList)Model, page => Url.Action("Index","User", new { page }), PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(new PagedListRenderOptions() { MaximumPageNumbersToDisplay = 4, DisplayPageCountAndCurrentLocation = true }, new AjaxOptions() { HttpMethod = "POST", UpdateTargetId = "mgrid", OnComplete = "PagedOnComplete" }))
        @if (Model.Count() == 0)
        {
            <div class="pagination-container hidden"><ul class="pagination"><li class="active"><a>1</a></li></ul></div>
        }
    </div>
</div>

