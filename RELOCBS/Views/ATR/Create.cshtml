@model RELOCBS.Entities.ATRPoint

@{
    ViewBag.Title = "Add/Edit ATR Point";

    Model.IsHO = new RELOCBS.BL.ATR.ATRBL().CheckIsHO();

}

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
    <h4 class="modal-title">@ViewBag.Title</h4>
</div>

@using (Html.BeginForm("Create", "ATR", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="modal-body">
        <div class="row">
            <div class="col-sm-12">

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.ATRPointId)


                <div class="form-group row">
                    @Html.LabelFor(model => model.CategoryId, htmlAttributes: new { @class = "control-label col-md-3 col-md-offset-2 requiredlabel" })
                    <div class="col-md-5">
                        @Html.DropDownListFor(model => model.CategoryId, new SelectList((System.Collections.IEnumerable)ViewData["CategoryList"], "Value", "Text"), "Select Category", new { @class = "form-control input-sm clearfix" })
                        @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    @Html.LabelFor(model => model.IssueHeading, htmlAttributes: new { @class = "control-label col-md-3 col-md-offset-2" })
                    <div class="col-md-5">
                        @Html.EditorFor(model => model.IssueHeading, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.IssueHeading, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    @Html.LabelFor(model => model.IssueDescription, htmlAttributes: new { @class = "control-label col-md-3 col-md-offset-2 requiredlabel" })
                    <div class="col-md-5">
                        @Html.EditorFor(model => model.IssueDescription, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.IssueDescription, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    @Html.LabelFor(model => model.AuditReportSource, htmlAttributes: new { @class = "control-label col-md-3 col-md-offset-2" })
                    <div class="col-md-5">
                        @Html.EditorFor(model => model.AuditReportSource, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.AuditReportSource, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    @Html.LabelFor(model => model.MonthOfIssue, htmlAttributes: new { @class = "control-label col-md-3 col-md-offset-2" })
                    <div class="col-md-5">
                        @Html.EditorFor(model => model.MonthOfIssue, new { htmlAttributes = new { @placeholder = "Month Of Issue", @tooltip = "Month Of Issue", @class = "form-control input-sm", title = "Month Of Issue" } })
                        <span class="input-group-addon" style="display: none">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                        @Html.ValidationMessageFor(model => model.MonthOfIssue, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    @Html.LabelFor(model => model.RiskId, htmlAttributes: new { @class = "control-label col-md-3 col-md-offset-2 requiredlabel" })
                    <div class="col-md-5">
                        @Html.DropDownListFor(model => model.RiskId, new SelectList((System.Collections.IEnumerable)ViewData["RiskList"], "Value", "Text"), "Select Risk", new { @class = "form-control input-sm clearfix" })
                        @Html.ValidationMessageFor(model => model.RiskId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.DepartmentId, htmlAttributes: new { @class = "control-label col-md-3 col-md-offset-2 requiredlabel" })
                    <div class="col-md-5">
                        @Html.DropDownListFor(model => model.DepartmentId, new SelectList((System.Collections.IEnumerable)ViewData["DeptList"], "Value", "Text"), "Select Department", new { @class = "form-control input-sm enableSelect clearfix" })
                        @Html.ValidationMessageFor(model => model.DepartmentId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    @Html.LabelFor(model => model.FirstPersonRespLoginId, htmlAttributes: new { @class = "control-label col-md-3 col-md-offset-2 requiredlabel" })
                    <div class="col-md-5">
                        @Html.DropDownListFor(model => model.FirstPersonRespLoginId, new SelectList((System.Collections.IEnumerable)ViewData["EmpList"], "Value", "Text"), "Select 1st Responsible", new { @class = "form-control input-sm enableSelect clearfix" })
                        @Html.ValidationMessageFor(model => model.FirstPersonRespLoginId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    @Html.LabelFor(model => model.SecondPersonRespLoginId, htmlAttributes: new { @class = "control-label col-md-3 col-md-offset-2 requiredlabel" })
                    <div class="col-md-5">
                        @Html.DropDownListFor(model => model.SecondPersonRespLoginId, new SelectList((System.Collections.IEnumerable)ViewData["EmpList"], "Value", "Text"), "Select 2nd Responsible", new { @class = "form-control input-sm enableSelect clearfix" })
                        @Html.ValidationMessageFor(model => model.SecondPersonRespLoginId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    @Html.LabelFor(model => model.ComplianceStatusId, htmlAttributes: new { @class = "control-label col-md-3 col-md-offset-2" })
                    <div class="col-md-5">
                        @Html.DropDownListFor(model => model.ComplianceStatusId, new SelectList((System.Collections.IEnumerable)ViewData["CompStatusList"], "Value", "Text"), "Select Status", new { @class = "form-control input-sm clearfix ComplianceStatusId" })
                        @if (Model.ComplianceStatusId < 1)
                        {
                            @Html.HiddenFor(model => model.ComplianceStatusId, new { @class = "HFComplianceStatusId" });
                        }

                        @Html.ValidationMessageFor(model => model.ComplianceStatusId, "", new { @class = "text-danger" })
                    </div>
                </div>
                 @{ string IsCloseDateShow = Model.ComplianceStatusId == 2 ? "" : "hide"; }
                <div class="form-group row CloseDateDiv @IsCloseDateShow">
                    <label for="CloseDate" class="control-label col-md-3 col-md-offset-2">CloseDate</label>
                    <div class="col-sm-5">
                        @Html.EditorFor(model => model.CloseDate, new { htmlAttributes = new { @class = "form-control input-sm clearfix datetimepicker" } })
                        @Html.ValidationMessageFor(model => model.CloseDate, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    @Html.LabelFor(model => model.Remark, htmlAttributes: new { @class = "control-label col-md-3 col-md-offset-2" })
                    <div class="col-md-5">
                        @Html.EditorFor(model => model.Remark, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>
            </div>
    </div>
    @Html.HiddenFor(model=>model.IsHO)
    <div class="modal-footer">
        @if(Model.IsHO)
        {

        <div class="pull-right">
            <input type="submit" value="Save" class="btn btn-primary btn-sm" id="btnCreate" />
        </div>

        }
    </div>
}

<script>
    
                $(document).ready(function () {
                    $("[data-val-required]").each(function () {
                        $("label[for=" + this.id + "]").addClass("requiredlabel")
                    });

                    $('.enableSelect').select2();

                    $('.datetimepicker').datetimepicker({
                        format: "DD-MMM-YYYY",
                        sideBySide: true//,
                        //widgetPositioning: {
                        //    vertical: 'bottom'
                        //}

                    });

                    $('.datetimepicker').each(function () {

                        if ($(this).val().includes("0001")) {
                            $(this).val("");
                        }
                    });

                    let ATRPointId = '@Model.ATRPointId';
                    if (isNaN(parseInt(ATRPointId))) {

                        $('.ComplianceStatusId').val('1').attr('disabled', 'disabled');
                        $('.HFComplianceStatusId').val('1');
                        
                    }

                });

                 $('body').on('change', '#ComplianceStatusId', function (e) {
                     var ComplianceStatusId = $(this).val();

                     if (ComplianceStatusId==2) {

                         $(".CloseDateDiv").removeClass('hide');
                     }
                     else {
                         $(".CloseDateDiv").addClass('hide');
                     }
                    
                    
                });
        </script>
        <script>
                $(document).ready(function () {

                    $("input").attr("autocomplete", "off");

                    var form = $("#mdlAddEdit form");
                    form.removeData('validator');
                    form.removeData('unobtrusiveValidation');
                    $.validator.unobtrusive.parse(form);

                    $('#mdlAddEdit').on('shown.bs.modal', function () {
                        $('#CountryID').focus();
                    });
                    $('#mdlAddEdit form').on('submit', function (e) {
                        e.preventDefault();
                        if (!$(this).valid()) { return; }


                        $('#mdlAddEdit .modal-content').mask("Loading...");
                        $(this).ajaxSubmit({
                            target: '#mdlAddEdit .modal-content',
                            success: function (data) {
                                $('#mdlAddEdit .modal-content').html(data.Result);
                                if (data.Success) {
                                    $('#mgrid .pagination li.active a').trigger('click');
                                    toastr.success("ATR Point saved successfully.");
                                    $('#mdlAddEdit').modal('hide');
                                }
                                $('#mdlAddEdit .modal-content').unmask();
                            }
                        });
                    });
                });



    $(document).ready(function () {


        if ($('#MonthOfIssue').val().indexOf('01-Jan-0001')>=0) {
            $('#MonthOfIssue').val(null);
        }

        $('#MonthOfIssue').on('focus', function () {
            $(this).siblings('.input-group-addon').click();
        });

        $("#MonthOfIssue").datetimepicker({
            viewMode: 'months',
            format: 'DD-MMM-YYYY',
            useCurrent: false,
            dayViewHeaderFormat: 'MMMM YYYY',
            showTodayButton: false,
            //minDate: false,
            //maxDate : new Date()
        });
        
        $("#MonthOfIssue").on("dp.change", function (e) {
            let CurrentDate = new Date(e.date._d);
            e.date._d = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
            $(this).val(moment(new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1)).format('DD-MMM-YYYY'));
            $(this).datepicker('hide');
        });


    });

</script>
